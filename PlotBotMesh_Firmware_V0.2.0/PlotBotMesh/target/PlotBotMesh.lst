
c:/git/PlotBot/PlotBotMesh_Firmware_V0.2.0/PlotBotMesh/target/PlotBotMesh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a588  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001e8e4  2**0
                  CONTENTS
  3 .data         00000318  2003d4b8  000de5a0  0001d4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001020  2003d7d0  2003d7d0  0002d7d0  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000de8b8  000de8b8  0001e8b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000de8e0  000de8e0  0001e8e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00182ff2  00000000  00000000  0001e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00021096  00000000  00000000  001a18d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000208dc  00000000  00000000  001c296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002e28  00000000  00000000  001e3248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004ae8  00000000  00000000  001e6070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00050252  00000000  00000000  001eab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00058253  00000000  00000000  0023adaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000fc44e  00000000  00000000  00292ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000e98c  00000000  00000000  0038f44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	90 d1 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 f978 	bl	da322 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 f97d 	bl	da338 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d4b8 	.word	0x2003d4b8
   d4048:	000de5a0 	.word	0x000de5a0
   d404c:	2003d7d0 	.word	0x2003d7d0
   d4050:	2003d7d0 	.word	0x2003d7d0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc6d 	bl	d7938 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000de5a0 	.word	0x000de5a0
   d4080:	000de514 	.word	0x000de514

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b858 	b.w	d4138 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb41 	bl	d4710 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bc1f 	b.w	d78d4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bc33 	b.w	d6900 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 bc31 	b.w	d6900 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bc37 	b.w	d6910 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bc35 	b.w	d6910 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fb38 	bl	d6724 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d63b5 	.word	0x000d63b5

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z17averageAnalogReadi>:
}

//Takes average of readings on a given pin
//Returns the average
int averageAnalogRead(int pinToRead)
{
   d40cc:	b570      	push	{r4, r5, r6, lr}
   d40ce:	2508      	movs	r5, #8
	byte numberOfReadings = 8;
	unsigned int runningValue = 0;
   d40d0:	2400      	movs	r4, #0

	for(int x = 0 ; x < numberOfReadings ; x++)
		runningValue += analogRead(pinToRead);
   d40d2:	b286      	uxth	r6, r0
   d40d4:	4630      	mov	r0, r6
   d40d6:	f005 f838 	bl	d914a <analogRead>
int averageAnalogRead(int pinToRead)
{
	byte numberOfReadings = 8;
	unsigned int runningValue = 0;

	for(int x = 0 ; x < numberOfReadings ; x++)
   d40da:	3d01      	subs	r5, #1
		runningValue += analogRead(pinToRead);
   d40dc:	4404      	add	r4, r0
int averageAnalogRead(int pinToRead)
{
	byte numberOfReadings = 8;
	unsigned int runningValue = 0;

	for(int x = 0 ; x < numberOfReadings ; x++)
   d40de:	d1f9      	bne.n	d40d4 <_Z17averageAnalogReadi+0x8>
		runningValue += analogRead(pinToRead);
	runningValue /= numberOfReadings;

	return(runningValue);
}
   d40e0:	08e0      	lsrs	r0, r4, #3
   d40e2:	bd70      	pop	{r4, r5, r6, pc}

000d40e4 <_Z15calcBatteryInfov>:
	#endif
}

//Calculates battery info
void calcBatteryInfo()
{
   d40e4:	b508      	push	{r3, lr}
	battvolt = (float)((float)averageAnalogRead(BATT) / 1000.0);
   d40e6:	2021      	movs	r0, #33	; 0x21
   d40e8:	f7ff fff0 	bl	d40cc <_Z17averageAnalogReadi>
   d40ec:	ee07 0a90 	vmov	s15, r0
   d40f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d4104 <_Z15calcBatteryInfov+0x20>
   d40f4:	4b04      	ldr	r3, [pc, #16]	; (d4108 <_Z15calcBatteryInfov+0x24>)
   d40f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   d40fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d40fe:	edc3 7a00 	vstr	s15, [r3]
   d4102:	bd08      	pop	{r3, pc}
   d4104:	447a0000 	.word	0x447a0000
   d4108:	2003d7f8 	.word	0x2003d7f8

000d410c <_GLOBAL__sub_I__Z8dewPointdd>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d410c:	f002 b8a2 	b.w	d6254 <HAL_Pin_Map>

000d4110 <_ZN14SSD1306_128x32D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class SSD1306_128x32 : public Adafruit_GFX {
   d4110:	4770      	bx	lr

000d4112 <_ZN11ArduinoJson16StaticJsonBufferILj1000EE5allocEj>:
  size_t capacity() const { return CAPACITY; }
  size_t size() const { return _size; }

 protected:
  virtual void* alloc(size_t bytes) {
    if (_size + bytes > CAPACITY) return NULL;
   d4112:	f8d0 33ec 	ldr.w	r3, [r0, #1004]	; 0x3ec
   d4116:	4419      	add	r1, r3
   d4118:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    void* p = &_buffer[_size];
   d411c:	bf9d      	ittte	ls
   d411e:	181b      	addls	r3, r3, r0
    _size += bytes;
   d4120:	f8c0 13ec 	strls.w	r1, [r0, #1004]	; 0x3ec
    return p;
   d4124:	1d18      	addls	r0, r3, #4
  size_t capacity() const { return CAPACITY; }
  size_t size() const { return _size; }

 protected:
  virtual void* alloc(size_t bytes) {
    if (_size + bytes > CAPACITY) return NULL;
   d4126:	2000      	movhi	r0, #0
    void* p = &_buffer[_size];
    _size += bytes;
    return p;
  }
   d4128:	4770      	bx	lr

000d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
   d412a:	b508      	push	{r3, lr}
      { return __x < __y; }
   d412c:	f003 f94a 	bl	d73c4 <_ZNK6StringltERKS_>
   d4130:	3000      	adds	r0, #0
   d4132:	bf18      	it	ne
   d4134:	2001      	movne	r0, #1
   d4136:	bd08      	pop	{r3, pc}

000d4138 <setup>:
	float hue = 0.0;
	boolean up = true;
#endif
    
void setup() 
{
   d4138:	b538      	push	{r3, r4, r5, lr}
    STARTUP(System.enableFeature(FEATURE_RETAINED_MEMORY));
   d413a:	4c33      	ldr	r4, [pc, #204]	; (d4208 <setup+0xd0>)
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	07db      	lsls	r3, r3, #31
   d4140:	d40a      	bmi.n	d4158 <setup+0x20>
   d4142:	4620      	mov	r0, r4
   d4144:	f7ff ffba 	bl	d40bc <__cxa_guard_acquire>
   d4148:	b130      	cbz	r0, d4158 <setup+0x20>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d414a:	2101      	movs	r1, #1
   d414c:	4608      	mov	r0, r1
   d414e:	f002 f951 	bl	d63f4 <HAL_Feature_Set>
   d4152:	4620      	mov	r0, r4
   d4154:	f7ff ffb7 	bl	d40c6 <__cxa_guard_release>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
   d4158:	2001      	movs	r0, #1
   d415a:	f002 fadb 	bl	d6714 <wlan_select_antenna>

    #if PLATFORM_ID == PLATFORM_ARGON
        WiFi.selectAntenna(ANT_EXTERNAL);
		Mesh.subscribe("XenonData", XenonDataHandler);
   d415e:	4a2b      	ldr	r2, [pc, #172]	; (d420c <setup+0xd4>)
   d4160:	492b      	ldr	r1, [pc, #172]	; (d4210 <setup+0xd8>)
   d4162:	482c      	ldr	r0, [pc, #176]	; (d4214 <setup+0xdc>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4164:	4c2c      	ldr	r4, [pc, #176]	; (d4218 <setup+0xe0>)
   d4166:	f004 facb 	bl	d8700 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
    #if PLATFORM_ID == PLATFORM_XENON
        //Mesh.selectAntenna(ANT_EXTERNAL);
		Mesh.subscribe("ArgonData", ArgonDataHandler);
    #endif
    
    while(Time.year() <= 1970)
   d416a:	f240 75b2 	movw	r5, #1970	; 0x7b2
   d416e:	f003 fb4f 	bl	d7810 <_ZN9TimeClass4yearEv>
   d4172:	42a8      	cmp	r0, r5
   d4174:	dc0b      	bgt.n	d418e <setup+0x56>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4176:	2000      	movs	r0, #0
   d4178:	f002 fbaa 	bl	d68d0 <spark_sync_time>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d417c:	f002 f922 	bl	d63c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4180:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4182:	f002 fb85 	bl	d6890 <spark_process>
    {
        Particle.syncTime();  
        Particle.process();
        delay(100);
   d4186:	2064      	movs	r0, #100	; 0x64
   d4188:	f003 fb56 	bl	d7838 <delay>
    #if PLATFORM_ID == PLATFORM_XENON
        //Mesh.selectAntenna(ANT_EXTERNAL);
		Mesh.subscribe("ArgonData", ArgonDataHandler);
    #endif
    
    while(Time.year() <= 1970)
   d418c:	e7ef      	b.n	d416e <setup+0x36>
    {
        Particle.syncTime();  
        Particle.process();
        delay(100);
    }
    Time.zone(-8);
   d418e:	eeba 0a00 	vmov.f32	s0, #160	; 0xc1000000 -8.0
   d4192:	f003 fa3d 	bl	d7610 <_ZN9TimeClass4zoneEf>
    
    Serial.begin(115200);   // open serial over USB at 9600 baud
   d4196:	f003 ff5d 	bl	d8054 <_Z16_fetch_usbserialv>
   d419a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d419e:	f003 ff4d 	bl	d803c <_ZN9USBSerial5beginEl>
    
    // Find our device
    delay(5000);
   d41a2:	f241 3088 	movw	r0, #5000	; 0x1388
   d41a6:	f003 fb47 	bl	d7838 <delay>
    InitializeDevices();
   d41aa:	f000 fde9 	bl	d4d80 <_Z17InitializeDevicesv>
	//  Serial.println("Press any key to begin");
	// This line pauses the Serial port until a key is pressed
	//  while(!Serial.available()) 
	//      Particle.process();

    pinMode(ledActivityPin, OUTPUT);
   d41ae:	4b1b      	ldr	r3, [pc, #108]	; (d421c <setup+0xe4>)
   d41b0:	2101      	movs	r1, #1
   d41b2:	8818      	ldrh	r0, [r3, #0]
   d41b4:	f004 ff8c 	bl	d90d0 <pinMode>
	pinMode(BATT, INPUT);
   d41b8:	2100      	movs	r1, #0
   d41ba:	2021      	movs	r0, #33	; 0x21
   d41bc:	f004 ff88 	bl	d90d0 <pinMode>
		segto = 0x80 | displayTime.encodeDigit((value / 100) % 10); // And off will be without this 0x80 bit set
		displayTime.setSegments(&segto, 1, 1);
	#endif
    
	#ifdef SSD1306_128x32x
		Serial.println("OLED FeatherWing");
   d41c0:	f003 ff48 	bl	d8054 <_Z16_fetch_usbserialv>
   d41c4:	4916      	ldr	r1, [pc, #88]	; (d4220 <setup+0xe8>)
   d41c6:	f003 f93b 	bl	d7440 <_ZN5Print7printlnEPKc>
		// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
		oledDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32
   d41ca:	223c      	movs	r2, #60	; 0x3c
   d41cc:	2102      	movs	r1, #2
   d41ce:	4815      	ldr	r0, [pc, #84]	; (d4224 <setup+0xec>)
   d41d0:	f001 faec 	bl	d57ac <_ZN14SSD1306_128x325beginEhh>
		Serial.println("OLED begun");
   d41d4:	f003 ff3e 	bl	d8054 <_Z16_fetch_usbserialv>
   d41d8:	4913      	ldr	r1, [pc, #76]	; (d4228 <setup+0xf0>)
   d41da:	f003 f931 	bl	d7440 <_ZN5Print7printlnEPKc>

		// Clear the buffer.
		oledDisplay.clearDisplay();
   d41de:	4811      	ldr	r0, [pc, #68]	; (d4224 <setup+0xec>)
   d41e0:	f001 fc28 	bl	d5a34 <_ZN14SSD1306_128x3212clearDisplayEv>
		oledDisplay.display();
   d41e4:	480f      	ldr	r0, [pc, #60]	; (d4224 <setup+0xec>)
   d41e6:	f001 fbaf 	bl	d5948 <_ZN14SSD1306_128x327displayEv>

		pinMode(BUTTON_A, INPUT_PULLUP);
   d41ea:	2102      	movs	r1, #2
   d41ec:	2004      	movs	r0, #4
   d41ee:	f004 ff6f 	bl	d90d0 <pinMode>
		pinMode(BUTTON_B, INPUT_PULLUP);
   d41f2:	2102      	movs	r1, #2
   d41f4:	2003      	movs	r0, #3
   d41f6:	f004 ff6b 	bl	d90d0 <pinMode>
		pinMode(BUTTON_C, INPUT_PULLUP);
   d41fa:	2102      	movs	r1, #2
   d41fc:	4608      	mov	r0, r1
	#endif

	#ifdef Chainable_LED
		leds.init();
	#endif
}
   d41fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		oledDisplay.clearDisplay();
		oledDisplay.display();

		pinMode(BUTTON_A, INPUT_PULLUP);
		pinMode(BUTTON_B, INPUT_PULLUP);
		pinMode(BUTTON_C, INPUT_PULLUP);
   d4202:	f004 bf65 	b.w	d90d0 <pinMode>
   d4206:	bf00      	nop
   d4208:	2003d7f0 	.word	0x2003d7f0
   d420c:	000d5119 	.word	0x000d5119
   d4210:	000dd1b0 	.word	0x000dd1b0
   d4214:	2003e410 	.word	0x2003e410
   d4218:	2003e608 	.word	0x2003e608
   d421c:	2003d4b8 	.word	0x2003d4b8
   d4220:	000dd1ba 	.word	0x000dd1ba
   d4224:	2003d804 	.word	0x2003d804
   d4228:	000dd1cb 	.word	0x000dd1cb

000d422c <_ZN5Print8printlnfIIjEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d422c:	4613      	mov	r3, r2
   d422e:	460a      	mov	r2, r1
   d4230:	2101      	movs	r1, #1
   d4232:	f003 b93e 	b.w	d74b2 <_ZN5Print11printf_implEbPKcz>

000d4236 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
   d4236:	4613      	mov	r3, r2
   d4238:	460a      	mov	r2, r1
   d423a:	2101      	movs	r1, #1
   d423c:	f003 b939 	b.w	d74b2 <_ZN5Print11printf_implEbPKcz>

000d4240 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4240:	b570      	push	{r4, r5, r6, lr}
   d4242:	4606      	mov	r6, r0
   d4244:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d4246:	b16c      	cbz	r4, d4264 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24>
	{
	  _M_erase(_S_right(__x));
   d4248:	68e1      	ldr	r1, [r4, #12]
   d424a:	4630      	mov	r0, r6
   d424c:	f7ff fff8 	bl	d4240 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
   d4250:	68a5      	ldr	r5, [r4, #8]
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<class _T1, class _T2>
    struct pair
   d4252:	f104 0010 	add.w	r0, r4, #16
   d4256:	f002 fffb 	bl	d7250 <_ZN6StringD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d425a:	4620      	mov	r0, r4
   d425c:	f7ff ff1f 	bl	d409e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d4260:	462c      	mov	r4, r5
   d4262:	e7f0      	b.n	d4246 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6>
   d4264:	bd70      	pop	{r4, r5, r6, pc}

000d4266 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
   *  multimap; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
   d4266:	b510      	push	{r4, lr}
   d4268:	4604      	mov	r4, r0

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d426a:	6881      	ldr	r1, [r0, #8]
   d426c:	f7ff ffe8 	bl	d4240 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}

000d4274 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4276:	4607      	mov	r7, r0
   d4278:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d427a:	b194      	cbz	r4, d42a2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x2e>
	{
	  _M_erase(_S_right(__x));
   d427c:	68e1      	ldr	r1, [r4, #12]
   d427e:	4638      	mov	r0, r7
   d4280:	f7ff fff8 	bl	d4274 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
   d4284:	f104 0510 	add.w	r5, r4, #16
   d4288:	f104 0020 	add.w	r0, r4, #32
   d428c:	68a6      	ldr	r6, [r4, #8]
   d428e:	f002 ffdf 	bl	d7250 <_ZN6StringD1Ev>
   d4292:	4628      	mov	r0, r5
   d4294:	f002 ffdc 	bl	d7250 <_ZN6StringD1Ev>
   d4298:	4620      	mov	r0, r4
   d429a:	f7ff ff00 	bl	d409e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d429e:	4634      	mov	r4, r6
   d42a0:	e7eb      	b.n	d427a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x6>
   d42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42a4 <_ZNSt3mapI6StringS0_St4lessIS0_ESaISt4pairIKS0_S0_EEED1Ev>:
   d42a4:	b510      	push	{r4, lr}
   d42a6:	4604      	mov	r4, r0

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d42a8:	6881      	ldr	r1, [r0, #8]
   d42aa:	f7ff ffe3 	bl	d4274 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
   d42ae:	4620      	mov	r0, r4
   d42b0:	bd10      	pop	{r4, pc}

000d42b2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d42b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42b6:	688d      	ldr	r5, [r1, #8]
   d42b8:	4604      	mov	r4, r0
   d42ba:	460f      	mov	r7, r1
   d42bc:	4690      	mov	r8, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d42be:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d42c0:	2001      	movs	r0, #1
      while (__x != 0)
   d42c2:	b15d      	cbz	r5, d42dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x2a>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   d42c4:	f105 0110 	add.w	r1, r5, #16
   d42c8:	4640      	mov	r0, r8
   d42ca:	f7ff ff2e 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d42ce:	b118      	cbz	r0, d42d8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
   d42d0:	68ab      	ldr	r3, [r5, #8]
   d42d2:	462e      	mov	r6, r5
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d42d4:	461d      	mov	r5, r3
   d42d6:	e7f4      	b.n	d42c2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x10>
   d42d8:	68eb      	ldr	r3, [r5, #12]
   d42da:	e7fa      	b.n	d42d2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x20>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d42dc:	b148      	cbz	r0, d42f2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x40>
	{
	  if (__j == begin())
   d42de:	68fb      	ldr	r3, [r7, #12]
   d42e0:	429e      	cmp	r6, r3
   d42e2:	d101      	bne.n	d42e8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x36>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d42e4:	6025      	str	r5, [r4, #0]
   d42e6:	e00d      	b.n	d4304 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x52>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d42e8:	4630      	mov	r0, r6
   d42ea:	f005 f820 	bl	d932e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d42ee:	4605      	mov	r5, r0
   d42f0:	e000      	b.n	d42f4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x42>
   d42f2:	4635      	mov	r5, r6
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d42f4:	4641      	mov	r1, r8
   d42f6:	f105 0010 	add.w	r0, r5, #16
   d42fa:	f7ff ff16 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d42fe:	b118      	cbz	r0, d4308 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x56>
   d4300:	2300      	movs	r3, #0
   d4302:	6023      	str	r3, [r4, #0]
   d4304:	6066      	str	r6, [r4, #4]
   d4306:	e001      	b.n	d430c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5a>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d4308:	6025      	str	r5, [r4, #0]
   d430a:	6060      	str	r0, [r4, #4]
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d430c:	4620      	mov	r0, r4
   d430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4314 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4318:	4607      	mov	r7, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d431a:	2030      	movs	r0, #48	; 0x30
   d431c:	460c      	mov	r4, r1
   d431e:	461d      	mov	r5, r3
   d4320:	f7ff feb9 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4324:	f110 0610 	adds.w	r6, r0, #16
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4328:	4681      	mov	r9, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d432a:	d008      	beq.n	d433e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x2a>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d432c:	6829      	ldr	r1, [r5, #0]
   d432e:	4630      	mov	r0, r6
   d4330:	f002 fff7 	bl	d7322 <_ZN6StringC1ERKS_>
   d4334:	4943      	ldr	r1, [pc, #268]	; (d4444 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x130>)
   d4336:	f106 0010 	add.w	r0, r6, #16
   d433a:	f002 ffd0 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d433e:	f107 0a04 	add.w	sl, r7, #4
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d4342:	45a2      	cmp	sl, r4
   d4344:	d10a      	bne.n	d435c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x48>
	{
	  if (size() > 0
   d4346:	697b      	ldr	r3, [r7, #20]
   d4348:	2b00      	cmp	r3, #0
   d434a:	d06f      	beq.n	d442c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x118>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   d434c:	6938      	ldr	r0, [r7, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d434e:	4631      	mov	r1, r6
   d4350:	3010      	adds	r0, #16
   d4352:	f7ff feea 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d4356:	2800      	cmp	r0, #0
   d4358:	d158      	bne.n	d440c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xf8>
   d435a:	e067      	b.n	d442c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x118>
   d435c:	f104 0810 	add.w	r8, r4, #16
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d4360:	4641      	mov	r1, r8
   d4362:	4630      	mov	r0, r6
   d4364:	f7ff fee1 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d4368:	4605      	mov	r5, r0
   d436a:	b1a0      	cbz	r0, d4396 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x82>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d436c:	68fb      	ldr	r3, [r7, #12]
   d436e:	42a3      	cmp	r3, r4
   d4370:	d00f      	beq.n	d4392 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x7e>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d4372:	4620      	mov	r0, r4
   d4374:	f004 ffdb 	bl	d932e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d4378:	4631      	mov	r1, r6
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d437a:	4605      	mov	r5, r0
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d437c:	3010      	adds	r0, #16
   d437e:	f7ff fed4 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d4382:	2800      	cmp	r0, #0
   d4384:	d052      	beq.n	d442c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x118>
	    {
	      if (_S_right(__before._M_node) == 0)
   d4386:	68eb      	ldr	r3, [r5, #12]
   d4388:	2b00      	cmp	r3, #0
   d438a:	bf14      	ite	ne
   d438c:	4625      	movne	r5, r4
   d438e:	2400      	moveq	r4, #0
   d4390:	e027      	b.n	d43e2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xce>
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d4392:	4625      	mov	r5, r4
   d4394:	e025      	b.n	d43e2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xce>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d4396:	4631      	mov	r1, r6
   d4398:	4640      	mov	r0, r8
   d439a:	f7ff fec6 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d439e:	2800      	cmp	r0, #0
   d43a0:	d038      	beq.n	d4414 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x100>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d43a2:	693b      	ldr	r3, [r7, #16]
   d43a4:	42a3      	cmp	r3, r4
   d43a6:	d019      	beq.n	d43dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xc8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d43a8:	4620      	mov	r0, r4
   d43aa:	f004 ffad 	bl	d9308 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   d43ae:	4680      	mov	r8, r0
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d43b0:	f100 0110 	add.w	r1, r0, #16
   d43b4:	4630      	mov	r0, r6
   d43b6:	f7ff feb8 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d43ba:	b130      	cbz	r0, d43ca <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xb6>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d43bc:	68e3      	ldr	r3, [r4, #12]

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d43be:	2b00      	cmp	r3, #0
   d43c0:	bf14      	ite	ne
   d43c2:	4644      	movne	r4, r8
   d43c4:	f04f 0800 	moveq.w	r8, #0
   d43c8:	e009      	b.n	d43de <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xca>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d43ca:	4632      	mov	r2, r6
   d43cc:	4639      	mov	r1, r7
   d43ce:	4668      	mov	r0, sp
   d43d0:	f7ff ff6f 	bl	d42b2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   d43d4:	f8dd 8000 	ldr.w	r8, [sp]
   d43d8:	9c01      	ldr	r4, [sp, #4]
   d43da:	e000      	b.n	d43de <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xca>
	: first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d43dc:	46a8      	mov	r8, r5

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d43de:	4625      	mov	r5, r4
   d43e0:	4644      	mov	r4, r8

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d43e2:	b1bd      	cbz	r5, d4414 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x100>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d43e4:	b93c      	cbnz	r4, d43f6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xe2>
   d43e6:	45aa      	cmp	sl, r5
   d43e8:	d005      	beq.n	d43f6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xe2>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
   d43ea:	f105 0110 	add.w	r1, r5, #16
   d43ee:	4630      	mov	r0, r6
   d43f0:	f7ff fe9b 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d43f4:	e000      	b.n	d43f8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xe4>
						      _S_key(__p)));
   d43f6:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d43f8:	4653      	mov	r3, sl
   d43fa:	462a      	mov	r2, r5
   d43fc:	4649      	mov	r1, r9
   d43fe:	f004 ff98 	bl	d9332 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d4402:	697b      	ldr	r3, [r7, #20]
   d4404:	3301      	adds	r3, #1
   d4406:	617b      	str	r3, [r7, #20]
   d4408:	4648      	mov	r0, r9
   d440a:	e017      	b.n	d443c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x128>
	: first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d440c:	693d      	ldr	r5, [r7, #16]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d440e:	2d00      	cmp	r5, #0
   d4410:	d1e9      	bne.n	d43e6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xd2>
   d4412:	462c      	mov	r4, r5
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<class _T1, class _T2>
    struct pair
   d4414:	f106 0010 	add.w	r0, r6, #16
   d4418:	f002 ff1a 	bl	d7250 <_ZN6StringD1Ev>
   d441c:	4630      	mov	r0, r6
   d441e:	f002 ff17 	bl	d7250 <_ZN6StringD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4422:	4648      	mov	r0, r9
   d4424:	f7ff fe3b 	bl	d409e <_ZdlPv>
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
   d4428:	4620      	mov	r0, r4
   d442a:	e007      	b.n	d443c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x128>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d442c:	4632      	mov	r2, r6
   d442e:	4639      	mov	r1, r7
   d4430:	4668      	mov	r0, sp
   d4432:	f7ff ff3e 	bl	d42b2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
   d4436:	e89d 0030 	ldmia.w	sp, {r4, r5}
   d443a:	e7d2      	b.n	d43e2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0xce>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d443c:	b002      	add	sp, #8
   d443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4442:	bf00      	nop
   d4444:	000ddb19 	.word	0x000ddb19

000d4448 <_Z16DisplayEventDatai>:
	Serial.begin(115200);
}

#ifdef SSD1306_128x32x
void DisplayEventData(int button)
{
   d4448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d444c:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
   d4450:	af02      	add	r7, sp, #8
   d4452:	4605      	mov	r5, r0
	String _deviceId = "";
   d4454:	499a      	ldr	r1, [pc, #616]	; (d46c0 <_Z16DisplayEventDatai+0x278>)
   d4456:	1d38      	adds	r0, r7, #4
   d4458:	f002 ff41 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d445c:	4b99      	ldr	r3, [pc, #612]	; (d46c4 <_Z16DisplayEventDatai+0x27c>)
   d445e:	68d8      	ldr	r0, [r3, #12]
	PlotBotDevice* _device;
	char str[132];

	std::map<String, PlotBotDevice*>::iterator it = fleet.begin();
	while (it !=fleet.end())
   d4460:	1d1c      	adds	r4, r3, #4
   d4462:	42a0      	cmp	r0, r4
   d4464:	d00d      	beq.n	d4482 <_Z16DisplayEventDatai+0x3a>
	{
		_device = it->second;
   d4466:	6a06      	ldr	r6, [r0, #32]
		if (_device->Button == button)
   d4468:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   d446c:	42ab      	cmp	r3, r5
   d446e:	d105      	bne.n	d447c <_Z16DisplayEventDatai+0x34>
		{
			_deviceId = it->first;
   d4470:	f100 0110 	add.w	r1, r0, #16
   d4474:	1d38      	adds	r0, r7, #4
   d4476:	f002 ff45 	bl	d7304 <_ZN6StringaSERKS_>
			break;
   d447a:	e002      	b.n	d4482 <_Z16DisplayEventDatai+0x3a>

      _Self
      operator++(int) _GLIBCXX_NOEXCEPT
      {
	_Self __tmp = *this;
	_M_node = _Rb_tree_increment(_M_node);
   d447c:	f004 ff44 	bl	d9308 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   d4480:	e7ef      	b.n	d4462 <_Z16DisplayEventDatai+0x1a>
		}
		it++;
	}

	oledDisplay.clearDisplay();
   d4482:	4891      	ldr	r0, [pc, #580]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4484:	f001 fad6 	bl	d5a34 <_ZN14SSD1306_128x3212clearDisplayEv>
	oledDisplay.display();
   d4488:	488f      	ldr	r0, [pc, #572]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d448a:	f001 fa5d 	bl	d5948 <_ZN14SSD1306_128x327displayEv>
	oledDisplay.setTextSize(1);
   d448e:	2101      	movs	r1, #1
   d4490:	488d      	ldr	r0, [pc, #564]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4492:	f001 fc91 	bl	d5db8 <_ZN12Adafruit_GFX11setTextSizeEh>
	oledDisplay.setTextColor(WHITE);
   d4496:	2101      	movs	r1, #1
   d4498:	488b      	ldr	r0, [pc, #556]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d449a:	f001 fc92 	bl	d5dc2 <_ZN12Adafruit_GFX12setTextColorEt>
	oledDisplay.setCursor(0, 0);
   d449e:	2200      	movs	r2, #0
   d44a0:	4611      	mov	r1, r2
   d44a2:	4889      	ldr	r0, [pc, #548]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d44a4:	f001 fc85 	bl	d5db2 <_ZN12Adafruit_GFX9setCursorEss>

	sprintf(str, "%s%s", Time.format(Time.now(), "%m/%d/%y %I:%M:%S").c_str(), Time.isAM() ? "am" : "pm");
   d44a8:	f003 f9a1 	bl	d77ee <_ZN9TimeClass3nowEv>
   d44ac:	4b87      	ldr	r3, [pc, #540]	; (d46cc <_Z16DisplayEventDatai+0x284>)
   d44ae:	4988      	ldr	r1, [pc, #544]	; (d46d0 <_Z16DisplayEventDatai+0x288>)
   d44b0:	4602      	mov	r2, r0
   d44b2:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   d44b6:	f003 f947 	bl	d7748 <_ZN9TimeClass6formatElPKc>
   d44ba:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
   d44be:	f003 f99d 	bl	d77fc <_ZN9TimeClass4isAMEv>
   d44c2:	4a84      	ldr	r2, [pc, #528]	; (d46d4 <_Z16DisplayEventDatai+0x28c>)
   d44c4:	4b84      	ldr	r3, [pc, #528]	; (d46d8 <_Z16DisplayEventDatai+0x290>)
   d44c6:	4985      	ldr	r1, [pc, #532]	; (d46dc <_Z16DisplayEventDatai+0x294>)
   d44c8:	2800      	cmp	r0, #0
   d44ca:	bf18      	it	ne
   d44cc:	4613      	movne	r3, r2
   d44ce:	4622      	mov	r2, r4
   d44d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   d44d4:	f002 fa2c 	bl	d6930 <sprintf>
   d44d8:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   d44dc:	f002 feb8 	bl	d7250 <_ZN6StringD1Ev>
	oledDisplay.print(str);
   d44e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d44e4:	4878      	ldr	r0, [pc, #480]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d44e6:	f002 ff98 	bl	d741a <_ZN5Print5printEPKc>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d44ea:	4975      	ldr	r1, [pc, #468]	; (d46c0 <_Z16DisplayEventDatai+0x278>)
   d44ec:	1d38      	adds	r0, r7, #4
   d44ee:	f002 ff57 	bl	d73a0 <_ZNK6String6equalsEPKc>

	if (_deviceId != "")		
   d44f2:	2800      	cmp	r0, #0
   d44f4:	f040 80c4 	bne.w	d4680 <_Z16DisplayEventDatai+0x238>
   d44f8:	4c79      	ldr	r4, [pc, #484]	; (d46e0 <_Z16DisplayEventDatai+0x298>)
		{
			oledDisplay.print(_device->DeviceName);
   d44fa:	6971      	ldr	r1, [r6, #20]
   d44fc:	4872      	ldr	r0, [pc, #456]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d44fe:	f002 ff8c 	bl	d741a <_ZN5Print5printEPKc>
			String dataIn = events[_device->DeviceId];
   d4502:	3404      	adds	r4, #4
   d4504:	6865      	ldr	r5, [r4, #4]
   d4506:	f106 0804 	add.w	r8, r6, #4
   d450a:	46a1      	mov	r9, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d450c:	b165      	cbz	r5, d4528 <_Z16DisplayEventDatai+0xe0>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d450e:	4641      	mov	r1, r8
   d4510:	f105 0010 	add.w	r0, r5, #16
   d4514:	f7ff fe09 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d4518:	b918      	cbnz	r0, d4522 <_Z16DisplayEventDatai+0xda>
   d451a:	68ab      	ldr	r3, [r5, #8]
   d451c:	462c      	mov	r4, r5
   d451e:	461d      	mov	r5, r3
   d4520:	e7f4      	b.n	d450c <_Z16DisplayEventDatai+0xc4>
   d4522:	68eb      	ldr	r3, [r5, #12]
   d4524:	4625      	mov	r5, r4
   d4526:	e7f9      	b.n	d451c <_Z16DisplayEventDatai+0xd4>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d4528:	454c      	cmp	r4, r9
   d452a:	f107 0514 	add.w	r5, r7, #20
   d452e:	f000 80bb 	beq.w	d46a8 <_Z16DisplayEventDatai+0x260>
   d4532:	f104 0110 	add.w	r1, r4, #16
   d4536:	4640      	mov	r0, r8
   d4538:	f7ff fdf7 	bl	d412a <_ZNKSt4lessI6StringEclERKS0_S3_.isra.8>
   d453c:	2800      	cmp	r0, #0
   d453e:	f040 80b3 	bne.w	d46a8 <_Z16DisplayEventDatai+0x260>
   d4542:	f104 0120 	add.w	r1, r4, #32
   d4546:	4628      	mov	r0, r5
   d4548:	f002 feeb 	bl	d7322 <_ZN6StringC1ERKS_>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d454c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   d4550:	f002 f9ae 	bl	d68b0 <spark_deviceID>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   d4554:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
   d4558:	4640      	mov	r0, r8
   d455a:	f002 ff14 	bl	d7386 <_ZNK6String6equalsERKS_>
   d455e:	4604      	mov	r4, r0
			
			if (_device->DeviceId != System.deviceID())
   d4560:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   d4564:	f002 fe74 	bl	d7250 <_ZN6StringD1Ev>
   d4568:	2c00      	cmp	r4, #0
   d456a:	d175      	bne.n	d4658 <_Z16DisplayEventDatai+0x210>
// The template paramenter CAPACITY specifies the capacity of the buffer in
// bytes.
template <size_t CAPACITY>
class StaticJsonBuffer : public JsonBuffer {
 public:
  explicit StaticJsonBuffer() : _size(0) {}
   d456c:	f8c7 4494 	str.w	r4, [r7, #1172]	; 0x494
   d4570:	682c      	ldr	r4, [r5, #0]
   d4572:	4b5c      	ldr	r3, [pc, #368]	; (d46e4 <_Z16DisplayEventDatai+0x29c>)
   d4574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			{
				StaticJsonBuffer<1000> jsonBuffer;
				char eventData[strlen(dataIn) + 1];
   d4578:	4620      	mov	r0, r4
   d457a:	f006 fc6b 	bl	dae54 <strlen>
   d457e:	3008      	adds	r0, #8
   d4580:	f020 0007 	bic.w	r0, r0, #7
					float _dewptf = root["dpf"];
					int _humidity = root["h"];
					
					sprintf(str, "TempF %.2f, Hum %d%%", _tempf, _humidity);
					oledDisplay.print(str);
				}
   d4584:	46e9      	mov	r9, sp
			String dataIn = events[_device->DeviceId];
			
			if (_device->DeviceId != System.deviceID())
			{
				StaticJsonBuffer<1000> jsonBuffer;
				char eventData[strlen(dataIn) + 1];
   d4586:	ebad 0d00 	sub.w	sp, sp, r0
   d458a:	f10d 0808 	add.w	r8, sp, #8
				strcpy(eventData, dataIn.c_str());
   d458e:	4621      	mov	r1, r4
   d4590:	4640      	mov	r0, r8
   d4592:	f005 ff27 	bl	da3e4 <strcpy>
				JsonObject& root = jsonBuffer.parseObject(eventData);
   d4596:	220a      	movs	r2, #10
   d4598:	4641      	mov	r1, r8
   d459a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   d459e:	f001 fdf3 	bl	d6188 <_ZN11ArduinoJson10JsonBuffer11parseObjectEPch>
   d45a2:	4604      	mov	r4, r0

				Serial.println(dataIn.c_str());
   d45a4:	f003 fd56 	bl	d8054 <_Z16_fetch_usbserialv>
   d45a8:	6829      	ldr	r1, [r5, #0]
   d45aa:	f002 ff49 	bl	d7440 <_ZN5Print7printlnEPKc>
				Serial.println(eventData);
   d45ae:	f003 fd51 	bl	d8054 <_Z16_fetch_usbserialv>
   d45b2:	4641      	mov	r1, r8
   d45b4:	f002 ff44 	bl	d7440 <_ZN5Print7printlnEPKc>

				if (!root.success())
   d45b8:	6823      	ldr	r3, [r4, #0]
   d45ba:	b943      	cbnz	r3, d45ce <_Z16DisplayEventDatai+0x186>
				{
					oledDisplay.print("JSON parse failed");
   d45bc:	494a      	ldr	r1, [pc, #296]	; (d46e8 <_Z16DisplayEventDatai+0x2a0>)
   d45be:	4842      	ldr	r0, [pc, #264]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d45c0:	f002 ff2b 	bl	d741a <_ZN5Print5printEPKc>
   d45c4:	4628      	mov	r0, r5
					return;
   d45c6:	46cd      	mov	sp, r9
   d45c8:	f002 fe42 	bl	d7250 <_ZN6StringD1Ev>
   d45cc:	e064      	b.n	d4698 <_Z16DisplayEventDatai+0x250>
				}

				float _battvolt = root["v"];
   d45ce:	4947      	ldr	r1, [pc, #284]	; (d46ec <_Z16DisplayEventDatai+0x2a4>)
   d45d0:	4620      	mov	r0, r4
   d45d2:	f001 fd8d 	bl	d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>

  // Get the variant as the specified type.
  // See cast operators for details.
  template <typename T>
  T as() const {
    return static_cast<T>(*this);
   d45d6:	f001 fde7 	bl	d61a8 <_ZNK11ArduinoJson11JsonVariantcvdEv>
				sprintf(str, "Voltage %.2f", _battvolt);
   d45da:	ec51 0b10 	vmov	r0, r1, d0
   d45de:	f005 fcf1 	bl	d9fc4 <__aeabi_d2f>
   d45e2:	f005 f9b9 	bl	d9958 <__aeabi_f2d>
   d45e6:	460b      	mov	r3, r1
   d45e8:	4602      	mov	r2, r0
   d45ea:	4941      	ldr	r1, [pc, #260]	; (d46f0 <_Z16DisplayEventDatai+0x2a8>)
   d45ec:	f107 0024 	add.w	r0, r7, #36	; 0x24
   d45f0:	f002 f99e 	bl	d6930 <sprintf>
				oledDisplay.print(str);
   d45f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d45f8:	4833      	ldr	r0, [pc, #204]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d45fa:	f002 ff0e 	bl	d741a <_ZN5Print5printEPKc>

				if (_device->NodeType == PLATFORM_XENON)
   d45fe:	6833      	ldr	r3, [r6, #0]
   d4600:	2b0e      	cmp	r3, #14
   d4602:	d127      	bne.n	d4654 <_Z16DisplayEventDatai+0x20c>
				{		
					float _tempf = root["tf"];
   d4604:	493b      	ldr	r1, [pc, #236]	; (d46f4 <_Z16DisplayEventDatai+0x2ac>)
   d4606:	4620      	mov	r0, r4
   d4608:	f001 fd72 	bl	d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>
   d460c:	f001 fdcc 	bl	d61a8 <_ZNK11ArduinoJson11JsonVariantcvdEv>
					float _dewptf = root["dpf"];
   d4610:	4939      	ldr	r1, [pc, #228]	; (d46f8 <_Z16DisplayEventDatai+0x2b0>)
   d4612:	4620      	mov	r0, r4
   d4614:	ec5b ab10 	vmov	sl, fp, d0
   d4618:	f001 fd6a 	bl	d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>
   d461c:	f001 fdc4 	bl	d61a8 <_ZNK11ArduinoJson11JsonVariantcvdEv>
					int _humidity = root["h"];
   d4620:	4936      	ldr	r1, [pc, #216]	; (d46fc <_Z16DisplayEventDatai+0x2b4>)
   d4622:	4620      	mov	r0, r4
   d4624:	f001 fd64 	bl	d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>
   d4628:	f001 fdce 	bl	d61c8 <_ZNK11ArduinoJson11JsonVariantcvlEv>
					
					sprintf(str, "TempF %.2f, Hum %d%%", _tempf, _humidity);
   d462c:	4659      	mov	r1, fp
   d462e:	4604      	mov	r4, r0
   d4630:	4650      	mov	r0, sl
   d4632:	f005 fcc7 	bl	d9fc4 <__aeabi_d2f>
   d4636:	f005 f98f 	bl	d9958 <__aeabi_f2d>
   d463a:	9400      	str	r4, [sp, #0]
   d463c:	4602      	mov	r2, r0
   d463e:	460b      	mov	r3, r1
   d4640:	f107 0024 	add.w	r0, r7, #36	; 0x24
   d4644:	492e      	ldr	r1, [pc, #184]	; (d4700 <_Z16DisplayEventDatai+0x2b8>)
   d4646:	f002 f973 	bl	d6930 <sprintf>
					oledDisplay.print(str);
   d464a:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d464e:	481e      	ldr	r0, [pc, #120]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4650:	f002 fee3 	bl	d741a <_ZN5Print5printEPKc>
   d4654:	46cd      	mov	sp, r9
   d4656:	e00f      	b.n	d4678 <_Z16DisplayEventDatai+0x230>
				}
			}
			else
			{
				sprintf(str, "Voltage %.2f", battvolt);
   d4658:	4b2a      	ldr	r3, [pc, #168]	; (d4704 <_Z16DisplayEventDatai+0x2bc>)
   d465a:	6818      	ldr	r0, [r3, #0]
   d465c:	f005 f97c 	bl	d9958 <__aeabi_f2d>
   d4660:	4602      	mov	r2, r0
   d4662:	460b      	mov	r3, r1
   d4664:	f107 0024 	add.w	r0, r7, #36	; 0x24
   d4668:	4921      	ldr	r1, [pc, #132]	; (d46f0 <_Z16DisplayEventDatai+0x2a8>)
   d466a:	f002 f961 	bl	d6930 <sprintf>
				oledDisplay.print(str);
   d466e:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d4672:	4815      	ldr	r0, [pc, #84]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4674:	f002 fed1 	bl	d741a <_ZN5Print5printEPKc>
	oledDisplay.print(str);

	if (_deviceId != "")		
		{
			oledDisplay.print(_device->DeviceName);
			String dataIn = events[_device->DeviceId];
   d4678:	4628      	mov	r0, r5
   d467a:	f002 fde9 	bl	d7250 <_ZN6StringD1Ev>
   d467e:	e003      	b.n	d4688 <_Z16DisplayEventDatai+0x240>
				sprintf(str, "Voltage %.2f", battvolt);
				oledDisplay.print(str);
			}
		}
		else
			oledDisplay.print("Device: not found");
   d4680:	4921      	ldr	r1, [pc, #132]	; (d4708 <_Z16DisplayEventDatai+0x2c0>)
   d4682:	4811      	ldr	r0, [pc, #68]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4684:	f002 fec9 	bl	d741a <_ZN5Print5printEPKc>

		oledDisplay.setCursor(0,0);
   d4688:	2200      	movs	r2, #0
   d468a:	480f      	ldr	r0, [pc, #60]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d468c:	4611      	mov	r1, r2
   d468e:	f001 fb90 	bl	d5db2 <_ZN12Adafruit_GFX9setCursorEss>
		oledDisplay.display(); // actually display all of the above
   d4692:	480d      	ldr	r0, [pc, #52]	; (d46c8 <_Z16DisplayEventDatai+0x280>)
   d4694:	f001 f958 	bl	d5948 <_ZN14SSD1306_128x327displayEv>
}

#ifdef SSD1306_128x32x
void DisplayEventData(int button)
{
	String _deviceId = "";
   d4698:	1d38      	adds	r0, r7, #4
   d469a:	f002 fdd9 	bl	d7250 <_ZN6StringD1Ev>
		else
			oledDisplay.print("Device: not found");

		oledDisplay.setCursor(0,0);
		oledDisplay.display(); // actually display all of the above
	}
   d469e:	f207 479c 	addw	r7, r7, #1180	; 0x49c
   d46a2:	46bd      	mov	sp, r7
   d46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   d46a8:	f8c7 80a8 	str.w	r8, [r7, #168]	; 0xa8
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d46ac:	4621      	mov	r1, r4
   d46ae:	9500      	str	r5, [sp, #0]
   d46b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   d46b4:	4a15      	ldr	r2, [pc, #84]	; (d470c <_Z16DisplayEventDatai+0x2c4>)
   d46b6:	480a      	ldr	r0, [pc, #40]	; (d46e0 <_Z16DisplayEventDatai+0x298>)
   d46b8:	f7ff fe2c 	bl	d4314 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
   d46bc:	4604      	mov	r4, r0
   d46be:	e740      	b.n	d4542 <_Z16DisplayEventDatai+0xfa>
   d46c0:	000ddb19 	.word	0x000ddb19
   d46c4:	2003d828 	.word	0x2003d828
   d46c8:	2003d804 	.word	0x2003d804
   d46cc:	000dd1d9 	.word	0x000dd1d9
   d46d0:	2003e2a8 	.word	0x2003e2a8
   d46d4:	000ddc31 	.word	0x000ddc31
   d46d8:	000dd1d6 	.word	0x000dd1d6
   d46dc:	000dd1eb 	.word	0x000dd1eb
   d46e0:	2003d7d4 	.word	0x2003d7d4
   d46e4:	000dd1ac 	.word	0x000dd1ac
   d46e8:	000dd1f0 	.word	0x000dd1f0
   d46ec:	000de1e2 	.word	0x000de1e2
   d46f0:	000dd202 	.word	0x000dd202
   d46f4:	000dd20f 	.word	0x000dd20f
   d46f8:	000dd212 	.word	0x000dd212
   d46fc:	000de1fd 	.word	0x000de1fd
   d4700:	000dd216 	.word	0x000dd216
   d4704:	2003d7f8 	.word	0x2003d7f8
   d4708:	000dd22b 	.word	0x000dd22b
   d470c:	000dd420 	.word	0x000dd420

000d4710 <loop>:
		leds.init();
	#endif
}

void loop() 
{
   d4710:	b5f0      	push	{r4, r5, r6, r7, lr}
	digitalWrite(ledActivityPin, HIGH);
   d4712:	4c9f      	ldr	r4, [pc, #636]	; (d4990 <loop+0x280>)
   d4714:	4d9f      	ldr	r5, [pc, #636]	; (d4994 <loop+0x284>)
   d4716:	8820      	ldrh	r0, [r4, #0]
		leds.init();
	#endif
}

void loop() 
{
   d4718:	b087      	sub	sp, #28
	digitalWrite(ledActivityPin, HIGH);
   d471a:	2101      	movs	r1, #1
   d471c:	f004 fce9 	bl	d90f2 <digitalWrite>
	delay(250);
   d4720:	20fa      	movs	r0, #250	; 0xfa
   d4722:	f003 f889 	bl	d7838 <delay>
	digitalWrite(ledActivityPin, LOW);
   d4726:	2100      	movs	r1, #0
   d4728:	8820      	ldrh	r0, [r4, #0]
   d472a:	f004 fce2 	bl	d90f2 <digitalWrite>

	#ifdef SSD1306_128x32x
	if(digitalRead(BUTTON_A) == LOW)
   d472e:	2004      	movs	r0, #4
   d4730:	f004 fcf8 	bl	d9124 <digitalRead>
   d4734:	b908      	cbnz	r0, d473a <loop+0x2a>
		button = BUTTON_A;
   d4736:	2304      	movs	r3, #4
   d4738:	602b      	str	r3, [r5, #0]
	if(digitalRead(BUTTON_B) == LOW)
   d473a:	2003      	movs	r0, #3
   d473c:	f004 fcf2 	bl	d9124 <digitalRead>
   d4740:	b908      	cbnz	r0, d4746 <loop+0x36>
		button = BUTTON_B;
   d4742:	2303      	movs	r3, #3
   d4744:	602b      	str	r3, [r5, #0]
	if(digitalRead(BUTTON_C) == LOW)
   d4746:	2002      	movs	r0, #2
   d4748:	f004 fcec 	bl	d9124 <digitalRead>
   d474c:	b908      	cbnz	r0, d4752 <loop+0x42>
		button = BUTTON_C;
   d474e:	2302      	movs	r3, #2
   d4750:	602b      	str	r3, [r5, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4752:	f001 fe37 	bl	d63c4 <HAL_Timer_Get_Milli_Seconds>
	#endif

	#if PLATFORM_ID == PLATFORM_ARGON
	if (((unsigned)(millis() - startMillis) > displayDelay) || (button != newbutton))
   d4756:	4a90      	ldr	r2, [pc, #576]	; (d4998 <loop+0x288>)
   d4758:	4c90      	ldr	r4, [pc, #576]	; (d499c <loop+0x28c>)
   d475a:	6813      	ldr	r3, [r2, #0]
   d475c:	1ac0      	subs	r0, r0, r3
   d475e:	4b90      	ldr	r3, [pc, #576]	; (d49a0 <loop+0x290>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	4298      	cmp	r0, r3
   d4764:	4616      	mov	r6, r2
   d4766:	4b8f      	ldr	r3, [pc, #572]	; (d49a4 <loop+0x294>)
   d4768:	d804      	bhi.n	d4774 <loop+0x64>
   d476a:	6829      	ldr	r1, [r5, #0]
   d476c:	681a      	ldr	r2, [r3, #0]
   d476e:	4291      	cmp	r1, r2
   d4770:	f000 80cd 	beq.w	d490e <loop+0x1fe>
	#elif PLATFORM_ID == PLATFORM_XENON
	if ((unsigned)(millis() - startMillis) > displayDelay)
	#endif
	{
		#ifdef SSD1306_128x32x
			newbutton = button;
   d4774:	682a      	ldr	r2, [r5, #0]
   d4776:	601a      	str	r2, [r3, #0]
		#endif

		Serial.printlnf("");
   d4778:	f003 fc6c 	bl	d8054 <_Z16_fetch_usbserialv>
   d477c:	4a8a      	ldr	r2, [pc, #552]	; (d49a8 <loop+0x298>)
   d477e:	2101      	movs	r1, #1
   d4780:	f002 fe97 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		#if PLATFORM_ID == PLATFORM_ARGON
			Serial.printlnf("PlotBot ControlNode (Argon) V%s", version);
   d4784:	f003 fc66 	bl	d8054 <_Z16_fetch_usbserialv>
   d4788:	4a88      	ldr	r2, [pc, #544]	; (d49ac <loop+0x29c>)
   d478a:	4989      	ldr	r1, [pc, #548]	; (d49b0 <loop+0x2a0>)
   d478c:	f7ff fd53 	bl	d4236 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
		#endif
		#if PLATFORM_ID == PLATFORM_XENON
			Serial.printlnf("PlotBot SensorNode (Xenon) V%s", version);
		#endif

		Serial.printf("\n%s\tcloudReady: %d, ", localTime, Particle.connected());
   d4790:	f003 fc60 	bl	d8054 <_Z16_fetch_usbserialv>
   d4794:	4607      	mov	r7, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4796:	f002 f883 	bl	d68a0 <spark_cloud_flag_connected>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d479a:	4b86      	ldr	r3, [pc, #536]	; (d49b4 <loop+0x2a4>)
   d479c:	4a86      	ldr	r2, [pc, #536]	; (d49b8 <loop+0x2a8>)
   d479e:	9000      	str	r0, [sp, #0]
   d47a0:	2100      	movs	r1, #0
   d47a2:	4638      	mov	r0, r7
   d47a4:	f002 fe85 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		#if PLATFORM_ID == PLATFORM_ARGON
			Serial.printf("wifiReady: %d, ", WiFi.ready());
   d47a8:	f003 fc54 	bl	d8054 <_Z16_fetch_usbserialv>
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47ac:	4b83      	ldr	r3, [pc, #524]	; (d49bc <loop+0x2ac>)
   d47ae:	2200      	movs	r2, #0
   d47b0:	4607      	mov	r7, r0
   d47b2:	4611      	mov	r1, r2
   d47b4:	6858      	ldr	r0, [r3, #4]
   d47b6:	f002 f833 	bl	d6820 <network_ready>
   d47ba:	4a81      	ldr	r2, [pc, #516]	; (d49c0 <loop+0x2b0>)
   d47bc:	4603      	mov	r3, r0
   d47be:	2100      	movs	r1, #0
   d47c0:	4638      	mov	r0, r7
   d47c2:	f002 fe76 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
			Serial.printf("meshReady: %d, ", Mesh.ready());
   d47c6:	f003 fc45 	bl	d8054 <_Z16_fetch_usbserialv>
   d47ca:	4b7e      	ldr	r3, [pc, #504]	; (d49c4 <loop+0x2b4>)
   d47cc:	2200      	movs	r2, #0
   d47ce:	4611      	mov	r1, r2
   d47d0:	4607      	mov	r7, r0
   d47d2:	6858      	ldr	r0, [r3, #4]
   d47d4:	f002 f824 	bl	d6820 <network_ready>
   d47d8:	4a7b      	ldr	r2, [pc, #492]	; (d49c8 <loop+0x2b8>)
   d47da:	4603      	mov	r3, r0
   d47dc:	2100      	movs	r1, #0
   d47de:	4638      	mov	r0, r7
   d47e0:	f002 fe67 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
			Serial.printlnf("button: %d", button);
   d47e4:	f003 fc36 	bl	d8054 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d47e8:	682b      	ldr	r3, [r5, #0]
   d47ea:	4a78      	ldr	r2, [pc, #480]	; (d49cc <loop+0x2bc>)
   d47ec:	2101      	movs	r1, #1
   d47ee:	f002 fe60 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		#elif PLATFORM_ID == PLATFORM_XENON
			Serial.printf("meshReady: %d, ", Mesh.ready());
			//Serial.printlnf("button: %d", button);
		#endif

		Serial.println("\n*** Config Data:");
   d47f2:	f003 fc2f 	bl	d8054 <_Z16_fetch_usbserialv>
   d47f6:	4976      	ldr	r1, [pc, #472]	; (d49d0 <loop+0x2c0>)
   d47f8:	f002 fe22 	bl	d7440 <_ZN5Print7printlnEPKc>
		Serial.printf("\tDeviceId: %s, ", device->DeviceId.c_str());
   d47fc:	f003 fc2a 	bl	d8054 <_Z16_fetch_usbserialv>
   d4800:	6823      	ldr	r3, [r4, #0]
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4802:	4a74      	ldr	r2, [pc, #464]	; (d49d4 <loop+0x2c4>)
   d4804:	685b      	ldr	r3, [r3, #4]
   d4806:	2100      	movs	r1, #0
   d4808:	f002 fe53 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printf("Name: %s, ", device->DeviceName.c_str());
   d480c:	f003 fc22 	bl	d8054 <_Z16_fetch_usbserialv>
   d4810:	6823      	ldr	r3, [r4, #0]
   d4812:	4a71      	ldr	r2, [pc, #452]	; (d49d8 <loop+0x2c8>)
   d4814:	695b      	ldr	r3, [r3, #20]
   d4816:	2100      	movs	r1, #0
   d4818:	f002 fe4b 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printlnf("ZipCode: %ld", device->ZipCode);
   d481c:	f003 fc1a 	bl	d8054 <_Z16_fetch_usbserialv>
   d4820:	6823      	ldr	r3, [r4, #0]
   d4822:	496e      	ldr	r1, [pc, #440]	; (d49dc <loop+0x2cc>)
   d4824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   d4826:	f7ff fd01 	bl	d422c <_ZN5Print8printlnfIIjEEEjPKcDpT_>

		Serial.printf("\tLatitude: %lf, ", device->Latitude);
   d482a:	f003 fc13 	bl	d8054 <_Z16_fetch_usbserialv>
   d482e:	6823      	ldr	r3, [r4, #0]
   d4830:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
   d4834:	2100      	movs	r1, #0
   d4836:	e9cd 2300 	strd	r2, r3, [sp]
   d483a:	4a69      	ldr	r2, [pc, #420]	; (d49e0 <loop+0x2d0>)
   d483c:	f002 fe39 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printf("Longitude %lf, ", device->Longitude);
   d4840:	f003 fc08 	bl	d8054 <_Z16_fetch_usbserialv>
   d4844:	6823      	ldr	r3, [r4, #0]
   d4846:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
   d484a:	2100      	movs	r1, #0
   d484c:	e9cd 2300 	strd	r2, r3, [sp]
   d4850:	4a64      	ldr	r2, [pc, #400]	; (d49e4 <loop+0x2d4>)
   d4852:	f002 fe2e 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printlnf("Elevation: %ld", device->Elevation);
   d4856:	f003 fbfd 	bl	d8054 <_Z16_fetch_usbserialv>
   d485a:	6823      	ldr	r3, [r4, #0]
   d485c:	4962      	ldr	r1, [pc, #392]	; (d49e8 <loop+0x2d8>)
   d485e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   d4860:	f7ff fce4 	bl	d422c <_ZN5Print8printlnfIIjEEEjPKcDpT_>

		Serial.printf("\tReportToThingSpeak: %ld, ", device->ReportToThingSpeak);
   d4864:	f003 fbf6 	bl	d8054 <_Z16_fetch_usbserialv>
   d4868:	6823      	ldr	r3, [r4, #0]
   d486a:	4a60      	ldr	r2, [pc, #384]	; (d49ec <loop+0x2dc>)
   d486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d486e:	2100      	movs	r1, #0
   d4870:	f002 fe1f 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printf("ThingSpeakChannelNumber: %lu, ", device->ThingSpeakChannelNumber);
   d4874:	f003 fbee 	bl	d8054 <_Z16_fetch_usbserialv>
   d4878:	6823      	ldr	r3, [r4, #0]
   d487a:	4a5d      	ldr	r2, [pc, #372]	; (d49f0 <loop+0x2e0>)
   d487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d487e:	2100      	movs	r1, #0
   d4880:	f002 fe17 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printlnf("ThingSpeakWriteApiKey: %s, ", device->ThingSpeakWriteApiKey.c_str());
   d4884:	f003 fbe6 	bl	d8054 <_Z16_fetch_usbserialv>
   d4888:	6823      	ldr	r3, [r4, #0]
   d488a:	495a      	ldr	r1, [pc, #360]	; (d49f4 <loop+0x2e4>)
   d488c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   d488e:	f7ff fcd2 	bl	d4236 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

		Serial.printf("\tReportToWunderGround: %ld, ", device->ReportToWunderground);
   d4892:	f003 fbdf 	bl	d8054 <_Z16_fetch_usbserialv>
   d4896:	6823      	ldr	r3, [r4, #0]
   d4898:	4a57      	ldr	r2, [pc, #348]	; (d49f8 <loop+0x2e8>)
   d489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d489c:	2100      	movs	r1, #0
   d489e:	f002 fe08 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printf("WunderGroundPwsiD: %s, ", device->WundergroundPwsId.c_str());
   d48a2:	f003 fbd7 	bl	d8054 <_Z16_fetch_usbserialv>
   d48a6:	6823      	ldr	r3, [r4, #0]
   d48a8:	4a54      	ldr	r2, [pc, #336]	; (d49fc <loop+0x2ec>)
   d48aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48ac:	2100      	movs	r1, #0
   d48ae:	f002 fe00 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
		Serial.printlnf("WunderGroundPassword: %s", device->WundergroundPwsPassword.c_str());
   d48b2:	f003 fbcf 	bl	d8054 <_Z16_fetch_usbserialv>
   d48b6:	6823      	ldr	r3, [r4, #0]
   d48b8:	4951      	ldr	r1, [pc, #324]	; (d4a00 <loop+0x2f0>)
   d48ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   d48bc:	f7ff fcbb 	bl	d4236 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>

		Serial.printlnf("\tReportToCloud: %ld", device->ReportToCloud);
   d48c0:	f003 fbc8 	bl	d8054 <_Z16_fetch_usbserialv>
   d48c4:	6823      	ldr	r3, [r4, #0]
   d48c6:	494f      	ldr	r1, [pc, #316]	; (d4a04 <loop+0x2f4>)
   d48c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   d48ca:	f7ff fcaf 	bl	d422c <_ZN5Print8printlnfIIjEEEjPKcDpT_>

		Serial.printlnf("\tSleepInterval: %ld", device->SleepInterval);
   d48ce:	f003 fbc1 	bl	d8054 <_Z16_fetch_usbserialv>
   d48d2:	6823      	ldr	r3, [r4, #0]
   d48d4:	494c      	ldr	r1, [pc, #304]	; (d4a08 <loop+0x2f8>)
   d48d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   d48d8:	f7ff fca8 	bl	d422c <_ZN5Print8printlnfIIjEEEjPKcDpT_>

		Serial.printlnf("\tButton: %ld", device->Button);
   d48dc:	f003 fbba 	bl	d8054 <_Z16_fetch_usbserialv>
   d48e0:	6823      	ldr	r3, [r4, #0]
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d48e2:	4a4a      	ldr	r2, [pc, #296]	; (d4a0c <loop+0x2fc>)
   d48e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d48e8:	2101      	movs	r1, #1
   d48ea:	f002 fde2 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>

		calcBatteryInfo();
   d48ee:	f7ff fbf9 	bl	d40e4 <_Z15calcBatteryInfov>
		printBatteryInfo();
   d48f2:	f000 fcb5 	bl	d5260 <_Z16printBatteryInfov>
				bTime = true;
			}
		#endif

		#ifdef SSD1306_128x32x
			DisplayEventData(button);
   d48f6:	6828      	ldr	r0, [r5, #0]
   d48f8:	f7ff fda6 	bl	d4448 <_Z16DisplayEventDatai>
		#endif 

		if (device->ReportToCloud == 1)
   d48fc:	6823      	ldr	r3, [r4, #0]
   d48fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4900:	2b01      	cmp	r3, #1
   d4902:	d101      	bne.n	d4908 <loop+0x1f8>
			sendInfoToCloud();
   d4904:	f000 fba2 	bl	d504c <_Z15sendInfoToCloudv>
   d4908:	f001 fd5c 	bl	d63c4 <HAL_Timer_Get_Milli_Seconds>

		startMillis = millis();
   d490c:	6030      	str	r0, [r6, #0]
		up = false;
	else if (hue<=0.0 && !up)
		up = true;	
#endif	

	if (device->SleepInterval > 0)
   d490e:	6823      	ldr	r3, [r4, #0]
   d4910:	4d22      	ldr	r5, [pc, #136]	; (d499c <loop+0x28c>)
   d4912:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   d4914:	2800      	cmp	r0, #0
   d4916:	d031      	beq.n	d497c <loop+0x26c>
	{
		Serial.printlnf("%s: calling System.sleep(SLEEP_MODE_DEEP, %ld);", Time.timeStr().c_str(), device->SleepInterval);
   d4918:	f003 fb9c 	bl	d8054 <_Z16_fetch_usbserialv>
   d491c:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d491e:	f002 ff66 	bl	d77ee <_ZN9TimeClass3nowEv>
   d4922:	4601      	mov	r1, r0
   d4924:	a802      	add	r0, sp, #8
   d4926:	f002 fe8f 	bl	d7648 <_ZN9TimeClass7timeStrEl>
   d492a:	682b      	ldr	r3, [r5, #0]
   d492c:	4a38      	ldr	r2, [pc, #224]	; (d4a10 <loop+0x300>)
   d492e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4930:	9300      	str	r3, [sp, #0]
   d4932:	2101      	movs	r1, #1
   d4934:	9b02      	ldr	r3, [sp, #8]
   d4936:	4620      	mov	r0, r4
   d4938:	f002 fdbb 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
   d493c:	a802      	add	r0, sp, #8
   d493e:	f002 fc87 	bl	d7250 <_ZN6StringD1Ev>
		delay(2);
   d4942:	2002      	movs	r0, #2
   d4944:	f002 ff78 	bl	d7838 <delay>
		System.sleep(SLEEP_MODE_DEEP, device->SleepInterval);
   d4948:	682a      	ldr	r2, [r5, #0]
   d494a:	4b32      	ldr	r3, [pc, #200]	; (d4a14 <loop+0x304>)
   d494c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
   d494e:	681b      	ldr	r3, [r3, #0]
   d4950:	2101      	movs	r1, #1
   d4952:	a802      	add	r0, sp, #8
   d4954:	f002 f8fe 	bl	d6b54 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
		Serial.printlnf("%s: sleeping...", Time.timeStr().c_str());
   d4958:	f003 fb7c 	bl	d8054 <_Z16_fetch_usbserialv>
   d495c:	4604      	mov	r4, r0
   d495e:	f002 ff46 	bl	d77ee <_ZN9TimeClass3nowEv>
   d4962:	4601      	mov	r1, r0
   d4964:	a802      	add	r0, sp, #8
   d4966:	f002 fe6f 	bl	d7648 <_ZN9TimeClass7timeStrEl>
   d496a:	9a02      	ldr	r2, [sp, #8]
   d496c:	492a      	ldr	r1, [pc, #168]	; (d4a18 <loop+0x308>)
   d496e:	4620      	mov	r0, r4
   d4970:	f7ff fc61 	bl	d4236 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4974:	a802      	add	r0, sp, #8
   d4976:	f002 fc6b 	bl	d7250 <_ZN6StringD1Ev>
   d497a:	e001      	b.n	d4980 <loop+0x270>
	}
	else
		delay(0000);
   d497c:	f002 ff5c 	bl	d7838 <delay>
      
	Serial.begin(115200);
   d4980:	f003 fb68 	bl	d8054 <_Z16_fetch_usbserialv>
   d4984:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4988:	f003 fb58 	bl	d803c <_ZN9USBSerial5beginEl>
}
   d498c:	b007      	add	sp, #28
   d498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4990:	2003d4b8 	.word	0x2003d4b8
   d4994:	2003d4cc 	.word	0x2003d4cc
   d4998:	2003d7f4 	.word	0x2003d7f4
   d499c:	2003d7ec 	.word	0x2003d7ec
   d49a0:	2003d4bc 	.word	0x2003d4bc
   d49a4:	2003d7fc 	.word	0x2003d7fc
   d49a8:	000ddb19 	.word	0x000ddb19
   d49ac:	2003d4c0 	.word	0x2003d4c0
   d49b0:	000dd27d 	.word	0x000dd27d
   d49b4:	2003d840 	.word	0x2003d840
   d49b8:	000dd29d 	.word	0x000dd29d
   d49bc:	2003e5d8 	.word	0x2003e5d8
   d49c0:	000dd2b2 	.word	0x000dd2b2
   d49c4:	2003e408 	.word	0x2003e408
   d49c8:	000dd2c2 	.word	0x000dd2c2
   d49cc:	000dd2d2 	.word	0x000dd2d2
   d49d0:	000dd2dd 	.word	0x000dd2dd
   d49d4:	000dd2ef 	.word	0x000dd2ef
   d49d8:	000dd2ff 	.word	0x000dd2ff
   d49dc:	000dd30a 	.word	0x000dd30a
   d49e0:	000dd317 	.word	0x000dd317
   d49e4:	000dd328 	.word	0x000dd328
   d49e8:	000dd338 	.word	0x000dd338
   d49ec:	000dd347 	.word	0x000dd347
   d49f0:	000dd362 	.word	0x000dd362
   d49f4:	000dd381 	.word	0x000dd381
   d49f8:	000dd39d 	.word	0x000dd39d
   d49fc:	000dd3ba 	.word	0x000dd3ba
   d4a00:	000dd3d2 	.word	0x000dd3d2
   d4a04:	000dd3eb 	.word	0x000dd3eb
   d4a08:	000dd3ff 	.word	0x000dd3ff
   d4a0c:	000dd413 	.word	0x000dd413
   d4a10:	000dd23d 	.word	0x000dd23d
   d4a14:	2003d800 	.word	0x2003d800
   d4a18:	000dd26d 	.word	0x000dd26d

000d4a1c <_ZN14SSD1306_128x32D0Ev>:
   d4a1c:	b510      	push	{r4, lr}
   d4a1e:	2124      	movs	r1, #36	; 0x24
   d4a20:	4604      	mov	r4, r0
   d4a22:	f004 fc1d 	bl	d9260 <_ZdlPvj>
   d4a26:	4620      	mov	r0, r4
   d4a28:	bd10      	pop	{r4, pc}
	...

000d4a2c <_GLOBAL__sub_I_device>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a2c:	4b2a      	ldr	r3, [pc, #168]	; (d4ad8 <_GLOBAL__sub_I_device+0xac>)
		else
			oledDisplay.print("Device: not found");

		oledDisplay.setCursor(0,0);
		oledDisplay.display(); // actually display all of the above
	}
   d4a2e:	b570      	push	{r4, r5, r6, lr}
   d4a30:	2500      	movs	r5, #0
   d4a32:	601d      	str	r5, [r3, #0]
   d4a34:	f001 fc0e 	bl	d6254 <HAL_Pin_Map>
#include "Serial.h"
#include "Cloud.h"

#include <ArduinoJson.h>

PlotBotDevice *device = new PlotBotDevice();
   d4a38:	2088      	movs	r0, #136	; 0x88
   d4a3a:	f7ff fb2c 	bl	d4096 <_Znwj>
   d4a3e:	4604      	mov	r4, r0
   d4a40:	b1d8      	cbz	r0, d4a7a <_GLOBAL__sub_I_device+0x4e>
   d4a42:	2288      	movs	r2, #136	; 0x88
   d4a44:	4629      	mov	r1, r5
   d4a46:	f005 fc77 	bl	da338 <memset>
#ifndef Devices_h
#define Devices_h

    class PlotBotDevice {
   d4a4a:	4924      	ldr	r1, [pc, #144]	; (d4adc <_GLOBAL__sub_I_device+0xb0>)
   d4a4c:	1d20      	adds	r0, r4, #4
   d4a4e:	f002 fc46 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4a52:	4922      	ldr	r1, [pc, #136]	; (d4adc <_GLOBAL__sub_I_device+0xb0>)
   d4a54:	f104 0014 	add.w	r0, r4, #20
   d4a58:	f002 fc41 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4a5c:	491f      	ldr	r1, [pc, #124]	; (d4adc <_GLOBAL__sub_I_device+0xb0>)
   d4a5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4a62:	f002 fc3c 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4a66:	491d      	ldr	r1, [pc, #116]	; (d4adc <_GLOBAL__sub_I_device+0xb0>)
   d4a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4a6c:	f002 fc37 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4a70:	491a      	ldr	r1, [pc, #104]	; (d4adc <_GLOBAL__sub_I_device+0xb0>)
   d4a72:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4a76:	f002 fc32 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4a7a:	4b19      	ldr	r3, [pc, #100]	; (d4ae0 <_GLOBAL__sub_I_device+0xb4>)
   d4a7c:	601c      	str	r4, [r3, #0]
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d4a7e:	4c19      	ldr	r4, [pc, #100]	; (d4ae4 <_GLOBAL__sub_I_device+0xb8>)
   d4a80:	1d25      	adds	r5, r4, #4
   d4a82:	2600      	movs	r6, #0
   d4a84:	2210      	movs	r2, #16
   d4a86:	2100      	movs	r1, #0
   d4a88:	4628      	mov	r0, r5
   d4a8a:	f005 fc55 	bl	da338 <memset>
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d4a8e:	60e5      	str	r5, [r4, #12]
	    this->_M_header._M_right = &this->_M_header;
   d4a90:	6125      	str	r5, [r4, #16]
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d4a92:	6166      	str	r6, [r4, #20]
char		version[10] = "0.2.0";
unsigned	displayDelay = 5000;
char 		localTime[30];
float 		battvolt = 0.0;

std::map<String, PlotBotDevice*> fleet;
   d4a94:	4620      	mov	r0, r4
   d4a96:	4c14      	ldr	r4, [pc, #80]	; (d4ae8 <_GLOBAL__sub_I_device+0xbc>)
   d4a98:	4a14      	ldr	r2, [pc, #80]	; (d4aec <_GLOBAL__sub_I_device+0xc0>)
   d4a9a:	4915      	ldr	r1, [pc, #84]	; (d4af0 <_GLOBAL__sub_I_device+0xc4>)
   d4a9c:	1d25      	adds	r5, r4, #4
   d4a9e:	f004 fbd1 	bl	d9244 <__aeabi_atexit>
   d4aa2:	2210      	movs	r2, #16
   d4aa4:	4631      	mov	r1, r6
   d4aa6:	4628      	mov	r0, r5
   d4aa8:	f005 fc46 	bl	da338 <memset>
std::map<String, String> events; 
   d4aac:	4a0f      	ldr	r2, [pc, #60]	; (d4aec <_GLOBAL__sub_I_device+0xc0>)
   d4aae:	4911      	ldr	r1, [pc, #68]	; (d4af4 <_GLOBAL__sub_I_device+0xc8>)
   d4ab0:	6166      	str	r6, [r4, #20]
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d4ab2:	60e5      	str	r5, [r4, #12]
	    this->_M_header._M_right = &this->_M_header;
   d4ab4:	6125      	str	r5, [r4, #16]
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	f004 fbc4 	bl	d9244 <__aeabi_atexit>

#ifdef SSD1306_128x32x
	#include <SSD1306_128x32.h>

	#define OLED_RESET D4
	SSD1306_128x32 oledDisplay(OLED_RESET);
   d4abc:	2104      	movs	r1, #4
   d4abe:	480e      	ldr	r0, [pc, #56]	; (d4af8 <_GLOBAL__sub_I_device+0xcc>)
   d4ac0:	f000 fe1c 	bl	d56fc <_ZN14SSD1306_128x32C1Ea>
   d4ac4:	4a09      	ldr	r2, [pc, #36]	; (d4aec <_GLOBAL__sub_I_device+0xc0>)
   d4ac6:	490d      	ldr	r1, [pc, #52]	; (d4afc <_GLOBAL__sub_I_device+0xd0>)
   d4ac8:	480b      	ldr	r0, [pc, #44]	; (d4af8 <_GLOBAL__sub_I_device+0xcc>)
   d4aca:	f004 fbbb 	bl	d9244 <__aeabi_atexit>

	int button = BUTTON_A;
	int newbutton = button;
   d4ace:	4b0c      	ldr	r3, [pc, #48]	; (d4b00 <_GLOBAL__sub_I_device+0xd4>)
   d4ad0:	681a      	ldr	r2, [r3, #0]
   d4ad2:	4b0c      	ldr	r3, [pc, #48]	; (d4b04 <_GLOBAL__sub_I_device+0xd8>)
   d4ad4:	601a      	str	r2, [r3, #0]
   d4ad6:	bd70      	pop	{r4, r5, r6, pc}
   d4ad8:	2003d800 	.word	0x2003d800
   d4adc:	000ddb19 	.word	0x000ddb19
   d4ae0:	2003d7ec 	.word	0x2003d7ec
   d4ae4:	2003d828 	.word	0x2003d828
   d4ae8:	2003d7d4 	.word	0x2003d7d4
   d4aec:	2003d7d0 	.word	0x2003d7d0
   d4af0:	000d4267 	.word	0x000d4267
   d4af4:	000d42a5 	.word	0x000d42a5
   d4af8:	2003d804 	.word	0x2003d804
   d4afc:	000d4111 	.word	0x000d4111
   d4b00:	2003d4cc 	.word	0x2003d4cc
   d4b04:	2003d7fc 	.word	0x2003d7fc

000d4b08 <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d4b08:	f001 bba4 	b.w	d6254 <HAL_Pin_Map>

000d4b0c <_GLOBAL__sub_I__ZN13TM1637DisplayC2Ehhj>:
   d4b0c:	f001 bba2 	b.w	d6254 <HAL_Pin_Map>

000d4b10 <__tcf_0>:
#include "application.h"
#include "PlotBotMesh.h"

#include "Devices.h"

PlotBotDevice devices[FLEET_SIZE];
   d4b10:	b538      	push	{r3, r4, r5, lr}
   d4b12:	4c0d      	ldr	r4, [pc, #52]	; (d4b48 <__tcf_0+0x38>)
   d4b14:	f5a4 65aa 	sub.w	r5, r4, #1360	; 0x550
   d4b18:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b1c:	f002 fb98 	bl	d7250 <_ZN6StringD1Ev>
   d4b20:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b24:	f002 fb94 	bl	d7250 <_ZN6StringD1Ev>
   d4b28:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4b2c:	f002 fb90 	bl	d7250 <_ZN6StringD1Ev>
   d4b30:	f104 0014 	add.w	r0, r4, #20
   d4b34:	f002 fb8c 	bl	d7250 <_ZN6StringD1Ev>
   d4b38:	1d20      	adds	r0, r4, #4
   d4b3a:	3c88      	subs	r4, #136	; 0x88
   d4b3c:	f002 fb88 	bl	d7250 <_ZN6StringD1Ev>
   d4b40:	42ac      	cmp	r4, r5
   d4b42:	d1e9      	bne.n	d4b18 <__tcf_0+0x8>
   d4b44:	bd38      	pop	{r3, r4, r5, pc}
   d4b46:	bf00      	nop
   d4b48:	2003dd28 	.word	0x2003dd28

000d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
   d4b4c:	b508      	push	{r3, lr}
      { return __x < __y; }
   d4b4e:	f002 fc39 	bl	d73c4 <_ZNK6StringltERKS_>
   d4b52:	3000      	adds	r0, #0
   d4b54:	bf18      	it	ne
   d4b56:	2001      	movne	r0, #1
   d4b58:	bd08      	pop	{r3, pc}
	...

000d4b5c <_ZN13PlotBotDeviceC1Ev>:
   d4b5c:	b538      	push	{r3, r4, r5, lr}
   d4b5e:	4d0e      	ldr	r5, [pc, #56]	; (d4b98 <_ZN13PlotBotDeviceC1Ev+0x3c>)
   d4b60:	4604      	mov	r4, r0
   d4b62:	4629      	mov	r1, r5
   d4b64:	3004      	adds	r0, #4
   d4b66:	f002 fbba 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b6a:	4629      	mov	r1, r5
   d4b6c:	f104 0014 	add.w	r0, r4, #20
   d4b70:	f002 fbb5 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b74:	4629      	mov	r1, r5
   d4b76:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4b7a:	f002 fbb0 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b7e:	4629      	mov	r1, r5
   d4b80:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b84:	f002 fbab 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b88:	4629      	mov	r1, r5
   d4b8a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b8e:	f002 fba6 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b92:	4620      	mov	r0, r4
   d4b94:	bd38      	pop	{r3, r4, r5, pc}
   d4b96:	bf00      	nop
   d4b98:	000ddb19 	.word	0x000ddb19

000d4b9c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:

#if __cplusplus >= 201103L
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b9e:	4605      	mov	r5, r0
   d4ba0:	4616      	mov	r6, r2
   d4ba2:	461c      	mov	r4, r3
   d4ba4:	1d07      	adds	r7, r0, #4
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d4ba6:	b941      	cbnz	r1, d4bba <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x1e>
   d4ba8:	42ba      	cmp	r2, r7
   d4baa:	d006      	beq.n	d4bba <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x1e>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
   d4bac:	f102 0110 	add.w	r1, r2, #16
   d4bb0:	f103 0010 	add.w	r0, r3, #16
   d4bb4:	f7ff ffca 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4bb8:	e000      	b.n	d4bbc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x20>
						      _S_key(__p)));
   d4bba:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d4bbc:	463b      	mov	r3, r7
   d4bbe:	4632      	mov	r2, r6
   d4bc0:	4621      	mov	r1, r4
   d4bc2:	f004 fbb6 	bl	d9332 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d4bc6:	696b      	ldr	r3, [r5, #20]
   d4bc8:	3301      	adds	r3, #1
   d4bca:	616b      	str	r3, [r5, #20]
      return iterator(__z);
    }
   d4bcc:	4620      	mov	r0, r4
   d4bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bd0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bd4:	688d      	ldr	r5, [r1, #8]
   d4bd6:	4604      	mov	r4, r0
   d4bd8:	460f      	mov	r7, r1
   d4bda:	4690      	mov	r8, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d4bdc:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d4bde:	2001      	movs	r0, #1
      while (__x != 0)
   d4be0:	b15d      	cbz	r5, d4bfa <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x2a>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   d4be2:	f105 0110 	add.w	r1, r5, #16
   d4be6:	4640      	mov	r0, r8
   d4be8:	f7ff ffb0 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d4bec:	b118      	cbz	r0, d4bf6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
   d4bee:	68ab      	ldr	r3, [r5, #8]
   d4bf0:	462e      	mov	r6, r5
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4bf2:	461d      	mov	r5, r3
   d4bf4:	e7f4      	b.n	d4be0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x10>
   d4bf6:	68eb      	ldr	r3, [r5, #12]
   d4bf8:	e7fa      	b.n	d4bf0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x20>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d4bfa:	b148      	cbz	r0, d4c10 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x40>
	{
	  if (__j == begin())
   d4bfc:	68fb      	ldr	r3, [r7, #12]
   d4bfe:	429e      	cmp	r6, r3
   d4c00:	d101      	bne.n	d4c06 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x36>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d4c02:	6025      	str	r5, [r4, #0]
   d4c04:	e00d      	b.n	d4c22 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x52>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d4c06:	4630      	mov	r0, r6
   d4c08:	f004 fb91 	bl	d932e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d4c0c:	4605      	mov	r5, r0
   d4c0e:	e000      	b.n	d4c12 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x42>
   d4c10:	4635      	mov	r5, r6
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d4c12:	4641      	mov	r1, r8
   d4c14:	f105 0010 	add.w	r0, r5, #16
   d4c18:	f7ff ff98 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4c1c:	b118      	cbz	r0, d4c26 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x56>
   d4c1e:	2300      	movs	r3, #0
   d4c20:	6023      	str	r3, [r4, #0]
   d4c22:	6066      	str	r6, [r4, #4]
   d4c24:	e001      	b.n	d4c2a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x5a>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d4c26:	6025      	str	r5, [r4, #0]
   d4c28:	6060      	str	r0, [r4, #4]
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c30 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c34:	461f      	mov	r7, r3
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d4c36:	1d0b      	adds	r3, r1, #4
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d4c38:	429a      	cmp	r2, r3
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	460e      	mov	r6, r1
   d4c3e:	4615      	mov	r5, r2
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d4c40:	d10d      	bne.n	d4c5e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
	{
	  if (size() > 0
   d4c42:	694b      	ldr	r3, [r1, #20]
   d4c44:	2b00      	cmp	r3, #0
   d4c46:	d04b      	beq.n	d4ce0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb0>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   d4c48:	6908      	ldr	r0, [r1, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d4c4a:	4639      	mov	r1, r7
   d4c4c:	3010      	adds	r0, #16
   d4c4e:	f7ff ff7d 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d4c52:	2800      	cmp	r0, #0
   d4c54:	d044      	beq.n	d4ce0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb0>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d4c56:	2300      	movs	r3, #0
   d4c58:	6023      	str	r3, [r4, #0]
   d4c5a:	6933      	ldr	r3, [r6, #16]
   d4c5c:	e03e      	b.n	d4cdc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
   d4c5e:	f102 0910 	add.w	r9, r2, #16
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d4c62:	4649      	mov	r1, r9
   d4c64:	4638      	mov	r0, r7
   d4c66:	f7ff ff71 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4c6a:	4680      	mov	r8, r0
   d4c6c:	b1a0      	cbz	r0, d4c98 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d4c6e:	68f3      	ldr	r3, [r6, #12]
   d4c70:	42ab      	cmp	r3, r5
   d4c72:	d101      	bne.n	d4c78 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x48>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d4c74:	6023      	str	r3, [r4, #0]
   d4c76:	e031      	b.n	d4cdc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d4c78:	4628      	mov	r0, r5
   d4c7a:	f004 fb58 	bl	d932e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d4c7e:	4639      	mov	r1, r7
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d4c80:	4680      	mov	r8, r0
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d4c82:	3010      	adds	r0, #16
   d4c84:	f7ff ff62 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4c88:	b350      	cbz	r0, d4ce0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb0>
	    {
	      if (_S_right(__before._M_node) == 0)
   d4c8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d4c8e:	b90b      	cbnz	r3, d4c94 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x64>
	: first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d4c90:	6023      	str	r3, [r4, #0]
   d4c92:	e01d      	b.n	d4cd0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xa0>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d4c94:	6025      	str	r5, [r4, #0]
   d4c96:	e017      	b.n	d4cc8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x98>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d4c98:	4639      	mov	r1, r7
   d4c9a:	4648      	mov	r0, r9
   d4c9c:	f7ff ff56 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4ca0:	b1c8      	cbz	r0, d4cd6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xa6>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d4ca2:	6933      	ldr	r3, [r6, #16]
   d4ca4:	42ab      	cmp	r3, r5
   d4ca6:	d102      	bne.n	d4cae <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x7e>
	: first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d4ca8:	f8c4 8000 	str.w	r8, [r4]
   d4cac:	e016      	b.n	d4cdc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d4cae:	4628      	mov	r0, r5
   d4cb0:	f004 fb2a 	bl	d9308 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
   d4cb4:	4680      	mov	r8, r0
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d4cb6:	f100 0110 	add.w	r1, r0, #16
   d4cba:	4638      	mov	r0, r7
   d4cbc:	f7ff ff46 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4cc0:	b170      	cbz	r0, d4ce0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb0>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d4cc2:	68eb      	ldr	r3, [r5, #12]
   d4cc4:	b913      	cbnz	r3, d4ccc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x9c>
   d4cc6:	6023      	str	r3, [r4, #0]
   d4cc8:	6065      	str	r5, [r4, #4]
   d4cca:	e00e      	b.n	d4cea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xba>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d4ccc:	f8c4 8000 	str.w	r8, [r4]
   d4cd0:	f8c4 8004 	str.w	r8, [r4, #4]
   d4cd4:	e009      	b.n	d4cea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xba>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d4cd6:	6025      	str	r5, [r4, #0]
   d4cd8:	6060      	str	r0, [r4, #4]
   d4cda:	e006      	b.n	d4cea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xba>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d4cdc:	6063      	str	r3, [r4, #4]
   d4cde:	e004      	b.n	d4cea <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xba>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d4ce0:	463a      	mov	r2, r7
   d4ce2:	4631      	mov	r1, r6
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	f7ff ff73 	bl	d4bd0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
	    return _M_get_insert_unique_pos(__k);
	}
      else
	// Equivalent keys.
	return _Res(__pos._M_node, 0);
    }
   d4cea:	4620      	mov	r0, r4
   d4cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4cf0 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
   d4cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d4cf4:	1d07      	adds	r7, r0, #4
   d4cf6:	6885      	ldr	r5, [r0, #8]
   d4cf8:	4606      	mov	r6, r0
   d4cfa:	4688      	mov	r8, r1
   d4cfc:	463c      	mov	r4, r7
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d4cfe:	b165      	cbz	r5, d4d1a <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d4d00:	4641      	mov	r1, r8
   d4d02:	f105 0010 	add.w	r0, r5, #16
   d4d06:	f7ff ff21 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4d0a:	b918      	cbnz	r0, d4d14 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x24>
   d4d0c:	68ab      	ldr	r3, [r5, #8]
   d4d0e:	462c      	mov	r4, r5
   d4d10:	461d      	mov	r5, r3
   d4d12:	e7f4      	b.n	d4cfe <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0xe>
   d4d14:	68eb      	ldr	r3, [r5, #12]
   d4d16:	4625      	mov	r5, r4
   d4d18:	e7f9      	b.n	d4d0e <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x1e>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d4d1a:	42a7      	cmp	r7, r4
   d4d1c:	d005      	beq.n	d4d2a <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x3a>
   d4d1e:	f104 0110 	add.w	r1, r4, #16
   d4d22:	4640      	mov	r0, r8
   d4d24:	f7ff ff12 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4d28:	b310      	cbz	r0, d4d70 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x80>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4d2a:	2024      	movs	r0, #36	; 0x24
   d4d2c:	f7ff f9b3 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4d30:	f110 0710 	adds.w	r7, r0, #16
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4d34:	4605      	mov	r5, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4d36:	d005      	beq.n	d4d44 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x54>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d4d38:	4641      	mov	r1, r8
   d4d3a:	4638      	mov	r0, r7
   d4d3c:	f002 faf1 	bl	d7322 <_ZN6StringC1ERKS_>
   d4d40:	2300      	movs	r3, #0
   d4d42:	622b      	str	r3, [r5, #32]
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
   d4d44:	4622      	mov	r2, r4
   d4d46:	463b      	mov	r3, r7
   d4d48:	4631      	mov	r1, r6
   d4d4a:	4668      	mov	r0, sp
   d4d4c:	f7ff ff70 	bl	d4c30 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
   d4d50:	9a01      	ldr	r2, [sp, #4]
   d4d52:	9c00      	ldr	r4, [sp, #0]

	    if (__res.second)
   d4d54:	b132      	cbz	r2, d4d64 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x74>
	      return _M_insert_node(__res.first, __res.second, __z);
   d4d56:	4621      	mov	r1, r4
   d4d58:	462b      	mov	r3, r5
   d4d5a:	4630      	mov	r0, r6
   d4d5c:	f7ff ff1e 	bl	d4b9c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
   d4d60:	4604      	mov	r4, r0
   d4d62:	e005      	b.n	d4d70 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x80>
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<class _T1, class _T2>
    struct pair
   d4d64:	4638      	mov	r0, r7
   d4d66:	f002 fa73 	bl	d7250 <_ZN6StringD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4d6a:	4628      	mov	r0, r5
   d4d6c:	f7ff f997 	bl	d409e <_ZdlPv>
					    std::tuple<const key_type&>(__k),
					    std::tuple<>());
#else
          __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
   d4d70:	f104 0020 	add.w	r0, r4, #32
      }
   d4d74:	b002      	add	sp, #8
   d4d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d7a:	0000      	movs	r0, r0
   d4d7c:	0000      	movs	r0, r0
	...

000d4d80 <_Z17InitializeDevicesv>:

void InitializeDevices()
{
   d4d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        PlotBotDevice* _device = new PlotBotDevice();
   d4d84:	2088      	movs	r0, #136	; 0x88
#include "Devices.h"

PlotBotDevice devices[FLEET_SIZE];

void InitializeDevices()
{
   d4d86:	b086      	sub	sp, #24
        PlotBotDevice* _device = new PlotBotDevice();
   d4d88:	f7ff f985 	bl	d4096 <_Znwj>
   d4d8c:	4604      	mov	r4, r0
   d4d8e:	b130      	cbz	r0, d4d9e <_Z17InitializeDevicesv+0x1e>
   d4d90:	2288      	movs	r2, #136	; 0x88
   d4d92:	2100      	movs	r1, #0
   d4d94:	f005 fad0 	bl	da338 <memset>
   d4d98:	4620      	mov	r0, r4
   d4d9a:	f7ff fedf 	bl	d4b5c <_ZN13PlotBotDeviceC1Ev>
        _device->NodeType                   = PLATFORM_ARGON;
   d4d9e:	46a2      	mov	sl, r4
   d4da0:	230c      	movs	r3, #12
   d4da2:	f84a 3b04 	str.w	r3, [sl], #4
        _device->DeviceId                   = "e00fce68930b9e15c7b8139f";
   d4da6:	4984      	ldr	r1, [pc, #528]	; (d4fb8 <_Z17InitializeDevicesv+0x238>)
   d4da8:	4650      	mov	r0, sl
   d4daa:	f002 fac5 	bl	d7338 <_ZN6StringaSEPKc>
        _device->DeviceName                 = "Rain-Argon";
   d4dae:	4983      	ldr	r1, [pc, #524]	; (d4fbc <_Z17InitializeDevicesv+0x23c>)
   d4db0:	f104 0014 	add.w	r0, r4, #20
   d4db4:	f002 fac0 	bl	d7338 <_ZN6StringaSEPKc>
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
   d4db8:	f20f 19ec 	addw	r9, pc, #492	; 0x1ec
   d4dbc:	e9d9 8900 	ldrd	r8, r9, [r9]
{
        PlotBotDevice* _device = new PlotBotDevice();
        _device->NodeType                   = PLATFORM_ARGON;
        _device->DeviceId                   = "e00fce68930b9e15c7b8139f";
        _device->DeviceName                 = "Rain-Argon";
        _device->ZipCode                    = 98272;
   d4dc0:	4b7f      	ldr	r3, [pc, #508]	; (d4fc0 <_Z17InitializeDevicesv+0x240>)
   d4dc2:	6263      	str	r3, [r4, #36]	; 0x24
        _device->Latitude                   = 47.8562834;
        _device->Longitude                  = -121.966498;
   d4dc4:	a77a      	add	r7, pc, #488	; (adr r7, d4fb0 <_Z17InitializeDevicesv+0x230>)
   d4dc6:	e9d7 6700 	ldrd	r6, r7, [r7]
        _device->Elevation                  = 69;
   d4dca:	2345      	movs	r3, #69	; 0x45
   d4dcc:	63a3      	str	r3, [r4, #56]	; 0x38

        _device->ReportToThingSpeak         = 0;
   d4dce:	2500      	movs	r5, #0
        _device->ThingSpeakChannelNumber    = 453149;
   d4dd0:	4b7c      	ldr	r3, [pc, #496]	; (d4fc4 <_Z17InitializeDevicesv+0x244>)
   d4dd2:	6423      	str	r3, [r4, #64]	; 0x40
        PlotBotDevice* _device = new PlotBotDevice();
        _device->NodeType                   = PLATFORM_ARGON;
        _device->DeviceId                   = "e00fce68930b9e15c7b8139f";
        _device->DeviceName                 = "Rain-Argon";
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
   d4dd4:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
        _device->Longitude                  = -121.966498;
   d4dd8:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
        _device->Elevation                  = 69;

        _device->ReportToThingSpeak         = 0;
   d4ddc:	63e5      	str	r5, [r4, #60]	; 0x3c
        _device->ThingSpeakChannelNumber    = 453149;
        _device->ThingSpeakWriteApiKey      = "AFVCJ483S6L1SVM4";
   d4dde:	497a      	ldr	r1, [pc, #488]	; (d4fc8 <_Z17InitializeDevicesv+0x248>)
   d4de0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4de4:	f002 faa8 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToWunderground       = 0;
   d4de8:	6565      	str	r5, [r4, #84]	; 0x54
        _device->WundergroundPwsId          = "KWAMONRO71";
   d4dea:	4978      	ldr	r1, [pc, #480]	; (d4fcc <_Z17InitializeDevicesv+0x24c>)
   d4dec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4df0:	f002 faa2 	bl	d7338 <_ZN6StringaSEPKc>
        _device->WundergroundPwsPassword    = "k3mjjpq6";
   d4df4:	4976      	ldr	r1, [pc, #472]	; (d4fd0 <_Z17InitializeDevicesv+0x250>)
   d4df6:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4dfa:	f002 fa9d 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToCloud              = 1;
   d4dfe:	2301      	movs	r3, #1
   d4e00:	67a3      	str	r3, [r4, #120]	; 0x78

        _device->SleepInterval              = 0;

        _device->Button                     = BUTTON_A;
   d4e02:	2304      	movs	r3, #4
   d4e04:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        _device->WundergroundPwsId          = "KWAMONRO71";
        _device->WundergroundPwsPassword    = "k3mjjpq6";

        _device->ReportToCloud              = 1;

        _device->SleepInterval              = 0;
   d4e08:	67e5      	str	r5, [r4, #124]	; 0x7c

        _device->Button                     = BUTTON_A;
        fleet[_device->DeviceId]            = _device;
   d4e0a:	4651      	mov	r1, sl
   d4e0c:	4871      	ldr	r0, [pc, #452]	; (d4fd4 <_Z17InitializeDevicesv+0x254>)
   d4e0e:	f7ff ff6f 	bl	d4cf0 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
   d4e12:	6004      	str	r4, [r0, #0]

        _device = new PlotBotDevice();
   d4e14:	2088      	movs	r0, #136	; 0x88
   d4e16:	f7ff f93e 	bl	d4096 <_Znwj>
   d4e1a:	4604      	mov	r4, r0
   d4e1c:	b130      	cbz	r0, d4e2c <_Z17InitializeDevicesv+0xac>
   d4e1e:	2288      	movs	r2, #136	; 0x88
   d4e20:	4629      	mov	r1, r5
   d4e22:	f005 fa89 	bl	da338 <memset>
   d4e26:	4620      	mov	r0, r4
   d4e28:	f7ff fe98 	bl	d4b5c <_ZN13PlotBotDeviceC1Ev>
        _device->NodeType                   = PLATFORM_XENON;
   d4e2c:	46a2      	mov	sl, r4
   d4e2e:	230e      	movs	r3, #14
   d4e30:	f84a 3b04 	str.w	r3, [sl], #4
        _device->DeviceId                   = "e00fce68c8e53c3766e107c9";
   d4e34:	4968      	ldr	r1, [pc, #416]	; (d4fd8 <_Z17InitializeDevicesv+0x258>)
   d4e36:	4650      	mov	r0, sl
   d4e38:	f002 fa7e 	bl	d7338 <_ZN6StringaSEPKc>
        _device->DeviceName                 = "Rain-Xenon-1";
   d4e3c:	4967      	ldr	r1, [pc, #412]	; (d4fdc <_Z17InitializeDevicesv+0x25c>)
   d4e3e:	f104 0014 	add.w	r0, r4, #20
   d4e42:	f002 fa79 	bl	d7338 <_ZN6StringaSEPKc>
        _device->ZipCode                    = 98272;
   d4e46:	4b5e      	ldr	r3, [pc, #376]	; (d4fc0 <_Z17InitializeDevicesv+0x240>)
   d4e48:	6263      	str	r3, [r4, #36]	; 0x24
        _device->Latitude                   = 47.8562834;
        _device->Longitude                  = -121.966498;
        _device->Elevation                  = 69;
   d4e4a:	2345      	movs	r3, #69	; 0x45
   d4e4c:	63a3      	str	r3, [r4, #56]	; 0x38

        _device->ReportToThingSpeak         = 0;
   d4e4e:	2500      	movs	r5, #0
        _device->ThingSpeakChannelNumber    = 524783;
   d4e50:	4b63      	ldr	r3, [pc, #396]	; (d4fe0 <_Z17InitializeDevicesv+0x260>)
   d4e52:	6423      	str	r3, [r4, #64]	; 0x40
        _device = new PlotBotDevice();
        _device->NodeType                   = PLATFORM_XENON;
        _device->DeviceId                   = "e00fce68c8e53c3766e107c9";
        _device->DeviceName                 = "Rain-Xenon-1";
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
   d4e54:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
        _device->Longitude                  = -121.966498;
   d4e58:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
        _device->Elevation                  = 69;

        _device->ReportToThingSpeak         = 0;
   d4e5c:	63e5      	str	r5, [r4, #60]	; 0x3c
        _device->ThingSpeakChannelNumber    = 524783;
        _device->ThingSpeakWriteApiKey      = "0IBB8Y0SGUYV6AET";
   d4e5e:	4961      	ldr	r1, [pc, #388]	; (d4fe4 <_Z17InitializeDevicesv+0x264>)
   d4e60:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4e64:	f002 fa68 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToWunderground       = 0;
   d4e68:	6565      	str	r5, [r4, #84]	; 0x54
        _device->WundergroundPwsId          = "KWAMONRO84";
   d4e6a:	495f      	ldr	r1, [pc, #380]	; (d4fe8 <_Z17InitializeDevicesv+0x268>)
   d4e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4e70:	f002 fa62 	bl	d7338 <_ZN6StringaSEPKc>
        _device->WundergroundPwsPassword    = "rzftmbdm";
   d4e74:	495d      	ldr	r1, [pc, #372]	; (d4fec <_Z17InitializeDevicesv+0x26c>)
   d4e76:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4e7a:	f002 fa5d 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToCloud              = 1;
   d4e7e:	2301      	movs	r3, #1
   d4e80:	67a3      	str	r3, [r4, #120]	; 0x78

        _device->SleepInterval              = 0;
        
        _device->Button                     = BUTTON_B;
   d4e82:	2303      	movs	r3, #3
   d4e84:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        _device->WundergroundPwsId          = "KWAMONRO84";
        _device->WundergroundPwsPassword    = "rzftmbdm";

        _device->ReportToCloud              = 1;

        _device->SleepInterval              = 0;
   d4e88:	67e5      	str	r5, [r4, #124]	; 0x7c
        
        _device->Button                     = BUTTON_B;
        fleet[_device->DeviceId]            = _device;
   d4e8a:	4651      	mov	r1, sl
   d4e8c:	4851      	ldr	r0, [pc, #324]	; (d4fd4 <_Z17InitializeDevicesv+0x254>)
   d4e8e:	f7ff ff2f 	bl	d4cf0 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
   d4e92:	6004      	str	r4, [r0, #0]
    
        _device = new PlotBotDevice();
   d4e94:	2088      	movs	r0, #136	; 0x88
   d4e96:	f7ff f8fe 	bl	d4096 <_Znwj>
   d4e9a:	4604      	mov	r4, r0
   d4e9c:	b130      	cbz	r0, d4eac <_Z17InitializeDevicesv+0x12c>
   d4e9e:	2288      	movs	r2, #136	; 0x88
   d4ea0:	4629      	mov	r1, r5
   d4ea2:	f005 fa49 	bl	da338 <memset>
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	f7ff fe58 	bl	d4b5c <_ZN13PlotBotDeviceC1Ev>
        _device->NodeType                    = PLATFORM_XENON;
   d4eac:	46a2      	mov	sl, r4
   d4eae:	230e      	movs	r3, #14
   d4eb0:	f84a 3b04 	str.w	r3, [sl], #4
        _device->DeviceId                   = "e00fce683c178a3e19c2a424";
   d4eb4:	494e      	ldr	r1, [pc, #312]	; (d4ff0 <_Z17InitializeDevicesv+0x270>)
   d4eb6:	4650      	mov	r0, sl
   d4eb8:	f002 fa3e 	bl	d7338 <_ZN6StringaSEPKc>
        _device->DeviceName                 = "Rain-Xenon-2";
   d4ebc:	494d      	ldr	r1, [pc, #308]	; (d4ff4 <_Z17InitializeDevicesv+0x274>)
   d4ebe:	f104 0014 	add.w	r0, r4, #20
   d4ec2:	f002 fa39 	bl	d7338 <_ZN6StringaSEPKc>
        _device->ZipCode                    = 98272;
   d4ec6:	4b3e      	ldr	r3, [pc, #248]	; (d4fc0 <_Z17InitializeDevicesv+0x240>)
   d4ec8:	6263      	str	r3, [r4, #36]	; 0x24
        _device->Latitude                   = 47.8562834;
        _device->Longitude                  = -121.966498;
        _device->Elevation                  = 69;
   d4eca:	2345      	movs	r3, #69	; 0x45

        _device->ReportToThingSpeak         = 0;
   d4ecc:	2500      	movs	r5, #0
        _device->DeviceId                   = "e00fce683c178a3e19c2a424";
        _device->DeviceName                 = "Rain-Xenon-2";
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
        _device->Longitude                  = -121.966498;
        _device->Elevation                  = 69;
   d4ece:	63a3      	str	r3, [r4, #56]	; 0x38

        _device->ReportToThingSpeak         = 0;
        _device->ThingSpeakChannelNumber    = 524784;
   d4ed0:	4b49      	ldr	r3, [pc, #292]	; (d4ff8 <_Z17InitializeDevicesv+0x278>)
   d4ed2:	6423      	str	r3, [r4, #64]	; 0x40
        _device->NodeType                    = PLATFORM_XENON;
        _device->DeviceId                   = "e00fce683c178a3e19c2a424";
        _device->DeviceName                 = "Rain-Xenon-2";
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
        _device->Longitude                  = -121.966498;
   d4ed4:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
        _device->Elevation                  = 69;

        _device->ReportToThingSpeak         = 0;
   d4ed8:	63e5      	str	r5, [r4, #60]	; 0x3c
        _device = new PlotBotDevice();
        _device->NodeType                    = PLATFORM_XENON;
        _device->DeviceId                   = "e00fce683c178a3e19c2a424";
        _device->DeviceName                 = "Rain-Xenon-2";
        _device->ZipCode                    = 98272;
        _device->Latitude                   = 47.8562834;
   d4eda:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
        _device->Longitude                  = -121.966498;
        _device->Elevation                  = 69;

        _device->ReportToThingSpeak         = 0;
        _device->ThingSpeakChannelNumber    = 524784;
        _device->ThingSpeakWriteApiKey      = "K3BZQFY4H8WIG5OS";
   d4ede:	4947      	ldr	r1, [pc, #284]	; (d4ffc <_Z17InitializeDevicesv+0x27c>)
   d4ee0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d4ee4:	f002 fa28 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToWunderground       = 0;
   d4ee8:	6565      	str	r5, [r4, #84]	; 0x54
        _device->WundergroundPwsId          = "";
   d4eea:	4945      	ldr	r1, [pc, #276]	; (d5000 <_Z17InitializeDevicesv+0x280>)
   d4eec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4ef0:	f002 fa22 	bl	d7338 <_ZN6StringaSEPKc>
        _device->WundergroundPwsPassword    = "";
   d4ef4:	4942      	ldr	r1, [pc, #264]	; (d5000 <_Z17InitializeDevicesv+0x280>)
   d4ef6:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4efa:	f002 fa1d 	bl	d7338 <_ZN6StringaSEPKc>

        _device->ReportToCloud              = 1;

        _device->SleepInterval              = 0;
   d4efe:	67e5      	str	r5, [r4, #124]	; 0x7c

        _device->ReportToWunderground       = 0;
        _device->WundergroundPwsId          = "";
        _device->WundergroundPwsPassword    = "";

        _device->ReportToCloud              = 1;
   d4f00:	2301      	movs	r3, #1

        _device->SleepInterval              = 0;
        
        _device->Button                     = BUTTON_C;
        fleet[_device->DeviceId]            = _device;
   d4f02:	4d34      	ldr	r5, [pc, #208]	; (d4fd4 <_Z17InitializeDevicesv+0x254>)

        _device->ReportToWunderground       = 0;
        _device->WundergroundPwsId          = "";
        _device->WundergroundPwsPassword    = "";

        _device->ReportToCloud              = 1;
   d4f04:	67a3      	str	r3, [r4, #120]	; 0x78

        _device->SleepInterval              = 0;
        
        _device->Button                     = BUTTON_C;
   d4f06:	2302      	movs	r3, #2
   d4f08:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        fleet[_device->DeviceId]            = _device;
   d4f0c:	4651      	mov	r1, sl
   d4f0e:	4628      	mov	r0, r5
   d4f10:	f7ff feee 	bl	d4cf0 <_ZNSt3mapI6StringP13PlotBotDeviceSt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
   d4f14:	6004      	str	r4, [r0, #0]
   d4f16:	a802      	add	r0, sp, #8
   d4f18:	1d2c      	adds	r4, r5, #4
   d4f1a:	f001 fcc9 	bl	d68b0 <spark_deviceID>
   d4f1e:	68ae      	ldr	r6, [r5, #8]
   d4f20:	4625      	mov	r5, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d4f22:	b166      	cbz	r6, d4f3e <_Z17InitializeDevicesv+0x1be>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d4f24:	a902      	add	r1, sp, #8
   d4f26:	f106 0010 	add.w	r0, r6, #16
   d4f2a:	f7ff fe0f 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4f2e:	b918      	cbnz	r0, d4f38 <_Z17InitializeDevicesv+0x1b8>
   d4f30:	68b3      	ldr	r3, [r6, #8]
   d4f32:	4634      	mov	r4, r6
   d4f34:	461e      	mov	r6, r3
   d4f36:	e7f4      	b.n	d4f22 <_Z17InitializeDevicesv+0x1a2>
   d4f38:	68f3      	ldr	r3, [r6, #12]
   d4f3a:	4626      	mov	r6, r4
   d4f3c:	e7f9      	b.n	d4f32 <_Z17InitializeDevicesv+0x1b2>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d4f3e:	42ac      	cmp	r4, r5
   d4f40:	d005      	beq.n	d4f4e <_Z17InitializeDevicesv+0x1ce>
   d4f42:	f104 0110 	add.w	r1, r4, #16
   d4f46:	a802      	add	r0, sp, #8
   d4f48:	f7ff fe00 	bl	d4b4c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.1>
   d4f4c:	b1d8      	cbz	r0, d4f86 <_Z17InitializeDevicesv+0x206>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4f4e:	2024      	movs	r0, #36	; 0x24
   d4f50:	f7ff f8a1 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4f54:	f110 0610 	adds.w	r6, r0, #16
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4f58:	4605      	mov	r5, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4f5a:	d005      	beq.n	d4f68 <_Z17InitializeDevicesv+0x1e8>
   d4f5c:	a902      	add	r1, sp, #8
   d4f5e:	4630      	mov	r0, r6
   d4f60:	f002 f966 	bl	d7230 <_ZN6StringC1EOS_>
   d4f64:	2300      	movs	r3, #0
   d4f66:	622b      	str	r3, [r5, #32]
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
   d4f68:	4622      	mov	r2, r4
   d4f6a:	4633      	mov	r3, r6
   d4f6c:	4919      	ldr	r1, [pc, #100]	; (d4fd4 <_Z17InitializeDevicesv+0x254>)
   d4f6e:	4668      	mov	r0, sp
   d4f70:	f7ff fe5e 	bl	d4c30 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
   d4f74:	9a01      	ldr	r2, [sp, #4]
   d4f76:	9c00      	ldr	r4, [sp, #0]

	    if (__res.second)
   d4f78:	b172      	cbz	r2, d4f98 <_Z17InitializeDevicesv+0x218>
	      return _M_insert_node(__res.first, __res.second, __z);
   d4f7a:	4621      	mov	r1, r4
   d4f7c:	462b      	mov	r3, r5
   d4f7e:	4815      	ldr	r0, [pc, #84]	; (d4fd4 <_Z17InitializeDevicesv+0x254>)
   d4f80:	f7ff fe0c 	bl	d4b9c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P13PlotBotDeviceESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
   d4f84:	4604      	mov	r4, r0

        device = fleet[System.deviceID()];
   d4f86:	4b1f      	ldr	r3, [pc, #124]	; (d5004 <_Z17InitializeDevicesv+0x284>)
   d4f88:	6a22      	ldr	r2, [r4, #32]
   d4f8a:	601a      	str	r2, [r3, #0]
   d4f8c:	a802      	add	r0, sp, #8
   d4f8e:	f002 f95f 	bl	d7250 <_ZN6StringD1Ev>
}
   d4f92:	b006      	add	sp, #24
   d4f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f98:	4630      	mov	r0, r6
   d4f9a:	f002 f959 	bl	d7250 <_ZN6StringD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4f9e:	4628      	mov	r0, r5
   d4fa0:	f7ff f87d 	bl	d409e <_ZdlPv>
   d4fa4:	e7ef      	b.n	d4f86 <_Z17InitializeDevicesv+0x206>
   d4fa6:	bf00      	nop
   d4fa8:	b1c78dc9 	.word	0xb1c78dc9
   d4fac:	4047ed9a 	.word	0x4047ed9a
   d4fb0:	1a6d6990 	.word	0x1a6d6990
   d4fb4:	c05e7ddb 	.word	0xc05e7ddb
   d4fb8:	000dd421 	.word	0x000dd421
   d4fbc:	000dd43a 	.word	0x000dd43a
   d4fc0:	00017fe0 	.word	0x00017fe0
   d4fc4:	0006ea1d 	.word	0x0006ea1d
   d4fc8:	000dd445 	.word	0x000dd445
   d4fcc:	000dd456 	.word	0x000dd456
   d4fd0:	000dd461 	.word	0x000dd461
   d4fd4:	2003d828 	.word	0x2003d828
   d4fd8:	000dd46a 	.word	0x000dd46a
   d4fdc:	000dd483 	.word	0x000dd483
   d4fe0:	000801ef 	.word	0x000801ef
   d4fe4:	000dd490 	.word	0x000dd490
   d4fe8:	000dd4a1 	.word	0x000dd4a1
   d4fec:	000dd4ac 	.word	0x000dd4ac
   d4ff0:	000dd4b5 	.word	0x000dd4b5
   d4ff4:	000dd4ce 	.word	0x000dd4ce
   d4ff8:	000801f0 	.word	0x000801f0
   d4ffc:	000dd4db 	.word	0x000dd4db
   d5000:	000ddb19 	.word	0x000ddb19
   d5004:	2003d7ec 	.word	0x2003d7ec

000d5008 <_GLOBAL__sub_I_devices>:
   d5008:	b538      	push	{r3, r4, r5, lr}
   d500a:	f001 f923 	bl	d6254 <HAL_Pin_Map>
#include "application.h"
#include "PlotBotMesh.h"

#include "Devices.h"

PlotBotDevice devices[FLEET_SIZE];
   d500e:	4d08      	ldr	r5, [pc, #32]	; (d5030 <_GLOBAL__sub_I_devices+0x28>)
   d5010:	2400      	movs	r4, #0
   d5012:	1928      	adds	r0, r5, r4
   d5014:	3488      	adds	r4, #136	; 0x88
   d5016:	f7ff fda1 	bl	d4b5c <_ZN13PlotBotDeviceC1Ev>
   d501a:	f5b4 6faa 	cmp.w	r4, #1360	; 0x550
   d501e:	d1f8      	bne.n	d5012 <_GLOBAL__sub_I_devices+0xa>
   d5020:	4a04      	ldr	r2, [pc, #16]	; (d5034 <_GLOBAL__sub_I_devices+0x2c>)
   d5022:	4905      	ldr	r1, [pc, #20]	; (d5038 <_GLOBAL__sub_I_devices+0x30>)
   d5024:	2000      	movs	r0, #0
        
        _device->Button                     = BUTTON_C;
        fleet[_device->DeviceId]            = _device;

        device = fleet[System.deviceID()];
}
   d5026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#include "application.h"
#include "PlotBotMesh.h"

#include "Devices.h"

PlotBotDevice devices[FLEET_SIZE];
   d502a:	f004 b90b 	b.w	d9244 <__aeabi_atexit>
   d502e:	bf00      	nop
   d5030:	2003d860 	.word	0x2003d860
   d5034:	2003d7d0 	.word	0x2003d7d0
   d5038:	000d4b11 	.word	0x000d4b11

000d503c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.4>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
   d503c:	b508      	push	{r3, lr}
      { return __x < __y; }
   d503e:	f002 f9c1 	bl	d73c4 <_ZNK6StringltERKS_>
   d5042:	3000      	adds	r0, #0
   d5044:	bf18      	it	ne
   d5046:	2001      	movne	r0, #1
   d5048:	bd08      	pop	{r3, pc}
	...

000d504c <_Z15sendInfoToCloudv>:
#include <stdio.h>

#include <ArduinoJson.h>

void sendInfoToCloud()
{
   d504c:	b510      	push	{r4, lr}
   d504e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
	Serial.println("\n*** Payload:");
   d5052:	f002 ffff 	bl	d8054 <_Z16_fetch_usbserialv>
   d5056:	4927      	ldr	r1, [pc, #156]	; (d50f4 <_Z15sendInfoToCloudv+0xa8>)
   d5058:	f002 f9f2 	bl	d7440 <_ZN5Print7printlnEPKc>
   d505c:	4b26      	ldr	r3, [pc, #152]	; (d50f8 <_Z15sendInfoToCloudv+0xac>)
   d505e:	681b      	ldr	r3, [r3, #0]
   d5060:	695c      	ldr	r4, [r3, #20]

	char payload[512];
	sprintf(payload,  "{\"nm\":\"%s\",\"dt\":%ld,", device->DeviceName.c_str(), Time.now());
   d5062:	f002 fbc4 	bl	d77ee <_ZN9TimeClass3nowEv>
   d5066:	4622      	mov	r2, r4
   d5068:	4603      	mov	r3, r0
   d506a:	4924      	ldr	r1, [pc, #144]	; (d50fc <_Z15sendInfoToCloudv+0xb0>)
   d506c:	a804      	add	r0, sp, #16
   d506e:	f001 fc5f 	bl	d6930 <sprintf>

	#if PLATFORM_ID == PLATFORM_ARGON
		sprintf(payload, "%s\"v\":%.2f}", payload, battvolt);
   d5072:	4b23      	ldr	r3, [pc, #140]	; (d5100 <_Z15sendInfoToCloudv+0xb4>)
   d5074:	6818      	ldr	r0, [r3, #0]
   d5076:	f004 fc6f 	bl	d9958 <__aeabi_f2d>
   d507a:	aa04      	add	r2, sp, #16
   d507c:	e9cd 0100 	strd	r0, r1, [sp]
   d5080:	4920      	ldr	r1, [pc, #128]	; (d5104 <_Z15sendInfoToCloudv+0xb8>)
   d5082:	4610      	mov	r0, r2
   d5084:	f001 fc54 	bl	d6930 <sprintf>
   d5088:	f001 fc0a 	bl	d68a0 <spark_cloud_flag_connected>
		if (Particle.connected())
   d508c:	b1d8      	cbz	r0, d50c6 <_Z15sendInfoToCloudv+0x7a>
   d508e:	4b1e      	ldr	r3, [pc, #120]	; (d5108 <_Z15sendInfoToCloudv+0xbc>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5090:	491e      	ldr	r1, [pc, #120]	; (d510c <_Z15sendInfoToCloudv+0xc0>)
   d5092:	781b      	ldrb	r3, [r3, #0]
   d5094:	f88d 3000 	strb.w	r3, [sp]
   d5098:	aa04      	add	r2, sp, #16
   d509a:	233c      	movs	r3, #60	; 0x3c
   d509c:	a802      	add	r0, sp, #8
   d509e:	f002 fd89 	bl	d7bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d50a2:	9c03      	ldr	r4, [sp, #12]
   d50a4:	b17c      	cbz	r4, d50c6 <_Z15sendInfoToCloudv+0x7a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d50a6:	6863      	ldr	r3, [r4, #4]
   d50a8:	3b01      	subs	r3, #1
   d50aa:	6063      	str	r3, [r4, #4]
   d50ac:	b95b      	cbnz	r3, d50c6 <_Z15sendInfoToCloudv+0x7a>
        {
          _M_dispose();
   d50ae:	6823      	ldr	r3, [r4, #0]
   d50b0:	4620      	mov	r0, r4
   d50b2:	689b      	ldr	r3, [r3, #8]
   d50b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50b6:	68a3      	ldr	r3, [r4, #8]
   d50b8:	3b01      	subs	r3, #1
   d50ba:	60a3      	str	r3, [r4, #8]
   d50bc:	b91b      	cbnz	r3, d50c6 <_Z15sendInfoToCloudv+0x7a>
            _M_destroy();
   d50be:	6823      	ldr	r3, [r4, #0]
   d50c0:	4620      	mov	r0, r4
   d50c2:	68db      	ldr	r3, [r3, #12]
   d50c4:	4798      	blx	r3
   d50c6:	4c12      	ldr	r4, [pc, #72]	; (d5110 <_Z15sendInfoToCloudv+0xc4>)
   d50c8:	2200      	movs	r2, #0
   d50ca:	4611      	mov	r1, r2
   d50cc:	6860      	ldr	r0, [r4, #4]
   d50ce:	f001 fba7 	bl	d6820 <network_ready>
			Particle.publish("ArgonData", payload);
		if (Mesh.ready())
   d50d2:	b128      	cbz	r0, d50e0 <_Z15sendInfoToCloudv+0x94>
			Mesh.publish("ArgonData", payload);
   d50d4:	aa04      	add	r2, sp, #16
   d50d6:	490d      	ldr	r1, [pc, #52]	; (d510c <_Z15sendInfoToCloudv+0xc0>)
   d50d8:	f104 0008 	add.w	r0, r4, #8
   d50dc:	f003 fa98 	bl	d8610 <_ZN5spark11MeshPublish7publishEPKcS2_>
		Serial.printlnf("\tArgonData: %s", payload);
   d50e0:	f002 ffb8 	bl	d8054 <_Z16_fetch_usbserialv>
   d50e4:	ab04      	add	r3, sp, #16
   d50e6:	4a0b      	ldr	r2, [pc, #44]	; (d5114 <_Z15sendInfoToCloudv+0xc8>)
   d50e8:	2101      	movs	r1, #1
   d50ea:	f002 f9e2 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
			sprintf(eventName, "XenonData-%s", device->DeviceId.c_str());
			Mesh.publish(eventName, payload);
		}
		Serial.printlnf("\t%s: %s", eventName, payload);
	#endif
}
   d50ee:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   d50f2:	bd10      	pop	{r4, pc}
   d50f4:	000dd4ed 	.word	0x000dd4ed
   d50f8:	2003d7ec 	.word	0x2003d7ec
   d50fc:	000dd4fb 	.word	0x000dd4fb
   d5100:	2003d7f8 	.word	0x2003d7f8
   d5104:	000dd510 	.word	0x000dd510
   d5108:	2003ddb0 	.word	0x2003ddb0
   d510c:	000dd51c 	.word	0x000dd51c
   d5110:	2003e408 	.word	0x2003e408
   d5114:	000dd526 	.word	0x000dd526

000d5118 <_Z16XenonDataHandlerPKcS0_>:
 	// Big, old placeholder
}

#if PLATFORM_ID == PLATFORM_ARGON
void XenonDataHandler(const char *event, const char *dataIn)
	{
   d5118:	b5f0      	push	{r4, r5, r6, r7, lr}
   d511a:	b08d      	sub	sp, #52	; 0x34
   d511c:	4605      	mov	r5, r0
   d511e:	460c      	mov	r4, r1
	 	Serial.printlnf("\n*** %s, %s", event, dataIn ? dataIn : "NULL");
   d5120:	f002 ff98 	bl	d8054 <_Z16_fetch_usbserialv>
   d5124:	4b26      	ldr	r3, [pc, #152]	; (d51c0 <_Z16XenonDataHandlerPKcS0_+0xa8>)
   d5126:	4a27      	ldr	r2, [pc, #156]	; (d51c4 <_Z16XenonDataHandlerPKcS0_+0xac>)
   d5128:	2c00      	cmp	r4, #0
   d512a:	bf18      	it	ne
   d512c:	4623      	movne	r3, r4
   d512e:	9300      	str	r3, [sp, #0]
   d5130:	2101      	movs	r1, #1
   d5132:	462b      	mov	r3, r5
   d5134:	f002 f9bd 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>

		char *pos = std::strstr(event, "-");
   d5138:	212d      	movs	r1, #45	; 0x2d
   d513a:	4628      	mov	r0, r5
   d513c:	f005 f93a 	bl	da3b4 <strchr>
		if (pos)
   d5140:	2800      	cmp	r0, #0
   d5142:	d03a      	beq.n	d51ba <_Z16XenonDataHandlerPKcS0_+0xa2>
		{
			String _deviceId(++pos);
   d5144:	ae04      	add	r6, sp, #16
   d5146:	1c41      	adds	r1, r0, #1
   d5148:	4630      	mov	r0, r6
   d514a:	f002 f8c8 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
			String _data(dataIn);
   d514e:	4621      	mov	r1, r4
   d5150:	4c1d      	ldr	r4, [pc, #116]	; (d51c8 <_Z16XenonDataHandlerPKcS0_+0xb0>)
   d5152:	a808      	add	r0, sp, #32
   d5154:	f002 f8c3 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d5158:	3404      	adds	r4, #4
   d515a:	6865      	ldr	r5, [r4, #4]
   d515c:	4627      	mov	r7, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d515e:	b165      	cbz	r5, d517a <_Z16XenonDataHandlerPKcS0_+0x62>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5160:	4631      	mov	r1, r6
   d5162:	f105 0010 	add.w	r0, r5, #16
   d5166:	f7ff ff69 	bl	d503c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.4>
   d516a:	b918      	cbnz	r0, d5174 <_Z16XenonDataHandlerPKcS0_+0x5c>
   d516c:	68ab      	ldr	r3, [r5, #8]
   d516e:	462c      	mov	r4, r5
   d5170:	461d      	mov	r5, r3
   d5172:	e7f4      	b.n	d515e <_Z16XenonDataHandlerPKcS0_+0x46>
   d5174:	68eb      	ldr	r3, [r5, #12]
   d5176:	4625      	mov	r5, r4
   d5178:	e7f9      	b.n	d516e <_Z16XenonDataHandlerPKcS0_+0x56>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d517a:	42bc      	cmp	r4, r7
   d517c:	d011      	beq.n	d51a2 <_Z16XenonDataHandlerPKcS0_+0x8a>
   d517e:	f104 0110 	add.w	r1, r4, #16
   d5182:	4630      	mov	r0, r6
   d5184:	f7ff ff5a 	bl	d503c <_ZNKSt4lessI6StringEclERKS0_S3_.isra.4>
   d5188:	b958      	cbnz	r0, d51a2 <_Z16XenonDataHandlerPKcS0_+0x8a>
			events[_deviceId] = _data;
   d518a:	a908      	add	r1, sp, #32
   d518c:	f104 0020 	add.w	r0, r4, #32
   d5190:	f002 f8b8 	bl	d7304 <_ZN6StringaSERKS_>

		char *pos = std::strstr(event, "-");
		if (pos)
		{
			String _deviceId(++pos);
			String _data(dataIn);
   d5194:	a808      	add	r0, sp, #32
   d5196:	f002 f85b 	bl	d7250 <_ZN6StringD1Ev>
	 	Serial.printlnf("\n*** %s, %s", event, dataIn ? dataIn : "NULL");

		char *pos = std::strstr(event, "-");
		if (pos)
		{
			String _deviceId(++pos);
   d519a:	4630      	mov	r0, r6
   d519c:	f002 f858 	bl	d7250 <_ZN6StringD1Ev>
			String _data(dataIn);
			events[_deviceId] = _data;
		}
	}
   d51a0:	e00b      	b.n	d51ba <_Z16XenonDataHandlerPKcS0_+0xa2>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   d51a2:	ab0c      	add	r3, sp, #48	; 0x30
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d51a4:	aa02      	add	r2, sp, #8
   d51a6:	f843 6d24 	str.w	r6, [r3, #-36]!
   d51aa:	4621      	mov	r1, r4
   d51ac:	9200      	str	r2, [sp, #0]
   d51ae:	4806      	ldr	r0, [pc, #24]	; (d51c8 <_Z16XenonDataHandlerPKcS0_+0xb0>)
   d51b0:	4a06      	ldr	r2, [pc, #24]	; (d51cc <_Z16XenonDataHandlerPKcS0_+0xb4>)
   d51b2:	f7ff f8af 	bl	d4314 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS2_EESE_IIEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
   d51b6:	4604      	mov	r4, r0
   d51b8:	e7e7      	b.n	d518a <_Z16XenonDataHandlerPKcS0_+0x72>
   d51ba:	b00d      	add	sp, #52	; 0x34
   d51bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51be:	bf00      	nop
   d51c0:	000dd535 	.word	0x000dd535
   d51c4:	000dd53a 	.word	0x000dd53a
   d51c8:	2003d7d4 	.word	0x2003d7d4
   d51cc:	000dd4ec 	.word	0x000dd4ec

000d51d0 <_GLOBAL__sub_I__Z15sendInfoToCloudv>:
   d51d0:	4b02      	ldr	r3, [pc, #8]	; (d51dc <_GLOBAL__sub_I__Z15sendInfoToCloudv+0xc>)
   d51d2:	2200      	movs	r2, #0
   d51d4:	701a      	strb	r2, [r3, #0]
   d51d6:	f001 b83d 	b.w	d6254 <HAL_Pin_Map>
   d51da:	bf00      	nop
   d51dc:	2003ddb0 	.word	0x2003ddb0

000d51e0 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d51e0:	b510      	push	{r4, lr}
   d51e2:	4604      	mov	r4, r0
   d51e4:	3004      	adds	r0, #4
   d51e6:	f002 f833 	bl	d7250 <_ZN6StringD1Ev>
   d51ea:	4620      	mov	r0, r4
   d51ec:	bd10      	pop	{r4, pc}

000d51ee <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   d51ee:	b510      	push	{r4, lr}
   d51f0:	4604      	mov	r4, r0
   d51f2:	303c      	adds	r0, #60	; 0x3c
   d51f4:	f002 f82c 	bl	d7250 <_ZN6StringD1Ev>
   d51f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d51fc:	f002 f828 	bl	d7250 <_ZN6StringD1Ev>
   d5200:	4620      	mov	r0, r4
   d5202:	f002 f825 	bl	d7250 <_ZN6StringD1Ev>
   d5206:	4620      	mov	r0, r4
   d5208:	bd10      	pop	{r4, pc}
	...

000d520c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d520c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d520e:	6984      	ldr	r4, [r0, #24]
   d5210:	4b0a      	ldr	r3, [pc, #40]	; (d523c <_ZN9TCPClientD1Ev+0x30>)
   d5212:	6003      	str	r3, [r0, #0]
   d5214:	4605      	mov	r5, r0
   d5216:	b17c      	cbz	r4, d5238 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5218:	6863      	ldr	r3, [r4, #4]
   d521a:	3b01      	subs	r3, #1
   d521c:	6063      	str	r3, [r4, #4]
   d521e:	b95b      	cbnz	r3, d5238 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5220:	6823      	ldr	r3, [r4, #0]
   d5222:	4620      	mov	r0, r4
   d5224:	689b      	ldr	r3, [r3, #8]
   d5226:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5228:	68a3      	ldr	r3, [r4, #8]
   d522a:	3b01      	subs	r3, #1
   d522c:	60a3      	str	r3, [r4, #8]
   d522e:	b91b      	cbnz	r3, d5238 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5230:	6823      	ldr	r3, [r4, #0]
   d5232:	4620      	mov	r0, r4
   d5234:	68db      	ldr	r3, [r3, #12]
   d5236:	4798      	blx	r3
   d5238:	4628      	mov	r0, r5
   d523a:	bd38      	pop	{r3, r4, r5, pc}
   d523c:	000dde18 	.word	0x000dde18

000d5240 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d5240:	b510      	push	{r4, lr}
   d5242:	4604      	mov	r4, r0
   d5244:	f7ff ffe2 	bl	d520c <_ZN9TCPClientD1Ev>
   d5248:	4620      	mov	r0, r4
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN9TCPClientD0Ev>:
   d524c:	b510      	push	{r4, lr}
   d524e:	4604      	mov	r4, r0
   d5250:	f7ff ffdc 	bl	d520c <_ZN9TCPClientD1Ev>
   d5254:	4620      	mov	r0, r4
   d5256:	211c      	movs	r1, #28
   d5258:	f004 f802 	bl	d9260 <_ZdlPvj>
   d525c:	4620      	mov	r0, r4
   d525e:	bd10      	pop	{r4, pc}

000d5260 <_Z16printBatteryInfov>:
            Serial.printlnf("\tTemp/Hum Read Failure");
    #endif
}

void printBatteryInfo()
{
   d5260:	b513      	push	{r0, r1, r4, lr}
    Serial.println("\n*** Battery Data:");
   d5262:	f002 fef7 	bl	d8054 <_Z16_fetch_usbserialv>
   d5266:	4909      	ldr	r1, [pc, #36]	; (d528c <_Z16printBatteryInfov+0x2c>)
   d5268:	f002 f8ea 	bl	d7440 <_ZN5Print7printlnEPKc>
    Serial.printlnf("\tbattvolt: %.2fV", battvolt);
   d526c:	f002 fef2 	bl	d8054 <_Z16_fetch_usbserialv>
   d5270:	4b07      	ldr	r3, [pc, #28]	; (d5290 <_Z16printBatteryInfov+0x30>)
   d5272:	4604      	mov	r4, r0
   d5274:	6818      	ldr	r0, [r3, #0]
   d5276:	f004 fb6f 	bl	d9958 <__aeabi_f2d>
   d527a:	4a06      	ldr	r2, [pc, #24]	; (d5294 <_Z16printBatteryInfov+0x34>)
   d527c:	e9cd 0100 	strd	r0, r1, [sp]
   d5280:	2101      	movs	r1, #1
   d5282:	4620      	mov	r0, r4
   d5284:	f002 f915 	bl	d74b2 <_ZN5Print11printf_implEbPKcz>
}
   d5288:	b002      	add	sp, #8
   d528a:	bd10      	pop	{r4, pc}
   d528c:	000dd546 	.word	0x000dd546
   d5290:	2003d7f8 	.word	0x2003d7f8
   d5294:	000dd559 	.word	0x000dd559

000d5298 <_GLOBAL__sub_I_http>:
   d5298:	b570      	push	{r4, r5, r6, lr}
#include "Devices.h"
#include "Instruments.h"
#include "Serial.h"
#include <HttpClient.h>

HttpClient http;
   d529a:	4c1d      	ldr	r4, [pc, #116]	; (d5310 <_GLOBAL__sub_I_http+0x78>)
   d529c:	4d1d      	ldr	r5, [pc, #116]	; (d5314 <_GLOBAL__sub_I_http+0x7c>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d529e:	4e1e      	ldr	r6, [pc, #120]	; (d5318 <_GLOBAL__sub_I_http+0x80>)
   d52a0:	f000 ffd8 	bl	d6254 <HAL_Pin_Map>
   d52a4:	4620      	mov	r0, r4
   d52a6:	f000 f847 	bl	d5338 <_ZN10HttpClientC1Ev>
   d52aa:	4620      	mov	r0, r4
   d52ac:	4c1b      	ldr	r4, [pc, #108]	; (d531c <_GLOBAL__sub_I_http+0x84>)
   d52ae:	491c      	ldr	r1, [pc, #112]	; (d5320 <_GLOBAL__sub_I_http+0x88>)
   d52b0:	462a      	mov	r2, r5
   d52b2:	f003 ffc7 	bl	d9244 <__aeabi_atexit>
   d52b6:	4631      	mov	r1, r6
   d52b8:	4620      	mov	r0, r4
   d52ba:	f002 f810 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d52be:	f104 0010 	add.w	r0, r4, #16
   d52c2:	f002 fe17 	bl	d7ef4 <_ZN9IPAddressC1Ev>
   d52c6:	4631      	mov	r1, r6
   d52c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d52cc:	f002 f807 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d52d0:	4631      	mov	r1, r6
   d52d2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d52d6:	f002 f802 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
    { "User-agent", "Particle HttpClient"},
    //  { "Accept" , "application/json" },
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
   d52da:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d52dc:	4c11      	ldr	r4, [pc, #68]	; (d5324 <_GLOBAL__sub_I_http+0x8c>)
   d52de:	4912      	ldr	r1, [pc, #72]	; (d5328 <_GLOBAL__sub_I_http+0x90>)
   d52e0:	462a      	mov	r2, r5
   d52e2:	f003 ffaf 	bl	d9244 <__aeabi_atexit>
   d52e6:	4631      	mov	r1, r6
   d52e8:	1d20      	adds	r0, r4, #4
   d52ea:	f001 fff8 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d52ee:	4620      	mov	r0, r4

//Wunderground Vars
TCPClient client;
   d52f0:	4c0e      	ldr	r4, [pc, #56]	; (d532c <_GLOBAL__sub_I_http+0x94>)
    //  { "Accept" , "application/json" },
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
http_response_t response;
   d52f2:	490f      	ldr	r1, [pc, #60]	; (d5330 <_GLOBAL__sub_I_http+0x98>)
   d52f4:	462a      	mov	r2, r5
   d52f6:	f003 ffa5 	bl	d9244 <__aeabi_atexit>

//Wunderground Vars
TCPClient client;
   d52fa:	4620      	mov	r0, r4
   d52fc:	f003 fdc4 	bl	d8e88 <_ZN9TCPClientC1Ev>
   d5300:	462a      	mov	r2, r5
   d5302:	4620      	mov	r0, r4
   d5304:	490b      	ldr	r1, [pc, #44]	; (d5334 <_GLOBAL__sub_I_http+0x9c>)

void printBatteryInfo()
{
    Serial.println("\n*** Battery Data:");
    Serial.printlnf("\tbattvolt: %.2fV", battvolt);
}
   d5306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
};
http_request_t request;
http_response_t response;

//Wunderground Vars
TCPClient client;
   d530a:	f003 bf9b 	b.w	d9244 <__aeabi_atexit>
   d530e:	bf00      	nop
   d5310:	2003ddd0 	.word	0x2003ddd0
   d5314:	2003d7d0 	.word	0x2003d7d0
   d5318:	000ddb19 	.word	0x000ddb19
   d531c:	2003e200 	.word	0x2003e200
   d5320:	000d5241 	.word	0x000d5241
   d5324:	2003e1ec 	.word	0x2003e1ec
   d5328:	000d51ef 	.word	0x000d51ef
   d532c:	2003ddb4 	.word	0x2003ddb4
   d5330:	000d51e1 	.word	0x000d51e1
   d5334:	000d520d 	.word	0x000d520d

000d5338 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d5338:	b510      	push	{r4, lr}
   d533a:	4604      	mov	r4, r0
   d533c:	f003 fda4 	bl	d8e88 <_ZN9TCPClientC1Ev>
{

}
   d5340:	4620      	mov	r0, r4
   d5342:	bd10      	pop	{r4, pc}

000d5344 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d5344:	f000 bf86 	b.w	d6254 <HAL_Pin_Map>

000d5348 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d5348:	b508      	push	{r3, lr}
   d534a:	f000 ff83 	bl	d6254 <HAL_Pin_Map>
   d534e:	4b01      	ldr	r3, [pc, #4]	; (d5354 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d5350:	6018      	str	r0, [r3, #0]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	2003e24c 	.word	0x2003e24c

000d5358 <_ZN14SSD1306_128x3213drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void SSD1306_128x32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5358:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d535a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void SSD1306_128x32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d535c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d5360:	2c02      	cmp	r4, #2
   d5362:	d008      	beq.n	d5376 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x1e>
   d5364:	2c03      	cmp	r4, #3
   d5366:	d00f      	beq.n	d5388 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x30>
   d5368:	2c01      	cmp	r4, #1
   d536a:	d170      	bne.n	d544e <_ZN14SSD1306_128x3213drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d536c:	8904      	ldrh	r4, [r0, #8]
   d536e:	3c01      	subs	r4, #1
   d5370:	1aa2      	subs	r2, r4, r2
   d5372:	b212      	sxth	r2, r2
      break;
   d5374:	e00c      	b.n	d5390 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5376:	8944      	ldrh	r4, [r0, #10]
   d5378:	3c01      	subs	r4, #1
   d537a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d537c:	8904      	ldrh	r4, [r0, #8]
   d537e:	1ae4      	subs	r4, r4, r3
   d5380:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5382:	b212      	sxth	r2, r2
      x -= (w-1);
   d5384:	b209      	sxth	r1, r1
      break;
   d5386:	e062      	b.n	d544e <_ZN14SSD1306_128x3213drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d5388:	8944      	ldrh	r4, [r0, #10]
   d538a:	1ae4      	subs	r4, r4, r3
   d538c:	1a61      	subs	r1, r4, r1
   d538e:	b209      	sxth	r1, r1


void SSD1306_128x32::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5390:	2a00      	cmp	r2, #0
   d5392:	db5b      	blt.n	d544c <_ZN14SSD1306_128x3213drawFastHLineEssst+0xf4>
   d5394:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5398:	4294      	cmp	r4, r2
   d539a:	f340 8090 	ble.w	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d539e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d53a0:	bfbe      	ittt	lt
   d53a2:	185b      	addlt	r3, r3, r1
   d53a4:	b21b      	sxthlt	r3, r3
    __y = 0;
   d53a6:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d53a8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d53ac:	18cc      	adds	r4, r1, r3
   d53ae:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d53b0:	bfc4      	itt	gt
   d53b2:	1a43      	subgt	r3, r0, r1
   d53b4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d53b6:	2b00      	cmp	r3, #0
   d53b8:	f340 8081 	ble.w	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d53bc:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d53be:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d53c0:	4f3f      	ldr	r7, [pc, #252]	; (d54c0 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x168>)
   d53c2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d53c6:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d53ca:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d53cc:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d53d0:	d017      	beq.n	d5402 <_ZN14SSD1306_128x3213drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d53d2:	f1c1 0108 	rsb	r1, r1, #8
   d53d6:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d53d8:	493a      	ldr	r1, [pc, #232]	; (d54c4 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d53da:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d53dc:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d53de:	bf3f      	itttt	cc
   d53e0:	ebc3 0e00 	rsbcc	lr, r3, r0
   d53e4:	21ff      	movcc	r1, #255	; 0xff
   d53e6:	fa41 f10e 	asrcc.w	r1, r1, lr
   d53ea:	400e      	andcc	r6, r1
   d53ec:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d53ee:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d53f0:	bf0c      	ite	eq
   d53f2:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d53f4:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d53f6:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d53f8:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d53fa:	d360      	bcc.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>

    h -= mod;
   d53fc:	1a18      	subs	r0, r3, r0
   d53fe:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d5400:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5402:	2b07      	cmp	r3, #7
   d5404:	d917      	bls.n	d5436 <_ZN14SSD1306_128x3213drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5406:	2d01      	cmp	r5, #1
   d5408:	bf0c      	ite	eq
   d540a:	20ff      	moveq	r0, #255	; 0xff
   d540c:	2000      	movne	r0, #0
   d540e:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5412:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5414:	3a08      	subs	r2, #8
   d5416:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5418:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d541a:	f801 0c80 	strb.w	r0, [r1, #-128]
   d541e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5422:	d8f7      	bhi.n	d5414 <_ZN14SSD1306_128x3213drawFastHLineEssst+0xbc>
   d5424:	f1a3 0208 	sub.w	r2, r3, #8
   d5428:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d542c:	3201      	adds	r2, #1
   d542e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5432:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5436:	2b00      	cmp	r3, #0
   d5438:	d041      	beq.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d543a:	4a23      	ldr	r2, [pc, #140]	; (d54c8 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x170>)
   d543c:	5cd2      	ldrb	r2, [r2, r3]
   d543e:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5440:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5442:	bf0c      	ite	eq
   d5444:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5446:	4393      	bicne	r3, r2
   d5448:	7023      	strb	r3, [r4, #0]
   d544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d544c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void SSD1306_128x32::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d544e:	2a00      	cmp	r2, #0
   d5450:	db35      	blt.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>
   d5452:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5456:	4294      	cmp	r4, r2
   d5458:	dd31      	ble.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d545a:	2900      	cmp	r1, #0
    w += x;
   d545c:	bfbc      	itt	lt
   d545e:	18c9      	addlt	r1, r1, r3
   d5460:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5462:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5466:	bfb8      	it	lt
   d5468:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d546a:	18ce      	adds	r6, r1, r3
   d546c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d546e:	bfc4      	itt	gt
   d5470:	1a63      	subgt	r3, r4, r1
   d5472:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5474:	2b00      	cmp	r3, #0
   d5476:	dd22      	ble.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5478:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d547a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d547e:	4810      	ldr	r0, [pc, #64]	; (d54c0 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5480:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5484:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d5486:	2001      	movs	r0, #1
   d5488:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d548c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d548e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d5490:	d109      	bne.n	d54a6 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x14e>
   d5492:	3b01      	subs	r3, #1
   d5494:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d5496:	1c5c      	adds	r4, r3, #1
   d5498:	d011      	beq.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>
   d549a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d549e:	4310      	orrs	r0, r2
   d54a0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d54a4:	e7f5      	b.n	d5492 <_ZN14SSD1306_128x3213drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d54a6:	43d2      	mvns	r2, r2
   d54a8:	b2d2      	uxtb	r2, r2
   d54aa:	3b01      	subs	r3, #1
   d54ac:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d54ae:	1c58      	adds	r0, r3, #1
   d54b0:	d005      	beq.n	d54be <_ZN14SSD1306_128x3213drawFastHLineEssst+0x166>
   d54b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d54b6:	4010      	ands	r0, r2
   d54b8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d54bc:	e7f5      	b.n	d54aa <_ZN14SSD1306_128x3213drawFastHLineEssst+0x152>
   d54be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54c0:	2003d4e0 	.word	0x2003d4e0
   d54c4:	2003d4d8 	.word	0x2003d4d8
   d54c8:	2003d4d0 	.word	0x2003d4d0

000d54cc <_ZN14SSD1306_128x3213drawFastVLineEssst>:
  }
}

void SSD1306_128x32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d54cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d54ce:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void SSD1306_128x32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d54d0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d54d4:	2c02      	cmp	r4, #2
   d54d6:	d008      	beq.n	d54ea <_ZN14SSD1306_128x3213drawFastVLineEssst+0x1e>
   d54d8:	2c03      	cmp	r4, #3
   d54da:	d00f      	beq.n	d54fc <_ZN14SSD1306_128x3213drawFastVLineEssst+0x30>
   d54dc:	2c01      	cmp	r4, #1
   d54de:	d112      	bne.n	d5506 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d54e0:	8904      	ldrh	r4, [r0, #8]
   d54e2:	1ae4      	subs	r4, r4, r3
   d54e4:	1aa2      	subs	r2, r4, r2
   d54e6:	b212      	sxth	r2, r2
      break;
   d54e8:	e06d      	b.n	d55c6 <_ZN14SSD1306_128x3213drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d54ea:	8904      	ldrh	r4, [r0, #8]
   d54ec:	3c01      	subs	r4, #1
   d54ee:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d54f0:	8944      	ldrh	r4, [r0, #10]
   d54f2:	1ae4      	subs	r4, r4, r3
   d54f4:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d54f6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d54f8:	b212      	sxth	r2, r2
      break;
   d54fa:	e004      	b.n	d5506 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d54fc:	8944      	ldrh	r4, [r0, #10]
   d54fe:	3c01      	subs	r4, #1
   d5500:	1a61      	subs	r1, r4, r1
   d5502:	b209      	sxth	r1, r1
      break;
   d5504:	e05f      	b.n	d55c6 <_ZN14SSD1306_128x3213drawFastVLineEssst+0xfa>


void SSD1306_128x32::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5506:	2900      	cmp	r1, #0
   d5508:	db5c      	blt.n	d55c4 <_ZN14SSD1306_128x3213drawFastVLineEssst+0xf8>
   d550a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d550e:	428c      	cmp	r4, r1
   d5510:	f340 8091 	ble.w	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5514:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5516:	bfbc      	itt	lt
   d5518:	18d2      	addlt	r2, r2, r3
   d551a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d551c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d5520:	bfb8      	it	lt
   d5522:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5524:	18d4      	adds	r4, r2, r3
   d5526:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5528:	bfc4      	itt	gt
   d552a:	1a83      	subgt	r3, r0, r2
   d552c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d552e:	2b00      	cmp	r3, #0
   d5530:	f340 8081 	ble.w	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5534:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5536:	4e40      	ldr	r6, [pc, #256]	; (d5638 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5538:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d553a:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d553c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5540:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5544:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5548:	d017      	beq.n	d557a <_ZN14SSD1306_128x3213drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d554a:	f1c4 0408 	rsb	r4, r4, #8
   d554e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5550:	4c3a      	ldr	r4, [pc, #232]	; (d563c <_ZN14SSD1306_128x3213drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5552:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5554:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5556:	bf3f      	itttt	cc
   d5558:	ebc2 0e00 	rsbcc	lr, r2, r0
   d555c:	24ff      	movcc	r4, #255	; 0xff
   d555e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d5562:	4027      	andcc	r7, r4
   d5564:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d5566:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5568:	bf0c      	ite	eq
   d556a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d556c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d556e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5570:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5572:	d360      	bcc.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>

    h -= mod;
   d5574:	1a10      	subs	r0, r2, r0
   d5576:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5578:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d557a:	2a07      	cmp	r2, #7
   d557c:	d917      	bls.n	d55ae <_ZN14SSD1306_128x3213drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d557e:	2d01      	cmp	r5, #1
   d5580:	bf0c      	ite	eq
   d5582:	24ff      	moveq	r4, #255	; 0xff
   d5584:	2400      	movne	r4, #0
   d5586:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d558a:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d558c:	3908      	subs	r1, #8
   d558e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5590:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5592:	f800 4c80 	strb.w	r4, [r0, #-128]
   d5596:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d559a:	d8f7      	bhi.n	d558c <_ZN14SSD1306_128x3213drawFastVLineEssst+0xc0>
   d559c:	f1a2 0108 	sub.w	r1, r2, #8
   d55a0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d55a4:	3101      	adds	r1, #1
   d55a6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d55aa:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d55ae:	2a00      	cmp	r2, #0
   d55b0:	d041      	beq.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d55b2:	4923      	ldr	r1, [pc, #140]	; (d5640 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x174>)
   d55b4:	5c89      	ldrb	r1, [r1, r2]
   d55b6:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d55b8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d55ba:	bf0c      	ite	eq
   d55bc:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d55be:	438a      	bicne	r2, r1
   d55c0:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d55c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void SSD1306_128x32::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d55c6:	2900      	cmp	r1, #0
   d55c8:	db35      	blt.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>
   d55ca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d55ce:	428c      	cmp	r4, r1
   d55d0:	dd31      	ble.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d55d2:	2a00      	cmp	r2, #0
    w += x;
   d55d4:	bfbc      	itt	lt
   d55d6:	18d2      	addlt	r2, r2, r3
   d55d8:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d55da:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d55de:	bfb8      	it	lt
   d55e0:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d55e2:	18d6      	adds	r6, r2, r3
   d55e4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d55e6:	bfc4      	itt	gt
   d55e8:	1aa3      	subgt	r3, r4, r2
   d55ea:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d55ec:	2b00      	cmp	r3, #0
   d55ee:	dd22      	ble.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d55f0:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d55f2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d55f6:	4810      	ldr	r0, [pc, #64]	; (d5638 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d55f8:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d55fc:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d55fe:	2201      	movs	r2, #1
   d5600:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d5604:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5606:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d5608:	d109      	bne.n	d561e <_ZN14SSD1306_128x3213drawFastVLineEssst+0x152>
   d560a:	1e5a      	subs	r2, r3, #1
   d560c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d560e:	1c5c      	adds	r4, r3, #1
   d5610:	d011      	beq.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>
   d5612:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5616:	430a      	orrs	r2, r1
   d5618:	f800 2c01 	strb.w	r2, [r0, #-1]
   d561c:	e7f5      	b.n	d560a <_ZN14SSD1306_128x3213drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d561e:	43c9      	mvns	r1, r1
   d5620:	b2c9      	uxtb	r1, r1
   d5622:	1e5a      	subs	r2, r3, #1
   d5624:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d5626:	1c5a      	adds	r2, r3, #1
   d5628:	d005      	beq.n	d5636 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x16a>
   d562a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d562e:	400a      	ands	r2, r1
   d5630:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5634:	e7f5      	b.n	d5622 <_ZN14SSD1306_128x3213drawFastVLineEssst+0x156>
   d5636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5638:	2003d4e0 	.word	0x2003d4e0
   d563c:	2003d4d8 	.word	0x2003d4d8
   d5640:	2003d4d0 	.word	0x2003d4d0

000d5644 <_ZN14SSD1306_128x3212fastSPIwriteEh.isra.1>:
void SSD1306_128x32::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void SSD1306_128x32::fastSPIwrite(uint8_t d) {
   d5644:	b410      	push	{r4}
  
  if(hwSPI) {
   d5646:	b12a      	cbz	r2, d5654 <_ZN14SSD1306_128x3212fastSPIwriteEh.isra.1+0x10>
    (void)SPI.transfer(d);
   d5648:	4619      	mov	r1, r3
   d564a:	4806      	ldr	r0, [pc, #24]	; (d5664 <_ZN14SSD1306_128x3212fastSPIwriteEh.isra.1+0x20>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
   d564c:	f85d 4b04 	ldr.w	r4, [sp], #4


inline void SSD1306_128x32::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
   d5650:	f001 ba76 	b.w	d6b40 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5654:	2201      	movs	r2, #1
   d5656:	b2c9      	uxtb	r1, r1
   d5658:	b2c0      	uxtb	r0, r0
  }
}
   d565a:	f85d 4b04 	ldr.w	r4, [sp], #4
inline void SSD1306_128x32::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d565e:	f003 bd8b 	b.w	d9178 <shiftOut>
   d5662:	bf00      	nop
   d5664:	2003e5e8 	.word	0x2003e5e8

000d5668 <_ZN14SSD1306_128x329drawPixelEsst>:
};



// the most basic function, set a single pixel
void SSD1306_128x32::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d566a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void SSD1306_128x32::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d566c:	4606      	mov	r6, r0
   d566e:	4614      	mov	r4, r2
   d5670:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5672:	db3f      	blt.n	d56f4 <_ZN14SSD1306_128x329drawPixelEsst+0x8c>
   d5674:	f000 fbaa 	bl	d5dcc <_ZN12Adafruit_GFX5widthEv>
   d5678:	4285      	cmp	r5, r0
   d567a:	da3b      	bge.n	d56f4 <_ZN14SSD1306_128x329drawPixelEsst+0x8c>
   d567c:	2c00      	cmp	r4, #0
   d567e:	db39      	blt.n	d56f4 <_ZN14SSD1306_128x329drawPixelEsst+0x8c>
   d5680:	4630      	mov	r0, r6
   d5682:	f000 fba6 	bl	d5dd2 <_ZN12Adafruit_GFX6heightEv>
   d5686:	4284      	cmp	r4, r0
   d5688:	da34      	bge.n	d56f4 <_ZN14SSD1306_128x329drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d568a:	4630      	mov	r0, r6
   d568c:	f000 fb9c 	bl	d5dc8 <_ZN12Adafruit_GFX11getRotationEv>
   d5690:	2802      	cmp	r0, #2
   d5692:	d127      	bne.n	d56e4 <_ZN14SSD1306_128x329drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5694:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5696:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5698:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d569a:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d569c:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d569e:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d56a0:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d56a2:	b204      	sxth	r4, r0
   d56a4:	e006      	b.n	d56b4 <_ZN14SSD1306_128x329drawPixelEsst+0x4c>
void SSD1306_128x32::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d56a6:	2801      	cmp	r0, #1
   d56a8:	d104      	bne.n	d56b4 <_ZN14SSD1306_128x329drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d56aa:	8933      	ldrh	r3, [r6, #8]
   d56ac:	3b01      	subs	r3, #1
   d56ae:	1b1b      	subs	r3, r3, r4
   d56b0:	462c      	mov	r4, r5
   d56b2:	b21d      	sxth	r5, r3
   d56b4:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d56b6:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d56b8:	fb94 f0f0 	sdiv	r0, r4, r0
   d56bc:	b200      	sxth	r0, r0
   d56be:	4b0e      	ldr	r3, [pc, #56]	; (d56f8 <_ZN14SSD1306_128x329drawPixelEsst+0x90>)
   d56c0:	f004 0207 	and.w	r2, r4, #7
   d56c4:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d56c8:	d104      	bne.n	d56d4 <_ZN14SSD1306_128x329drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d56ca:	4097      	lsls	r7, r2
   d56cc:	5c5a      	ldrb	r2, [r3, r1]
   d56ce:	4317      	orrs	r7, r2
   d56d0:	545f      	strb	r7, [r3, r1]
   d56d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d56d4:	5c58      	ldrb	r0, [r3, r1]
   d56d6:	2701      	movs	r7, #1
   d56d8:	fa07 f202 	lsl.w	r2, r7, r2
   d56dc:	ea20 0202 	bic.w	r2, r0, r2
   d56e0:	545a      	strb	r2, [r3, r1]
   d56e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void SSD1306_128x32::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d56e4:	2803      	cmp	r0, #3
   d56e6:	d1de      	bne.n	d56a6 <_ZN14SSD1306_128x329drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d56e8:	8973      	ldrh	r3, [r6, #10]
   d56ea:	3b01      	subs	r3, #1
   d56ec:	1b5b      	subs	r3, r3, r5
   d56ee:	4625      	mov	r5, r4
   d56f0:	b21c      	sxth	r4, r3
   d56f2:	e7df      	b.n	d56b4 <_ZN14SSD1306_128x329drawPixelEsst+0x4c>
   d56f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56f6:	bf00      	nop
   d56f8:	2003d4e0 	.word	0x2003d4e0

000d56fc <_ZN14SSD1306_128x32C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
SSD1306_128x32::SSD1306_128x32(int8_t reset) :
   d56fc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d56fe:	2220      	movs	r2, #32
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
SSD1306_128x32::SSD1306_128x32(int8_t reset) :
   d5700:	4604      	mov	r4, r0
   d5702:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5704:	2180      	movs	r1, #128	; 0x80
   d5706:	f000 fa75 	bl	d5bf4 <_ZN12Adafruit_GFXC1Ess>
   d570a:	4b06      	ldr	r3, [pc, #24]	; (d5724 <_ZN14SSD1306_128x32C1Ea+0x28>)
   d570c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d570e:	23ff      	movs	r3, #255	; 0xff
   d5710:	7763      	strb	r3, [r4, #29]
   d5712:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d5716:	77e3      	strb	r3, [r4, #31]
   d5718:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d571a:	f884 5020 	strb.w	r5, [r4, #32]
}
   d571e:	4620      	mov	r0, r4
   d5720:	bd38      	pop	{r3, r4, r5, pc}
   d5722:	bf00      	nop
   d5724:	000dd59c 	.word	0x000dd59c

000d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void SSD1306_128x32::ssd1306_command(uint8_t c) { 
   d5728:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d572a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d572e:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void SSD1306_128x32::ssd1306_command(uint8_t c) { 
   d5730:	4604      	mov	r4, r0
   d5732:	460d      	mov	r5, r1
  if (sid != -1)
   d5734:	d022      	beq.n	d577c <_ZN14SSD1306_128x3215ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5736:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d573a:	2101      	movs	r1, #1
   d573c:	b280      	uxth	r0, r0
   d573e:	f003 fcd8 	bl	d90f2 <digitalWrite>
    digitalWrite(dc, LOW);
   d5742:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5746:	2100      	movs	r1, #0
   d5748:	b280      	uxth	r0, r0
   d574a:	f003 fcd2 	bl	d90f2 <digitalWrite>
    digitalWrite(cs, LOW);
   d574e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5752:	2100      	movs	r1, #0
   d5754:	b280      	uxth	r0, r0
   d5756:	f003 fccc 	bl	d90f2 <digitalWrite>
    fastSPIwrite(c);
   d575a:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d575e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5762:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d5766:	462b      	mov	r3, r5
   d5768:	f7ff ff6c 	bl	d5644 <_ZN14SSD1306_128x3212fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
   d576c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5770:	2101      	movs	r1, #1
   d5772:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5778:	f003 bcbb 	b.w	d90f2 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d577c:	f003 fd42 	bl	d9204 <_Z19__fetch_global_Wirev>
   d5780:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5784:	f002 fd6a 	bl	d825c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5788:	f003 fd3c 	bl	d9204 <_Z19__fetch_global_Wirev>
   d578c:	6803      	ldr	r3, [r0, #0]
   d578e:	2100      	movs	r1, #0
   d5790:	689b      	ldr	r3, [r3, #8]
   d5792:	4798      	blx	r3
    Wire.write(c);
   d5794:	f003 fd36 	bl	d9204 <_Z19__fetch_global_Wirev>
   d5798:	6803      	ldr	r3, [r0, #0]
   d579a:	4629      	mov	r1, r5
   d579c:	689b      	ldr	r3, [r3, #8]
   d579e:	4798      	blx	r3
    Wire.endTransmission();
   d57a0:	f003 fd30 	bl	d9204 <_Z19__fetch_global_Wirev>
  }
}
   d57a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d57a8:	f002 bd5f 	b.w	d826a <_ZN7TwoWire15endTransmissionEv>

000d57ac <_ZN14SSD1306_128x325beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void SSD1306_128x32::begin(uint8_t vccstate, uint8_t i2caddr) {
   d57ac:	b538      	push	{r3, r4, r5, lr}
   d57ae:	4604      	mov	r4, r0
   d57b0:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d57b2:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d57b4:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void SSD1306_128x32::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d57b8:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d57ba:	3301      	adds	r3, #1
   d57bc:	d033      	beq.n	d5826 <_ZN14SSD1306_128x325beginEhh+0x7a>
    pinMode(dc, OUTPUT);
   d57be:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d57c2:	2101      	movs	r1, #1
   d57c4:	b280      	uxth	r0, r0
   d57c6:	f003 fc83 	bl	d90d0 <pinMode>
    pinMode(cs, OUTPUT);
   d57ca:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d57ce:	2101      	movs	r1, #1
   d57d0:	b280      	uxth	r0, r0
   d57d2:	f003 fc7d 	bl	d90d0 <pinMode>
    if (!hwSPI){
   d57d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d57da:	b95b      	cbnz	r3, d57f4 <_ZN14SSD1306_128x325beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d57dc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d57e0:	2101      	movs	r1, #1
   d57e2:	b280      	uxth	r0, r0
   d57e4:	f003 fc74 	bl	d90d0 <pinMode>
    	pinMode(sclk, OUTPUT);
   d57e8:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d57ec:	2101      	movs	r1, #1
   d57ee:	b280      	uxth	r0, r0
   d57f0:	f003 fc6e 	bl	d90d0 <pinMode>
    	}
    if (hwSPI){
   d57f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d57f8:	b1cb      	cbz	r3, d582e <_ZN14SSD1306_128x325beginEhh+0x82>
        digitalWrite(cs, HIGH);
   d57fa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d57fe:	2101      	movs	r1, #1
   d5800:	b280      	uxth	r0, r0
   d5802:	f003 fc76 	bl	d90f2 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d5806:	2101      	movs	r1, #1
   d5808:	484e      	ldr	r0, [pc, #312]	; (d5944 <_ZN14SSD1306_128x325beginEhh+0x198>)
   d580a:	f001 f938 	bl	d6a7e <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d580e:	2110      	movs	r1, #16
   d5810:	484c      	ldr	r0, [pc, #304]	; (d5944 <_ZN14SSD1306_128x325beginEhh+0x198>)
   d5812:	f001 f981 	bl	d6b18 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d5816:	2100      	movs	r1, #0
   d5818:	484a      	ldr	r0, [pc, #296]	; (d5944 <_ZN14SSD1306_128x325beginEhh+0x198>)
   d581a:	f001 f933 	bl	d6a84 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d581e:	4849      	ldr	r0, [pc, #292]	; (d5944 <_ZN14SSD1306_128x325beginEhh+0x198>)
   d5820:	f001 f928 	bl	d6a74 <_ZN8SPIClass5beginEv>
   d5824:	e003      	b.n	d582e <_ZN14SSD1306_128x325beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d5826:	f003 fced 	bl	d9204 <_Z19__fetch_global_Wirev>
   d582a:	f002 fd0d 	bl	d8248 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d582e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5832:	2101      	movs	r1, #1
   d5834:	b280      	uxth	r0, r0
   d5836:	f003 fc4b 	bl	d90d0 <pinMode>
  digitalWrite(rst, HIGH);
   d583a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d583e:	2101      	movs	r1, #1
   d5840:	b280      	uxth	r0, r0
   d5842:	f003 fc56 	bl	d90f2 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d5846:	2001      	movs	r0, #1
   d5848:	f001 fff6 	bl	d7838 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d584c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5850:	2100      	movs	r1, #0
   d5852:	b280      	uxth	r0, r0
   d5854:	f003 fc4d 	bl	d90f2 <digitalWrite>
  // wait 10ms
  delay(10);
   d5858:	200a      	movs	r0, #10
   d585a:	f001 ffed 	bl	d7838 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d585e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5862:	2101      	movs	r1, #1
   d5864:	b280      	uxth	r0, r0
   d5866:	f003 fc44 	bl	d90f2 <digitalWrite>
  // turn on VCC (9V?)

   #if defined SSD1306_128_32
    // Init sequence for 128x32 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d586a:	4620      	mov	r0, r4
   d586c:	21ae      	movs	r1, #174	; 0xae
   d586e:	f7ff ff5b 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5872:	4620      	mov	r0, r4
   d5874:	21d5      	movs	r1, #213	; 0xd5
   d5876:	f7ff ff57 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d587a:	4620      	mov	r0, r4
   d587c:	2180      	movs	r1, #128	; 0x80
   d587e:	f7ff ff53 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5882:	4620      	mov	r0, r4
   d5884:	21a8      	movs	r1, #168	; 0xa8
   d5886:	f7ff ff4f 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x1F);
   d588a:	4620      	mov	r0, r4
   d588c:	211f      	movs	r1, #31
   d588e:	f7ff ff4b 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5892:	4620      	mov	r0, r4
   d5894:	21d3      	movs	r1, #211	; 0xd3
   d5896:	f7ff ff47 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d589a:	4620      	mov	r0, r4
   d589c:	2100      	movs	r1, #0
   d589e:	f7ff ff43 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d58a2:	4620      	mov	r0, r4
   d58a4:	2140      	movs	r1, #64	; 0x40
   d58a6:	f7ff ff3f 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d58aa:	218d      	movs	r1, #141	; 0x8d
   d58ac:	4620      	mov	r0, r4
   d58ae:	f7ff ff3b 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d58b2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d58b4:	bf0c      	ite	eq
   d58b6:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d58b8:	2114      	movne	r1, #20
   d58ba:	4620      	mov	r0, r4
   d58bc:	f7ff ff34 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d58c0:	4620      	mov	r0, r4
   d58c2:	2120      	movs	r1, #32
   d58c4:	f7ff ff30 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d58c8:	4620      	mov	r0, r4
   d58ca:	2100      	movs	r1, #0
   d58cc:	f7ff ff2c 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d58d0:	4620      	mov	r0, r4
   d58d2:	21a1      	movs	r1, #161	; 0xa1
   d58d4:	f7ff ff28 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d58d8:	4620      	mov	r0, r4
   d58da:	21c8      	movs	r1, #200	; 0xc8
   d58dc:	f7ff ff24 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d58e0:	4620      	mov	r0, r4
   d58e2:	21da      	movs	r1, #218	; 0xda
   d58e4:	f7ff ff20 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x02);
   d58e8:	4620      	mov	r0, r4
   d58ea:	2102      	movs	r1, #2
   d58ec:	f7ff ff1c 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d58f0:	4620      	mov	r0, r4
   d58f2:	2181      	movs	r1, #129	; 0x81
   d58f4:	f7ff ff18 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x8F);
   d58f8:	4620      	mov	r0, r4
   d58fa:	218f      	movs	r1, #143	; 0x8f
   d58fc:	f7ff ff14 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5900:	21d9      	movs	r1, #217	; 0xd9
   d5902:	4620      	mov	r0, r4
   d5904:	f7ff ff10 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5908:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d590a:	bf0c      	ite	eq
   d590c:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d590e:	21f1      	movne	r1, #241	; 0xf1
   d5910:	4620      	mov	r0, r4
   d5912:	f7ff ff09 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5916:	4620      	mov	r0, r4
   d5918:	21db      	movs	r1, #219	; 0xdb
   d591a:	f7ff ff05 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x40);
   d591e:	4620      	mov	r0, r4
   d5920:	2140      	movs	r1, #64	; 0x40
   d5922:	f7ff ff01 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5926:	4620      	mov	r0, r4
   d5928:	21a4      	movs	r1, #164	; 0xa4
   d592a:	f7ff fefd 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d592e:	4620      	mov	r0, r4
   d5930:	21a6      	movs	r1, #166	; 0xa6
   d5932:	f7ff fef9 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5936:	4620      	mov	r0, r4
   d5938:	21af      	movs	r1, #175	; 0xaf
}
   d593a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d593e:	f7ff bef3 	b.w	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
   d5942:	bf00      	nop
   d5944:	2003e5e8 	.word	0x2003e5e8

000d5948 <_ZN14SSD1306_128x327displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void SSD1306_128x32::display(void) {
   d5948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d594c:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void SSD1306_128x32::display(void) {
   d594e:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5950:	f7ff feea 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5954:	2100      	movs	r1, #0
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff fee6 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d595c:	217f      	movs	r1, #127	; 0x7f
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff fee2 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5964:	2122      	movs	r1, #34	; 0x22
   d5966:	4620      	mov	r0, r4
   d5968:	f7ff fede 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d596c:	2100      	movs	r1, #0
   d596e:	4620      	mov	r0, r4
   d5970:	f7ff feda 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5974:	2103      	movs	r1, #3
   d5976:	4620      	mov	r0, r4
   d5978:	f7ff fed6 	bl	d5728 <_ZN14SSD1306_128x3215ssd1306_commandEh>

  if (sid != -1)
   d597c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5980:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d5a30 <_ZN14SSD1306_128x327displayEv+0xe8>
   d5984:	3301      	adds	r3, #1
   d5986:	d02e      	beq.n	d59e6 <_ZN14SSD1306_128x327displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5988:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d598c:	2101      	movs	r1, #1
   d598e:	b280      	uxth	r0, r0
   d5990:	f003 fbaf 	bl	d90f2 <digitalWrite>
    digitalWrite(dc, HIGH);
   d5994:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5998:	2101      	movs	r1, #1
   d599a:	b280      	uxth	r0, r0
   d599c:	f003 fba9 	bl	d90f2 <digitalWrite>
    digitalWrite(cs, LOW);
   d59a0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d59a4:	2100      	movs	r1, #0
   d59a6:	b280      	uxth	r0, r0
   d59a8:	f003 fba3 	bl	d90f2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d59ac:	2001      	movs	r0, #1
   d59ae:	f000 fd01 	bl	d63b4 <HAL_Delay_Microseconds>
   d59b2:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d59b4:	f818 3005 	ldrb.w	r3, [r8, r5]
   d59b8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d59bc:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d59c0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d59c4:	3501      	adds	r5, #1
   d59c6:	f7ff fe3d 	bl	d5644 <_ZN14SSD1306_128x3212fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d59ca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d59ce:	d1f1      	bne.n	d59b4 <_ZN14SSD1306_128x327displayEv+0x6c>
   d59d0:	2001      	movs	r0, #1
   d59d2:	f000 fcef 	bl	d63b4 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d59d6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d59da:	2101      	movs	r1, #1
   d59dc:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d59de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d59e2:	f003 bb86 	b.w	d90f2 <digitalWrite>
   d59e6:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d59e8:	f003 fc0c 	bl	d9204 <_Z19__fetch_global_Wirev>
   d59ec:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d59f0:	f002 fc34 	bl	d825c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d59f4:	f003 fc06 	bl	d9204 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d59f8:	6803      	ldr	r3, [r0, #0]
   d59fa:	2140      	movs	r1, #64	; 0x40
   d59fc:	689b      	ldr	r3, [r3, #8]
   d59fe:	4798      	blx	r3
   d5a00:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5a02:	f003 fbff 	bl	d9204 <_Z19__fetch_global_Wirev>
   d5a06:	19af      	adds	r7, r5, r6
   d5a08:	6803      	ldr	r3, [r0, #0]
   d5a0a:	b2bf      	uxth	r7, r7
   d5a0c:	689b      	ldr	r3, [r3, #8]
   d5a0e:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5a12:	3601      	adds	r6, #1
   d5a14:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5a16:	2e10      	cmp	r6, #16
   d5a18:	d1f3      	bne.n	d5a02 <_ZN14SSD1306_128x327displayEv+0xba>
   d5a1a:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5a1c:	f003 fbf2 	bl	d9204 <_Z19__fetch_global_Wirev>
   d5a20:	b2ad      	uxth	r5, r5
   d5a22:	f002 fc22 	bl	d826a <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5a26:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d5a2a:	d1dd      	bne.n	d59e8 <_ZN14SSD1306_128x327displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a30:	2003d4e0 	.word	0x2003d4e0

000d5a34 <_ZN14SSD1306_128x3212clearDisplayEv>:

// clear everything
void SSD1306_128x32::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d5a34:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5a38:	2100      	movs	r1, #0
   d5a3a:	4801      	ldr	r0, [pc, #4]	; (d5a40 <_ZN14SSD1306_128x3212clearDisplayEv+0xc>)
   d5a3c:	f004 bc7c 	b.w	da338 <memset>
   d5a40:	2003d4e0 	.word	0x2003d4e0

000d5a44 <_GLOBAL__sub_I__ZN14SSD1306_128x329drawPixelEsst>:
   d5a44:	f000 bc06 	b.w	d6254 <HAL_Pin_Map>

000d5a48 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
                            int16_t x1, int16_t y1,
                            uint16_t color) {
   d5a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a4c:	b085      	sub	sp, #20
   d5a4e:	461e      	mov	r6, r3
   d5a50:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5a54:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5a58:	4615      	mov	r5, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5a5a:	1a9a      	subs	r2, r3, r2
   d5a5c:	2a00      	cmp	r2, #0
   d5a5e:	bfb8      	it	lt
   d5a60:	4252      	neglt	r2, r2
   d5a62:	9200      	str	r2, [sp, #0]
   d5a64:	1a72      	subs	r2, r6, r1
   d5a66:	2a00      	cmp	r2, #0
   d5a68:	bfb8      	it	lt
   d5a6a:	4252      	neglt	r2, r2
   d5a6c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
                            int16_t x1, int16_t y1,
                            uint16_t color) {
   d5a6e:	460c      	mov	r4, r1
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d5a70:	9a00      	ldr	r2, [sp, #0]
   d5a72:	9901      	ldr	r1, [sp, #4]
   d5a74:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
                            int16_t x1, int16_t y1,
                            uint16_t color) {
   d5a76:	4681      	mov	r9, r0
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d5a78:	dd05      	ble.n	d5a86 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d5a7a:	4632      	mov	r2, r6
        swap(x0, y0);
        swap(x1, y1);
   d5a7c:	461e      	mov	r6, r3
   d5a7e:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
                            int16_t x1, int16_t y1,
                            uint16_t color) {
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d5a80:	4622      	mov	r2, r4
        swap(x0, y0);
   d5a82:	462c      	mov	r4, r5
   d5a84:	4615      	mov	r5, r2
        swap(x1, y1);
    }
    
    if (x0 > x1) {
   d5a86:	42b4      	cmp	r4, r6
   d5a88:	dd05      	ble.n	d5a96 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d5a8a:	462a      	mov	r2, r5
        swap(x0, x1);
        swap(y0, y1);
   d5a8c:	461d      	mov	r5, r3
   d5a8e:	4613      	mov	r3, r2
    if (steep) {
        swap(x0, y0);
        swap(x1, y1);
    }
    
    if (x0 > x1) {
   d5a90:	4622      	mov	r2, r4
   d5a92:	4634      	mov	r4, r6
   d5a94:	4616      	mov	r6, r2
        swap(y0, y1);
    }
    
    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d5a96:	1b5a      	subs	r2, r3, r5
   d5a98:	2a00      	cmp	r2, #0
   d5a9a:	bfb8      	it	lt
   d5a9c:	4252      	neglt	r2, r2
        swap(x0, x1);
        swap(y0, y1);
    }
    
    int16_t dx, dy;
    dx = x1 - x0;
   d5a9e:	ebc4 0806 	rsb	r8, r4, r6
    int16_t ystep;
    
    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d5aa2:	429d      	cmp	r5, r3
   d5aa4:	bfb4      	ite	lt
   d5aa6:	2301      	movlt	r3, #1
   d5aa8:	f04f 33ff 	movge.w	r3, #4294967295
        swap(x0, x1);
        swap(y0, y1);
    }
    
    int16_t dx, dy;
    dx = x1 - x0;
   d5aac:	fa1f f888 	uxth.w	r8, r8
    int16_t ystep;
    
    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d5ab0:	9302      	str	r3, [sp, #8]
        swap(y0, y1);
    }
    
    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d5ab2:	9203      	str	r2, [sp, #12]
    
    int16_t err = dx / 2;
   d5ab4:	fa0f f788 	sxth.w	r7, r8
   d5ab8:	2202      	movs	r2, #2
   d5aba:	fb97 f7f2 	sdiv	r7, r7, r2
        ystep = 1;
    } else {
        ystep = -1;
    }
    
    for (; x0<=x1; x0++) {
   d5abe:	42b4      	cmp	r4, r6
   d5ac0:	dc1f      	bgt.n	d5b02 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
        if (steep) {
   d5ac2:	9a01      	ldr	r2, [sp, #4]
   d5ac4:	9b00      	ldr	r3, [sp, #0]
   d5ac6:	4293      	cmp	r3, r2
   d5ac8:	f8d9 3000 	ldr.w	r3, [r9]
            drawPixel(y0, x0, color);
   d5acc:	bfc8      	it	gt
   d5ace:	4622      	movgt	r2, r4
   d5ad0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5ad4:	bfc8      	it	gt
   d5ad6:	4629      	movgt	r1, r5
   d5ad8:	4653      	mov	r3, sl
        } else {
            drawPixel(x0, y0, color);
   d5ada:	bfdc      	itt	le
   d5adc:	462a      	movle	r2, r5
   d5ade:	4621      	movle	r1, r4
   d5ae0:	4648      	mov	r0, r9
   d5ae2:	47d8      	blx	fp
        }
        err -= dy;
   d5ae4:	9b03      	ldr	r3, [sp, #12]
   d5ae6:	1aff      	subs	r7, r7, r3
   d5ae8:	b2bb      	uxth	r3, r7
   d5aea:	b21f      	sxth	r7, r3
        if (err < 0) {
   d5aec:	2f00      	cmp	r7, #0
   d5aee:	da05      	bge.n	d5afc <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
            y0 += ystep;
   d5af0:	9a02      	ldr	r2, [sp, #8]
            err += dx;
   d5af2:	eb08 0703 	add.w	r7, r8, r3
        } else {
            drawPixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
   d5af6:	4415      	add	r5, r2
   d5af8:	b22d      	sxth	r5, r5
            err += dx;
   d5afa:	b23f      	sxth	r7, r7
   d5afc:	3401      	adds	r4, #1
   d5afe:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }
    
    for (; x0<=x1; x0++) {
   d5b00:	e7dd      	b.n	d5abe <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
   d5b02:	b005      	add	sp, #20
   d5b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b08 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
                            int16_t w, int16_t h,
                            uint16_t color) {
   d5b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b0c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
    drawFastHLine(x, y, w, color);
   d5b10:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
                            int16_t w, int16_t h,
                            uint16_t color) {
   d5b12:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
    drawFastHLine(x, y, w, color);
   d5b16:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
                            int16_t w, int16_t h,
                            uint16_t color) {
   d5b18:	4604      	mov	r4, r0
    drawFastHLine(x, y, w, color);
   d5b1a:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
                            int16_t w, int16_t h,
                            uint16_t color) {
   d5b1c:	4691      	mov	r9, r2
   d5b1e:	460d      	mov	r5, r1
   d5b20:	4698      	mov	r8, r3
    drawFastHLine(x, y, w, color);
   d5b22:	47b8      	blx	r7
    drawFastHLine(x, y+h-1, w, color);
   d5b24:	6823      	ldr	r3, [r4, #0]
   d5b26:	9600      	str	r6, [sp, #0]
   d5b28:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5b2c:	444a      	add	r2, r9
   d5b2e:	69df      	ldr	r7, [r3, #28]
   d5b30:	4629      	mov	r1, r5
   d5b32:	4643      	mov	r3, r8
   d5b34:	4620      	mov	r0, r4
   d5b36:	b212      	sxth	r2, r2
   d5b38:	47b8      	blx	r7
    drawFastVLine(x, y, h, color);
   d5b3a:	6823      	ldr	r3, [r4, #0]
   d5b3c:	9600      	str	r6, [sp, #0]
   d5b3e:	699f      	ldr	r7, [r3, #24]
   d5b40:	464a      	mov	r2, r9
   d5b42:	4653      	mov	r3, sl
   d5b44:	4629      	mov	r1, r5
   d5b46:	4620      	mov	r0, r4
   d5b48:	47b8      	blx	r7
    drawFastVLine(x+w-1, y, h, color);
   d5b4a:	6823      	ldr	r3, [r4, #0]
   d5b4c:	960a      	str	r6, [sp, #40]	; 0x28
   d5b4e:	f108 31ff 	add.w	r1, r8, #4294967295
   d5b52:	4429      	add	r1, r5
   d5b54:	699d      	ldr	r5, [r3, #24]
   d5b56:	464a      	mov	r2, r9
   d5b58:	4653      	mov	r3, sl
   d5b5a:	b209      	sxth	r1, r1
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	46ac      	mov	ip, r5
}
   d5b60:	b002      	add	sp, #8
   d5b62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                            int16_t w, int16_t h,
                            uint16_t color) {
    drawFastHLine(x, y, w, color);
    drawFastHLine(x, y+h-1, w, color);
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
   d5b66:	4760      	bx	ip

000d5b68 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
                                 int16_t h, uint16_t color) {
   d5b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Update in subclasses if desired!
    drawLine(x, y, x, y+h-1, color);
   d5b6a:	3b01      	subs	r3, #1
   d5b6c:	4413      	add	r3, r2
   d5b6e:	6804      	ldr	r4, [r0, #0]
   d5b70:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5b74:	9501      	str	r5, [sp, #4]
   d5b76:	b21b      	sxth	r3, r3
   d5b78:	9300      	str	r3, [sp, #0]
   d5b7a:	6964      	ldr	r4, [r4, #20]
   d5b7c:	460b      	mov	r3, r1
   d5b7e:	47a0      	blx	r4
}
   d5b80:	b003      	add	sp, #12
   d5b82:	bd30      	pop	{r4, r5, pc}

000d5b84 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
                                 int16_t w, uint16_t color) {
   d5b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Update in subclasses if desired!
    drawLine(x, y, x+w-1, y, color);
   d5b86:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5b8a:	6804      	ldr	r4, [r0, #0]
   d5b8c:	e88d 0024 	stmia.w	sp, {r2, r5}
   d5b90:	3b01      	subs	r3, #1
   d5b92:	440b      	add	r3, r1
   d5b94:	6964      	ldr	r4, [r4, #20]
   d5b96:	b21b      	sxth	r3, r3
   d5b98:	47a0      	blx	r4
}
   d5b9a:	b003      	add	sp, #12
   d5b9c:	bd30      	pop	{r4, r5, pc}

000d5b9e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   d5b9e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5ba2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d5ba6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5baa:	4605      	mov	r5, r0
   d5bac:	4617      	mov	r7, r2
    // Update in subclasses if desired!
    for (int16_t i=x; i<x+w; i++) {
   d5bae:	460c      	mov	r4, r1
   d5bb0:	eb01 0a03 	add.w	sl, r1, r3
   d5bb4:	4554      	cmp	r4, sl
   d5bb6:	da0b      	bge.n	d5bd0 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
        drawFastVLine(i, y, h, color);
   d5bb8:	682b      	ldr	r3, [r5, #0]
   d5bba:	f8cd 9000 	str.w	r9, [sp]
   d5bbe:	699e      	ldr	r6, [r3, #24]
   d5bc0:	4621      	mov	r1, r4
   d5bc2:	4643      	mov	r3, r8
   d5bc4:	463a      	mov	r2, r7
   d5bc6:	4628      	mov	r0, r5
   d5bc8:	3401      	adds	r4, #1
   d5bca:	47b0      	blx	r6
   d5bcc:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    // Update in subclasses if desired!
    for (int16_t i=x; i<x+w; i++) {
   d5bce:	e7f1      	b.n	d5bb4 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
        drawFastVLine(i, y, h, color);
    }
}
   d5bd0:	b002      	add	sp, #8
   d5bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5bd6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5bd6:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5bd8:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5bdc:	6804      	ldr	r4, [r0, #0]
   d5bde:	9101      	str	r1, [sp, #4]
   d5be0:	9200      	str	r2, [sp, #0]
   d5be2:	2200      	movs	r2, #0
   d5be4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5be8:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5bea:	4611      	mov	r1, r2
   d5bec:	47a0      	blx	r4
}
   d5bee:	b002      	add	sp, #8
   d5bf0:	bd10      	pop	{r4, pc}

000d5bf2 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) {
    return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d5bf2:	4770      	bx	lr

000d5bf4 <_ZN12Adafruit_GFXC1Ess>:
    0x00, 0x19, 0x1D, 0x17, 0x12,
    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5bf4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5bf6:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5bf8:	2400      	movs	r4, #0
   d5bfa:	4d08      	ldr	r5, [pc, #32]	; (d5c1c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5bfc:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
   d5bfe:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d5c00:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
    textcolor = textbgcolor = 0xFFFF;
   d5c02:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
   d5c06:	2201      	movs	r2, #1
   d5c08:	6044      	str	r4, [r0, #4]
    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
   d5c0a:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
   d5c0c:	7644      	strb	r4, [r0, #25]
    cursor_y  = cursor_x    = 0;
   d5c0e:	8204      	strh	r4, [r0, #16]
   d5c10:	8244      	strh	r4, [r0, #18]
    textsize  = 1;
   d5c12:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
   d5c14:	82c1      	strh	r1, [r0, #22]
   d5c16:	8281      	strh	r1, [r0, #20]
    wrap      = true;
   d5c18:	7682      	strb	r2, [r0, #26]
}
   d5c1a:	bd30      	pop	{r4, r5, pc}
   d5c1c:	000dd5d4 	.word	0x000dd5d4

000d5c20 <_ZN12Adafruit_GFX8drawCharEsshtth>:
    return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
   d5c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c24:	b08f      	sub	sp, #60	; 0x3c
   d5c26:	4605      	mov	r5, r0
   d5c28:	9106      	str	r1, [sp, #24]
   d5c2a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5c2e:	9107      	str	r1, [sp, #28]
   d5c30:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5c34:	9108      	str	r1, [sp, #32]
    
    if((x >= _width)            || // Clip right
   d5c36:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5c3a:	9806      	ldr	r0, [sp, #24]
    return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
   d5c3c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
    
    if((x >= _width)            || // Clip right
   d5c40:	4281      	cmp	r1, r0
   d5c42:	dd7c      	ble.n	d5d3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5c44:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5c48:	4291      	cmp	r1, r2
   d5c4a:	dd78      	ble.n	d5d3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
   d5c4c:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
    
    if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
   d5c4e:	fb11 0008 	smlabb	r0, r1, r8, r0
   d5c52:	2800      	cmp	r0, #0
   d5c54:	dd73      	ble.n	d5d3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
       ((x + 6 * size - 1) < 0) || // Clip left
   d5c56:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5c5a:	2800      	cmp	r0, #0
   d5c5c:	dd6f      	ble.n	d5d3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
   d5c5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c62:	b296      	uxth	r6, r2
   d5c64:	930c      	str	r3, [sp, #48]	; 0x30
   d5c66:	f106 0308 	add.w	r3, r6, #8
   d5c6a:	b29b      	uxth	r3, r3
   d5c6c:	9109      	str	r1, [sp, #36]	; 0x24
   d5c6e:	2400      	movs	r4, #0
   d5c70:	930d      	str	r3, [sp, #52]	; 0x34
       ((y + 8 * size - 1) < 0))   // Clip top
        return;
    
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
   d5c72:	2c05      	cmp	r4, #5
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
   d5c74:	bf1c      	itt	ne
   d5c76:	4b33      	ldrne	r3, [pc, #204]	; (d5d44 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d5c78:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
   d5c7a:	9605      	str	r6, [sp, #20]
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
   d5c7c:	bf16      	itet	ne
   d5c7e:	191b      	addne	r3, r3, r4
        return;
    
    for (int8_t i=0; i<6; i++ ) {
        uint8_t line;
        if (i == 5)
            line = 0x0;
   d5c80:	f04f 0900 	moveq.w	r9, #0
        else
            line = pgm_read_byte(font+(c*5)+i);
   d5c84:	f813 9002 	ldrbne.w	r9, [r3, r2]
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
   d5c88:	9604      	str	r6, [sp, #16]
   d5c8a:	fa1f f388 	uxth.w	r3, r8
   d5c8e:	9303      	str	r3, [sp, #12]
   d5c90:	9a03      	ldr	r2, [sp, #12]
   d5c92:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d5c96:	fb04 3202 	mla	r2, r4, r2, r3
                }
            } else if (bg != color) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, bg);
   d5c9a:	fa13 f384 	uxtah	r3, r3, r4
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
   d5c9e:	b212      	sxth	r2, r2
                }
            } else if (bg != color) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, bg);
   d5ca0:	b21b      	sxth	r3, r3
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
   d5ca2:	920a      	str	r2, [sp, #40]	; 0x28
   d5ca4:	4637      	mov	r7, r6
                }
            } else if (bg != color) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, bg);
                else {  // big size
                    fillRect(x+i*size, y+j*size, size, size, bg);
   d5ca6:	fa0f fa88 	sxth.w	sl, r8
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
                }
            } else if (bg != color) {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, bg);
   d5caa:	930b      	str	r3, [sp, #44]	; 0x2c
        if (i == 5)
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
            if (line & 0x1) {
   d5cac:	f019 0f01 	tst.w	r9, #1
   d5cb0:	d011      	beq.n	d5cd6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
                if (size == 1) // default size
   d5cb2:	f1b8 0f01 	cmp.w	r8, #1
   d5cb6:	682b      	ldr	r3, [r5, #0]
   d5cb8:	d103      	bne.n	d5cc2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
                    drawPixel(x+i, y+j, color);
   d5cba:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5cbe:	9b07      	ldr	r3, [sp, #28]
   d5cc0:	e014      	b.n	d5cec <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
                else {  // big size
                    fillRect(x+(i*size), y+(j*size), size, size, color);
   d5cc2:	9a07      	ldr	r2, [sp, #28]
   d5cc4:	9201      	str	r2, [sp, #4]
   d5cc6:	f8cd a000 	str.w	sl, [sp]
   d5cca:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5cce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d5cd2:	4653      	mov	r3, sl
   d5cd4:	e018      	b.n	d5d08 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
                }
            } else if (bg != color) {
   d5cd6:	9b07      	ldr	r3, [sp, #28]
   d5cd8:	9a08      	ldr	r2, [sp, #32]
   d5cda:	4293      	cmp	r3, r2
   d5cdc:	d017      	beq.n	d5d0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
                if (size == 1) // default size
   d5cde:	f1b8 0f01 	cmp.w	r8, #1
   d5ce2:	682b      	ldr	r3, [r5, #0]
   d5ce4:	d107      	bne.n	d5cf6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
                    drawPixel(x+i, y+j, bg);
   d5ce6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5cea:	4613      	mov	r3, r2
   d5cec:	b23a      	sxth	r2, r7
   d5cee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5cf0:	4628      	mov	r0, r5
   d5cf2:	47d8      	blx	fp
   d5cf4:	e00b      	b.n	d5d0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
                else {  // big size
                    fillRect(x+i*size, y+j*size, size, size, bg);
   d5cf6:	9a08      	ldr	r2, [sp, #32]
   d5cf8:	9201      	str	r2, [sp, #4]
   d5cfa:	f8cd a000 	str.w	sl, [sp]
   d5cfe:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d5d02:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5d06:	4653      	mov	r3, sl
   d5d08:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5d0a:	4628      	mov	r0, r5
   d5d0c:	47d8      	blx	fp
   d5d0e:	9b04      	ldr	r3, [sp, #16]
   d5d10:	9a03      	ldr	r2, [sp, #12]
   d5d12:	4413      	add	r3, r2
   d5d14:	b29b      	uxth	r3, r3
   d5d16:	9304      	str	r3, [sp, #16]
   d5d18:	9b05      	ldr	r3, [sp, #20]
   d5d1a:	4413      	add	r3, r2
   d5d1c:	b29b      	uxth	r3, r3
   d5d1e:	3701      	adds	r7, #1
   d5d20:	9305      	str	r3, [sp, #20]
        uint8_t line;
        if (i == 5)
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
   d5d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5d24:	b2bf      	uxth	r7, r7
   d5d26:	429f      	cmp	r7, r3
                    drawPixel(x+i, y+j, bg);
                else {  // big size
                    fillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
            line >>= 1;
   d5d28:	ea4f 0959 	mov.w	r9, r9, lsr #1
        uint8_t line;
        if (i == 5)
            line = 0x0;
        else
            line = pgm_read_byte(font+(c*5)+i);
        for (int8_t j = 0; j<8; j++) {
   d5d2c:	d1be      	bne.n	d5cac <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5d30:	3b01      	subs	r3, #1
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
        return;
    
    for (int8_t i=0; i<6; i++ ) {
   d5d32:	3401      	adds	r4, #1
   d5d34:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5d38:	b264      	sxtb	r4, r4
   d5d3a:	9309      	str	r3, [sp, #36]	; 0x24
   d5d3c:	d199      	bne.n	d5c72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
                }
            }
            line >>= 1;
        }
    }
}
   d5d3e:	b00f      	add	sp, #60	; 0x3c
   d5d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d44:	000dd604 	.word	0x000dd604

000d5d48 <_ZN12Adafruit_GFX5writeEh>:
            }
        }
    }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5d48:	b530      	push	{r4, r5, lr}
    
    if (c == '\n') {
   d5d4a:	290a      	cmp	r1, #10
            }
        }
    }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5d4c:	b085      	sub	sp, #20
   d5d4e:	4604      	mov	r4, r0
   d5d50:	460b      	mov	r3, r1
    
    if (c == '\n') {
   d5d52:	d104      	bne.n	d5d5e <_ZN12Adafruit_GFX5writeEh+0x16>
        cursor_y += textsize*8;
   d5d54:	7e02      	ldrb	r2, [r0, #24]
   d5d56:	8a43      	ldrh	r3, [r0, #18]
   d5d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5d5c:	e023      	b.n	d5da6 <_ZN12Adafruit_GFX5writeEh+0x5e>
        cursor_x  = 0;
    } else if (c == '\r') {
   d5d5e:	290d      	cmp	r1, #13
   d5d60:	d024      	beq.n	d5dac <_ZN12Adafruit_GFX5writeEh+0x64>
        // skip em
    } else {
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5d62:	7e05      	ldrb	r5, [r0, #24]
   d5d64:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5d68:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5d6c:	9502      	str	r5, [sp, #8]
   d5d6e:	8ac5      	ldrh	r5, [r0, #22]
   d5d70:	9501      	str	r5, [sp, #4]
   d5d72:	8a85      	ldrh	r5, [r0, #20]
   d5d74:	9500      	str	r5, [sp, #0]
   d5d76:	f7ff ff53 	bl	d5c20 <_ZN12Adafruit_GFX8drawCharEsshtth>
        cursor_x += textsize*6;
   d5d7a:	7e22      	ldrb	r2, [r4, #24]
   d5d7c:	8a23      	ldrh	r3, [r4, #16]
   d5d7e:	b291      	uxth	r1, r2
   d5d80:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5d84:	eb03 0340 	add.w	r3, r3, r0, lsl #1
        if (wrap && (cursor_x > (_width - textsize*6))) {
   d5d88:	7ea0      	ldrb	r0, [r4, #26]
        cursor_x  = 0;
    } else if (c == '\r') {
        // skip em
    } else {
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
        cursor_x += textsize*6;
   d5d8a:	b21b      	sxth	r3, r3
   d5d8c:	8223      	strh	r3, [r4, #16]
        if (wrap && (cursor_x > (_width - textsize*6))) {
   d5d8e:	b168      	cbz	r0, d5dac <_ZN12Adafruit_GFX5writeEh+0x64>
   d5d90:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5d94:	f06f 0505 	mvn.w	r5, #5
   d5d98:	fb05 0202 	mla	r2, r5, r2, r0
   d5d9c:	4293      	cmp	r3, r2
   d5d9e:	dd05      	ble.n	d5dac <_ZN12Adafruit_GFX5writeEh+0x64>
            cursor_y += textsize*8;
   d5da0:	8a63      	ldrh	r3, [r4, #18]
   d5da2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d5da6:	8263      	strh	r3, [r4, #18]
            cursor_x = 0;
   d5da8:	2300      	movs	r3, #0
   d5daa:	8223      	strh	r3, [r4, #16]
        }
    }
    return 1;
}
   d5dac:	2001      	movs	r0, #1
   d5dae:	b005      	add	sp, #20
   d5db0:	bd30      	pop	{r4, r5, pc}

000d5db2 <_ZN12Adafruit_GFX9setCursorEss>:
        }
    }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d5db2:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d5db4:	8242      	strh	r2, [r0, #18]
   d5db6:	4770      	bx	lr

000d5db8 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
   d5db8:	2900      	cmp	r1, #0
   d5dba:	bf08      	it	eq
   d5dbc:	2101      	moveq	r1, #1
   d5dbe:	7601      	strb	r1, [r0, #24]
   d5dc0:	4770      	bx	lr

000d5dc2 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
    // For 'transparent' background, we'll set the bg
    // to the same as fg instead of using a flag
    textcolor = textbgcolor = c;
   d5dc2:	82c1      	strh	r1, [r0, #22]
   d5dc4:	8281      	strh	r1, [r0, #20]
   d5dc6:	4770      	bx	lr

000d5dc8 <_ZN12Adafruit_GFX11getRotationEv>:
    wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
    return rotation;
}
   d5dc8:	7e40      	ldrb	r0, [r0, #25]
   d5dca:	4770      	bx	lr

000d5dcc <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
    return _width;
}
   d5dcc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5dd0:	4770      	bx	lr

000d5dd2 <_ZN12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) {
    return _height;
}
   d5dd2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5dd6:	4770      	bx	lr

000d5dd8 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5dd8:	f000 ba3c 	b.w	d6254 <HAL_Pin_Map>

000d5ddc <_ZN11ArduinoJson9JsonArray3addEv>:
  node_type *node = _firstNode;
  while (node && index--) node = node->next;
  return node ? node->content : JsonVariant::invalid();
}

JsonVariant &JsonArray::add() {
   d5ddc:	b510      	push	{r4, lr}
   d5dde:	4604      	mov	r4, r0
   d5de0:	6800      	ldr	r0, [r0, #0]
  const_iterator begin() const { return const_iterator(_firstNode); }
  const_iterator end() const { return const_iterator(NULL); }

 protected:
  node_type *createNode() {
    if (!_buffer) return NULL;
   d5de2:	b198      	cbz	r0, d5e0c <_ZN11ArduinoJson9JsonArray3addEv+0x30>
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    return jsonBuffer->alloc(n);
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	2118      	movs	r1, #24
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	4798      	blx	r3
    return new (_buffer) node_type();
   d5dec:	b170      	cbz	r0, d5e0c <_ZN11ArduinoJson9JsonArray3addEv+0x30>

// A node for a singly-linked list.
// Used by List<T> and its iterators.
template <typename T>
struct ListNode : public Internals::JsonBufferAllocated {
  ListNode() : next(NULL) {}
   d5dee:	2300      	movs	r3, #0
   d5df0:	6003      	str	r3, [r0, #0]
// - a string (const char*)
// - a reference to a JsonArray or JsonObject
class JsonVariant : public Internals::JsonPrintable<JsonVariant> {
 public:
  // Creates an uninitialized JsonVariant
  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}
   d5df2:	2301      	movs	r3, #1
   d5df4:	7203      	strb	r3, [r0, #8]
  }

  void addNode(node_type *nodeToAdd) {
    if (_firstNode) {
   d5df6:	6863      	ldr	r3, [r4, #4]
   d5df8:	b12b      	cbz	r3, d5e06 <_ZN11ArduinoJson9JsonArray3addEv+0x2a>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
   d5dfa:	681a      	ldr	r2, [r3, #0]
   d5dfc:	b10a      	cbz	r2, d5e02 <_ZN11ArduinoJson9JsonArray3addEv+0x26>
   d5dfe:	4613      	mov	r3, r2
   d5e00:	e7fb      	b.n	d5dfa <_ZN11ArduinoJson9JsonArray3addEv+0x1e>
      lastNode->next = nodeToAdd;
   d5e02:	6018      	str	r0, [r3, #0]
   d5e04:	e000      	b.n	d5e08 <_ZN11ArduinoJson9JsonArray3addEv+0x2c>
    } else {
      _firstNode = nodeToAdd;
   d5e06:	6060      	str	r0, [r4, #4]
  node_type *node = createNode();
  if (!node) return JsonVariant::invalid();

  addNode(node);

  return node->content;
   d5e08:	3008      	adds	r0, #8
   d5e0a:	bd10      	pop	{r4, pc}
  return node ? node->content : JsonVariant::invalid();
}

JsonVariant &JsonArray::add() {
  node_type *node = createNode();
  if (!node) return JsonVariant::invalid();
   d5e0c:	4800      	ldr	r0, [pc, #0]	; (d5e10 <_ZN11ArduinoJson9JsonArray3addEv+0x34>)

  addNode(node);

  return node->content;
}
   d5e0e:	bd10      	pop	{r4, pc}
   d5e10:	2003e260 	.word	0x2003e260

000d5e14 <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE>:

    writer.writeComma();
  }

  writer.endArray();
}
   d5e14:	b508      	push	{r3, lr}
   d5e16:	f000 fa1d 	bl	d6254 <HAL_Pin_Map>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE+0x10>)
   d5e1c:	2200      	movs	r2, #0
   d5e1e:	601a      	str	r2, [r3, #0]
   d5e20:	605a      	str	r2, [r3, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	2003e250 	.word	0x2003e250

000d5e28 <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>:
#include "JsonObject.h"

using namespace ArduinoJson;
using namespace ArduinoJson::Internals;

void JsonParser::skipSpaces() {
   d5e28:	b538      	push	{r3, r4, r5, lr}
   d5e2a:	4605      	mov	r5, r0
  while (isspace(*_ptr)) _ptr++;
   d5e2c:	686c      	ldr	r4, [r5, #4]
   d5e2e:	7820      	ldrb	r0, [r4, #0]
   d5e30:	f004 f962 	bl	da0f8 <isspace>
   d5e34:	b110      	cbz	r0, d5e3c <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv+0x14>
   d5e36:	3401      	adds	r4, #1
   d5e38:	606c      	str	r4, [r5, #4]
   d5e3a:	e7f7      	b.n	d5e2c <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv+0x4>
   d5e3c:	bd38      	pop	{r3, r4, r5, pc}

000d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>:
}

bool JsonParser::skip(char charToSkip) {
   d5e3e:	b538      	push	{r3, r4, r5, lr}
   d5e40:	4604      	mov	r4, r0
   d5e42:	460d      	mov	r5, r1
  skipSpaces();
   d5e44:	f7ff fff0 	bl	d5e28 <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>
  if (*_ptr != charToSkip) return false;
   d5e48:	6863      	ldr	r3, [r4, #4]
   d5e4a:	781a      	ldrb	r2, [r3, #0]
   d5e4c:	42aa      	cmp	r2, r5
   d5e4e:	d106      	bne.n	d5e5e <_ZN11ArduinoJson9Internals10JsonParser4skipEc+0x20>
  _ptr++;
   d5e50:	3301      	adds	r3, #1
  skipSpaces();
   d5e52:	4620      	mov	r0, r4
}

bool JsonParser::skip(char charToSkip) {
  skipSpaces();
  if (*_ptr != charToSkip) return false;
  _ptr++;
   d5e54:	6063      	str	r3, [r4, #4]
  skipSpaces();
   d5e56:	f7ff ffe7 	bl	d5e28 <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>
  return true;
   d5e5a:	2001      	movs	r0, #1
   d5e5c:	bd38      	pop	{r3, r4, r5, pc}
  while (isspace(*_ptr)) _ptr++;
}

bool JsonParser::skip(char charToSkip) {
  skipSpaces();
  if (*_ptr != charToSkip) return false;
   d5e5e:	2000      	movs	r0, #0
  _ptr++;
  skipSpaces();
  return true;
}
   d5e60:	bd38      	pop	{r3, r4, r5, pc}

000d5e62 <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc>:

bool JsonParser::skip(const char *wordToSkip) {
   d5e62:	b510      	push	{r4, lr}
   d5e64:	3901      	subs	r1, #1
  const char *charToSkip = wordToSkip;
  while (*charToSkip && *_ptr == *charToSkip) {
   d5e66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5e6a:	b132      	cbz	r2, d5e7a <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc+0x18>
   d5e6c:	6843      	ldr	r3, [r0, #4]
   d5e6e:	781c      	ldrb	r4, [r3, #0]
   d5e70:	4294      	cmp	r4, r2
   d5e72:	d102      	bne.n	d5e7a <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc+0x18>
    charToSkip++;
    _ptr++;
   d5e74:	3301      	adds	r3, #1
   d5e76:	6043      	str	r3, [r0, #4]
  return true;
}

bool JsonParser::skip(const char *wordToSkip) {
  const char *charToSkip = wordToSkip;
  while (*charToSkip && *_ptr == *charToSkip) {
   d5e78:	e7f5      	b.n	d5e66 <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc+0x4>
    charToSkip++;
    _ptr++;
  }
  return *charToSkip == '\0';
}
   d5e7a:	fab2 f082 	clz	r0, r2
   d5e7e:	0940      	lsrs	r0, r0, #5
   d5e80:	bd10      	pop	{r4, pc}
	...

000d5e84 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv>:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
  return JsonArray::invalid();
}

JsonObject &JsonParser::parseObject() {
   d5e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e86:	4604      	mov	r4, r0
  // Create an empty object
  JsonObject &object = _buffer->createObject();
   d5e88:	6800      	ldr	r0, [r0, #0]
   d5e8a:	f000 f96d 	bl	d6168 <_ZN11ArduinoJson10JsonBuffer12createObjectEv>

  // Check opening brace
  if (!skip('{')) goto ERROR_MISSING_BRACE;
   d5e8e:	217b      	movs	r1, #123	; 0x7b
  return JsonArray::invalid();
}

JsonObject &JsonParser::parseObject() {
  // Create an empty object
  JsonObject &object = _buffer->createObject();
   d5e90:	4605      	mov	r5, r0

  // Check opening brace
  if (!skip('{')) goto ERROR_MISSING_BRACE;
   d5e92:	4620      	mov	r0, r4
   d5e94:	f7ff ffd3 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d5e98:	b908      	cbnz	r0, d5e9e <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x1a>
ERROR_INVALID_KEY:
ERROR_INVALID_VALUE:
ERROR_MISSING_BRACE:
ERROR_MISSING_COLON:
ERROR_MISSING_COMMA:
  return JsonObject::invalid();
   d5e9a:	4817      	ldr	r0, [pc, #92]	; (d5ef8 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x74>)
   d5e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Create an empty object
  JsonObject &object = _buffer->createObject();

  // Check opening brace
  if (!skip('{')) goto ERROR_MISSING_BRACE;
  if (skip('}')) goto SUCCESS_EMPTY_OBJECT;
   d5e9e:	217d      	movs	r1, #125	; 0x7d
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	f7ff ffcc 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d5ea6:	bb28      	cbnz	r0, d5ef4 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x70>
  else
    destination = JsonVariant::invalid();
}

const char *JsonParser::parseString() {
  return QuotedString::extractFrom(_ptr, &_ptr);
   d5ea8:	1d27      	adds	r7, r4, #4
   d5eaa:	4639      	mov	r1, r7
   d5eac:	6860      	ldr	r0, [r4, #4]
   d5eae:	f000 f8e1 	bl	d6074 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_>

  // Read each key value pair
  for (;;) {
    // 1 - Parse key
    const char *key = parseString();
    if (!key) goto ERROR_INVALID_KEY;
   d5eb2:	4606      	mov	r6, r0
   d5eb4:	2800      	cmp	r0, #0
   d5eb6:	d0f0      	beq.n	d5e9a <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x16>
    if (!skip(':')) goto ERROR_MISSING_COLON;
   d5eb8:	213a      	movs	r1, #58	; 0x3a
   d5eba:	4620      	mov	r0, r4
   d5ebc:	f7ff ffbf 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	d0ea      	beq.n	d5e9a <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x16>
  // Returns a constant reference or JsonVariant::invalid() if not found.
  const JsonVariant &operator[](key_type key) const { return at(key); }

  // Adds an uninitialized JsonVariant associated with the specified key.
  // Return a reference or JsonVariant::invalid() if allocation fails.
  JsonVariant &add(key_type key) { return (*this)[key]; }
   d5ec4:	4631      	mov	r1, r6
   d5ec6:	4628      	mov	r0, r5
   d5ec8:	f000 f912 	bl	d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>
   d5ecc:	4606      	mov	r6, r0

    // 2 - Parse value
    JsonVariant &value = object.add(key);
    parseAnythingTo(value);
   d5ece:	4601      	mov	r1, r0
   d5ed0:	4620      	mov	r0, r4
   d5ed2:	f000 f813 	bl	d5efc <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE>
    if (!value.success()) goto ERROR_INVALID_VALUE;
   d5ed6:	7833      	ldrb	r3, [r6, #0]
   d5ed8:	2b01      	cmp	r3, #1
   d5eda:	d9de      	bls.n	d5e9a <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x16>

    // 3 - More keys/values?
    if (skip('}')) goto SUCCESS_NON_EMPTY_OBJECT;
   d5edc:	217d      	movs	r1, #125	; 0x7d
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ffad 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d5ee4:	b930      	cbnz	r0, d5ef4 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x70>
    if (!skip(',')) goto ERROR_MISSING_COMMA;
   d5ee6:	212c      	movs	r1, #44	; 0x2c
   d5ee8:	4620      	mov	r0, r4
   d5eea:	f7ff ffa8 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d5eee:	2800      	cmp	r0, #0
   d5ef0:	d1db      	bne.n	d5eaa <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x26>
   d5ef2:	e7d2      	b.n	d5e9a <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv+0x16>
  }

SUCCESS_EMPTY_OBJECT:
SUCCESS_NON_EMPTY_OBJECT:
  return object;
   d5ef4:	4628      	mov	r0, r5
ERROR_INVALID_VALUE:
ERROR_MISSING_BRACE:
ERROR_MISSING_COLON:
ERROR_MISSING_COMMA:
  return JsonObject::invalid();
}
   d5ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5ef8:	2003e258 	.word	0x2003e258

000d5efc <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE>:
    _ptr++;
  }
  return *charToSkip == '\0';
}

void JsonParser::parseAnythingTo(JsonVariant &destination) {
   d5efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (_nestingLimit == 0) return;
   d5efe:	7a03      	ldrb	r3, [r0, #8]
    _ptr++;
  }
  return *charToSkip == '\0';
}

void JsonParser::parseAnythingTo(JsonVariant &destination) {
   d5f00:	4604      	mov	r4, r0
   d5f02:	460d      	mov	r5, r1
  if (_nestingLimit == 0) return;
   d5f04:	2b00      	cmp	r3, #0
   d5f06:	d079      	beq.n	d5ffc <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x100>
  _nestingLimit--;
   d5f08:	3b01      	subs	r3, #1
   d5f0a:	7203      	strb	r3, [r0, #8]

  skipSpaces();
   d5f0c:	f7ff ff8c 	bl	d5e28 <_ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>

  switch (*_ptr) {
   d5f10:	6860      	ldr	r0, [r4, #4]
   d5f12:	7803      	ldrb	r3, [r0, #0]
   d5f14:	2b39      	cmp	r3, #57	; 0x39
   d5f16:	d80b      	bhi.n	d5f30 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x34>
   d5f18:	2b30      	cmp	r3, #48	; 0x30
   d5f1a:	d23c      	bcs.n	d5f96 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x9a>
   d5f1c:	2b27      	cmp	r3, #39	; 0x27
   d5f1e:	d050      	beq.n	d5fc2 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xc6>
   d5f20:	d802      	bhi.n	d5f28 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x2c>
   d5f22:	2b22      	cmp	r3, #34	; 0x22
   d5f24:	d04d      	beq.n	d5fc2 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xc6>
   d5f26:	e053      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
   d5f28:	3b2d      	subs	r3, #45	; 0x2d
   d5f2a:	2b01      	cmp	r3, #1
   d5f2c:	d933      	bls.n	d5f96 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x9a>
   d5f2e:	e04f      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
   d5f30:	2b6e      	cmp	r3, #110	; 0x6e
   d5f32:	d03e      	beq.n	d5fb2 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xb6>
   d5f34:	d804      	bhi.n	d5f40 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x44>
   d5f36:	2b5b      	cmp	r3, #91	; 0x5b
   d5f38:	d00e      	beq.n	d5f58 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x5c>
   d5f3a:	2b66      	cmp	r3, #102	; 0x66
   d5f3c:	d014      	beq.n	d5f68 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x6c>
   d5f3e:	e047      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
   d5f40:	2b74      	cmp	r3, #116	; 0x74
   d5f42:	d011      	beq.n	d5f68 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x6c>
   d5f44:	2b7b      	cmp	r3, #123	; 0x7b
   d5f46:	d143      	bne.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
    case '[':
      destination = parseArray();
      break;

    case '{':
      destination = parseObject();
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f7ff ff9b 	bl	d5e84 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv>
    return *this;
  }

  // Sets the variant to be a reference to an object.
  JsonVariant &operator=(JsonObject &object) {
    set(object);
   d5f4e:	4601      	mov	r1, r0
   d5f50:	4628      	mov	r0, r5
   d5f52:	f000 f95e 	bl	d6212 <_ZN11ArduinoJson11JsonVariant3setERNS_10JsonObjectE>
   d5f56:	e03b      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>

  skipSpaces();

  switch (*_ptr) {
    case '[':
      destination = parseArray();
   d5f58:	4620      	mov	r0, r4
   d5f5a:	f000 f859 	bl	d6010 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv>
    return *this;
  }

  // Sets the variant to be a reference to an array.
  JsonVariant &operator=(JsonArray &array) {
    set(array);
   d5f5e:	4601      	mov	r1, r0
   d5f60:	4628      	mov	r0, r5
   d5f62:	f000 f950 	bl	d6206 <_ZN11ArduinoJson11JsonVariant3setERNS_9JsonArrayE>
   d5f66:	e033      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
ERROR_MISSING_COMMA:
  return JsonObject::invalid();
}

void JsonParser::parseBooleanTo(JsonVariant &destination) {
  if (skip("true"))
   d5f68:	4925      	ldr	r1, [pc, #148]	; (d6000 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x104>)
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7ff ff79 	bl	d5e62 <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc>
   d5f70:	4606      	mov	r6, r0
   d5f72:	b108      	cbz	r0, d5f78 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x7c>
  void set(JsonObject &object);

  // Sets the variant to the specified value.
  template <typename T>
  JsonVariant &operator=(T value) {
    set(value);
   d5f74:	2101      	movs	r1, #1
   d5f76:	e005      	b.n	d5f84 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x88>
    destination = true;
  else if (skip("false"))
   d5f78:	4922      	ldr	r1, [pc, #136]	; (d6004 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x108>)
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	f7ff ff71 	bl	d5e62 <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc>
   d5f80:	b120      	cbz	r0, d5f8c <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x90>
   d5f82:	4631      	mov	r1, r6
   d5f84:	4628      	mov	r0, r5
   d5f86:	f000 f925 	bl	d61d4 <_ZN11ArduinoJson11JsonVariant3setEb>
   d5f8a:	e021      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
    destination = false;
  else
    destination = JsonVariant::invalid();
   d5f8c:	4b1e      	ldr	r3, [pc, #120]	; (d6008 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x10c>)
   d5f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d5f90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   d5f94:	e01c      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
}

void JsonParser::parseNumberTo(JsonVariant &destination) {
  char *endOfLong;
  long longValue = strtol(_ptr, &endOfLong, 10);
   d5f96:	220a      	movs	r2, #10
   d5f98:	a901      	add	r1, sp, #4
   d5f9a:	f005 fe2f 	bl	dbbfc <strtol>
  char stopChar = *endOfLong;
   d5f9e:	9a01      	ldr	r2, [sp, #4]
   d5fa0:	7813      	ldrb	r3, [r2, #0]

  // Could it be a floating point value?
  bool couldBeFloat = stopChar == '.' || stopChar == 'e' || stopChar == 'E';
   d5fa2:	2b2e      	cmp	r3, #46	; 0x2e
    destination = JsonVariant::invalid();
}

void JsonParser::parseNumberTo(JsonVariant &destination) {
  char *endOfLong;
  long longValue = strtol(_ptr, &endOfLong, 10);
   d5fa4:	4601      	mov	r1, r0
  char stopChar = *endOfLong;

  // Could it be a floating point value?
  bool couldBeFloat = stopChar == '.' || stopChar == 'e' || stopChar == 'E';
   d5fa6:	d017      	beq.n	d5fd8 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xdc>
   d5fa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d5fac:	2b45      	cmp	r3, #69	; 0x45
   d5fae:	d120      	bne.n	d5ff2 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xf6>
   d5fb0:	e012      	b.n	d5fd8 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xdc>
  }
}

void JsonParser::parseNullTo(JsonVariant &destination) {
  const char *NULL_STRING = NULL;
  if (skip("null"))
   d5fb2:	4916      	ldr	r1, [pc, #88]	; (d600c <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x110>)
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	f7ff ff54 	bl	d5e62 <_ZN11ArduinoJson9Internals10JsonParser4skipEPKc>
   d5fba:	2800      	cmp	r0, #0
   d5fbc:	d0e6      	beq.n	d5f8c <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x90>
   d5fbe:	2100      	movs	r1, #0
   d5fc0:	e003      	b.n	d5fca <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xce>
  else
    destination = JsonVariant::invalid();
}

const char *JsonParser::parseString() {
  return QuotedString::extractFrom(_ptr, &_ptr);
   d5fc2:	1d21      	adds	r1, r4, #4
   d5fc4:	f000 f856 	bl	d6074 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_>
   d5fc8:	4601      	mov	r1, r0
   d5fca:	4628      	mov	r0, r5
   d5fcc:	f000 f908 	bl	d61e0 <_ZN11ArduinoJson11JsonVariant3setEPKc>
    case '\"':
      destination = parseString();
      break;
  }

  _nestingLimit++;
   d5fd0:	7a23      	ldrb	r3, [r4, #8]
   d5fd2:	3301      	adds	r3, #1
   d5fd4:	7223      	strb	r3, [r4, #8]
   d5fd6:	e011      	b.n	d5ffc <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0x100>
  // Could it be a floating point value?
  bool couldBeFloat = stopChar == '.' || stopChar == 'e' || stopChar == 'E';

  if (couldBeFloat) {
    // Yes => parse it as a double
    double doubleValue = strtod(_ptr, &_ptr);
   d5fd8:	1d21      	adds	r1, r4, #4
   d5fda:	6860      	ldr	r0, [r4, #4]
   d5fdc:	f005 fd80 	bl	dbae0 <strtod>
    // Count the decimal digits
    uint8_t decimals = static_cast<uint8_t>(_ptr - endOfLong - 1);
    // Set the variant as a double
    destination.set(doubleValue, decimals);
   d5fe0:	6863      	ldr	r3, [r4, #4]
   d5fe2:	9901      	ldr	r1, [sp, #4]
   d5fe4:	1a59      	subs	r1, r3, r1
   d5fe6:	3901      	subs	r1, #1
   d5fe8:	b2c9      	uxtb	r1, r1
   d5fea:	4628      	mov	r0, r5
   d5fec:	f000 f8fe 	bl	d61ec <_ZN11ArduinoJson11JsonVariant3setEdh>
   d5ff0:	e7ee      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
  } else {
    // No => set the variant as a long
    _ptr = endOfLong;
   d5ff2:	6062      	str	r2, [r4, #4]
   d5ff4:	4628      	mov	r0, r5
   d5ff6:	f000 f900 	bl	d61fa <_ZN11ArduinoJson11JsonVariant3setEl>
   d5ffa:	e7e9      	b.n	d5fd0 <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE+0xd4>
      destination = parseString();
      break;
  }

  _nestingLimit++;
}
   d5ffc:	b002      	add	sp, #8
   d5ffe:	bd70      	pop	{r4, r5, r6, pc}
   d6000:	000ddaff 	.word	0x000ddaff
   d6004:	000ddb04 	.word	0x000ddb04
   d6008:	2003e260 	.word	0x2003e260
   d600c:	000ddb0a 	.word	0x000ddb0a

000d6010 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv>:

JsonArray &JsonParser::parseArray() {
   d6010:	b570      	push	{r4, r5, r6, lr}
   d6012:	4605      	mov	r5, r0
  // Create an empty array
  JsonArray &array = _buffer->createArray();
   d6014:	6800      	ldr	r0, [r0, #0]
   d6016:	f000 f897 	bl	d6148 <_ZN11ArduinoJson10JsonBuffer11createArrayEv>

  // Check opening braket
  if (!skip('[')) goto ERROR_MISSING_BRACKET;
   d601a:	215b      	movs	r1, #91	; 0x5b
  _nestingLimit++;
}

JsonArray &JsonParser::parseArray() {
  // Create an empty array
  JsonArray &array = _buffer->createArray();
   d601c:	4604      	mov	r4, r0

  // Check opening braket
  if (!skip('[')) goto ERROR_MISSING_BRACKET;
   d601e:	4628      	mov	r0, r5
   d6020:	f7ff ff0d 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d6024:	b908      	cbnz	r0, d602a <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x1a>
  return array;

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
  return JsonArray::invalid();
   d6026:	4810      	ldr	r0, [pc, #64]	; (d6068 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x58>)
   d6028:	bd70      	pop	{r4, r5, r6, pc}
  // Create an empty array
  JsonArray &array = _buffer->createArray();

  // Check opening braket
  if (!skip('[')) goto ERROR_MISSING_BRACKET;
  if (skip(']')) goto SUCCESS_EMPTY_ARRAY;
   d602a:	215d      	movs	r1, #93	; 0x5d
   d602c:	4628      	mov	r0, r5
   d602e:	f7ff ff06 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d6032:	b9b0      	cbnz	r0, d6062 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x52>

  // Read each value
  for (;;) {
    // 1 - Parse value
    JsonVariant &value = array.add();
   d6034:	4620      	mov	r0, r4
   d6036:	f7ff fed1 	bl	d5ddc <_ZN11ArduinoJson9JsonArray3addEv>
   d603a:	4606      	mov	r6, r0
    parseAnythingTo(value);
   d603c:	4601      	mov	r1, r0
   d603e:	4628      	mov	r0, r5
   d6040:	f7ff ff5c 	bl	d5efc <_ZN11ArduinoJson9Internals10JsonParser15parseAnythingToERNS_11JsonVariantE>
    if (!value.success()) goto ERROR_INVALID_VALUE;
   d6044:	7833      	ldrb	r3, [r6, #0]
   d6046:	2b01      	cmp	r3, #1
   d6048:	d9ed      	bls.n	d6026 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x16>

    // 2 - More values?
    if (skip(']')) goto SUCCES_NON_EMPTY_ARRAY;
   d604a:	215d      	movs	r1, #93	; 0x5d
   d604c:	4628      	mov	r0, r5
   d604e:	f7ff fef6 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d6052:	b930      	cbnz	r0, d6062 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x52>
    if (!skip(',')) goto ERROR_MISSING_COMMA;
   d6054:	212c      	movs	r1, #44	; 0x2c
   d6056:	4628      	mov	r0, r5
   d6058:	f7ff fef1 	bl	d5e3e <_ZN11ArduinoJson9Internals10JsonParser4skipEc>
   d605c:	2800      	cmp	r0, #0
   d605e:	d1e9      	bne.n	d6034 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x24>
   d6060:	e7e1      	b.n	d6026 <_ZN11ArduinoJson9Internals10JsonParser10parseArrayEv+0x16>
  }

SUCCESS_EMPTY_ARRAY:
SUCCES_NON_EMPTY_ARRAY:
  return array;
   d6062:	4620      	mov	r0, r4

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
  return JsonArray::invalid();
}
   d6064:	bd70      	pop	{r4, r5, r6, pc}
   d6066:	bf00      	nop
   d6068:	2003e250 	.word	0x2003e250

000d606c <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>:
   d606c:	f000 b8f2 	b.w	d6254 <HAL_Pin_Map>

000d6070 <_GLOBAL__sub_I_List.cpp>:
   d6070:	f000 b8f0 	b.w	d6254 <HAL_Pin_Map>

000d6074 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_>:
  }
}

static inline bool isQuote(char c) { return c == '\"' || c == '\''; }

char *QuotedString::extractFrom(char *input, char **endPtr) {
   d6074:	b5f0      	push	{r4, r5, r6, r7, lr}
  char firstChar = *input;
   d6076:	7805      	ldrb	r5, [r0, #0]
    if (p[0] == c) return p[1];
    p += 2;
  }
}

static inline bool isQuote(char c) { return c == '\"' || c == '\''; }
   d6078:	2d22      	cmp	r5, #34	; 0x22
   d607a:	d003      	beq.n	d6084 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x10>
   d607c:	2d27      	cmp	r5, #39	; 0x27
   d607e:	d001      	beq.n	d6084 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x10>
char *QuotedString::extractFrom(char *input, char **endPtr) {
  char firstChar = *input;

  if (!isQuote(firstChar)) {
    // must start with a quote
    return NULL;
   d6080:	2000      	movs	r0, #0
   d6082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  char stopChar = firstChar;  // closing quote is the same as opening quote

  char *startPtr = input + 1;  // skip the quote
   d6084:	3001      	adds	r0, #1
  char *readPtr = startPtr;
  char *writePtr = startPtr;
   d6086:	4604      	mov	r4, r0
  }

  char stopChar = firstChar;  // closing quote is the same as opening quote

  char *startPtr = input + 1;  // skip the quote
  char *readPtr = startPtr;
   d6088:	4602      	mov	r2, r0
  char *writePtr = startPtr;
  char c;

  for (;;) {
    c = *readPtr++;
   d608a:	7813      	ldrb	r3, [r2, #0]
   d608c:	1c56      	adds	r6, r2, #1

    if (c == '\0') {
   d608e:	2b00      	cmp	r3, #0
   d6090:	d0f6      	beq.n	d6080 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0xc>
      // premature ending
      return NULL;
    }

    if (c == stopChar) {
   d6092:	429d      	cmp	r5, r3
   d6094:	d010      	beq.n	d60b8 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x44>
      // closing quote
      break;
    }

    if (c == '\\') {
   d6096:	2b5c      	cmp	r3, #92	; 0x5c
   d6098:	d10a      	bne.n	d60b0 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x3c>
      // replace char
      c = unescapeChar(*readPtr++);
   d609a:	1c96      	adds	r6, r2, #2
   d609c:	7853      	ldrb	r3, [r2, #1]
}

static char unescapeChar(char c) {
  // Optimized for code size on a 8-bit AVR

  const char *p = "b\bf\fn\nr\rt\t";
   d609e:	4a08      	ldr	r2, [pc, #32]	; (d60c0 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x4c>)

  for (;;) {
    if (p[0] == '\0') return c;
   d60a0:	7817      	ldrb	r7, [r2, #0]
   d60a2:	b12f      	cbz	r7, d60b0 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x3c>
    if (p[0] == c) return p[1];
   d60a4:	42bb      	cmp	r3, r7
   d60a6:	d101      	bne.n	d60ac <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x38>
   d60a8:	7853      	ldrb	r3, [r2, #1]
   d60aa:	e001      	b.n	d60b0 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x3c>
    p += 2;
   d60ac:	3202      	adds	r2, #2
   d60ae:	e7f7      	b.n	d60a0 <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x2c>
    if (c == '\\') {
      // replace char
      c = unescapeChar(*readPtr++);
    }

    *writePtr++ = c;
   d60b0:	f804 3b01 	strb.w	r3, [r4], #1
  char *startPtr = input + 1;  // skip the quote
  char *readPtr = startPtr;
  char *writePtr = startPtr;
  char c;

  for (;;) {
   d60b4:	4632      	mov	r2, r6
   d60b6:	e7e8      	b.n	d608a <_ZN11ArduinoJson9Internals12QuotedString11extractFromEPcPS2_+0x16>

    *writePtr++ = c;
  }

  // end the string here
  *writePtr = '\0';
   d60b8:	2300      	movs	r3, #0
   d60ba:	7023      	strb	r3, [r4, #0]

  // update end ptr
  *endPtr = readPtr;
   d60bc:	600e      	str	r6, [r1, #0]

  return startPtr;
   d60be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d60c0:	000ddb0f 	.word	0x000ddb0f

000d60c4 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals12QuotedString7printToEPKcR5Print>:
   d60c4:	f000 b8c6 	b.w	d6254 <HAL_Pin_Map>

000d60c8 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10Prettyfier5writeEh>:
   d60c8:	f000 b8c4 	b.w	d6254 <HAL_Pin_Map>

000d60cc <_GLOBAL__sub_I_SparkJson.cpp>:
   d60cc:	f000 b8c2 	b.w	d6254 <HAL_Pin_Map>

000d60d0 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13IndentedPrint5writeEh>:
   d60d0:	f000 b8c0 	b.w	d6254 <HAL_Pin_Map>

000d60d4 <_ZNK11ArduinoJson10JsonObject9getNodeAtEPKc>:
  JsonObject &object = _buffer->createObject();
  add(key, object);
  return object;
}

JsonObject::node_type *JsonObject::getNodeAt(const char *key) const {
   d60d4:	b538      	push	{r3, r4, r5, lr}
  for (node_type *node = _firstNode; node; node = node->next) {
   d60d6:	6844      	ldr	r4, [r0, #4]
  JsonObject &object = _buffer->createObject();
  add(key, object);
  return object;
}

JsonObject::node_type *JsonObject::getNodeAt(const char *key) const {
   d60d8:	460d      	mov	r5, r1
  for (node_type *node = _firstNode; node; node = node->next) {
   d60da:	b134      	cbz	r4, d60ea <_ZNK11ArduinoJson10JsonObject9getNodeAtEPKc+0x16>
    if (!strcmp(node->content.key, key)) return node;
   d60dc:	4629      	mov	r1, r5
   d60de:	68a0      	ldr	r0, [r4, #8]
   d60e0:	f004 f976 	bl	da3d0 <strcmp>
   d60e4:	b108      	cbz	r0, d60ea <_ZNK11ArduinoJson10JsonObject9getNodeAtEPKc+0x16>
  add(key, object);
  return object;
}

JsonObject::node_type *JsonObject::getNodeAt(const char *key) const {
  for (node_type *node = _firstNode; node; node = node->next) {
   d60e6:	6824      	ldr	r4, [r4, #0]
   d60e8:	e7f7      	b.n	d60da <_ZNK11ArduinoJson10JsonObject9getNodeAtEPKc+0x6>
    if (!strcmp(node->content.key, key)) return node;
  }
  return NULL;
}
   d60ea:	4620      	mov	r0, r4
   d60ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d60f0 <_ZN11ArduinoJson10JsonObjectixEPKc>:
const JsonVariant &JsonObject::at(const char *key) const {
  node_type *node = getNodeAt(key);
  return node ? node->content.value : JsonVariant::invalid();
}

JsonVariant &JsonObject::operator[](const char *key) {
   d60f0:	b538      	push	{r3, r4, r5, lr}
   d60f2:	4604      	mov	r4, r0
   d60f4:	460d      	mov	r5, r1
  // try to find an existing node
  node_type *node = getNodeAt(key);
   d60f6:	f7ff ffed 	bl	d60d4 <_ZNK11ArduinoJson10JsonObject9getNodeAtEPKc>

  // not fount => create a new one
  if (!node) {
   d60fa:	b9a0      	cbnz	r0, d6126 <_ZN11ArduinoJson10JsonObjectixEPKc+0x36>
   d60fc:	6820      	ldr	r0, [r4, #0]
  const_iterator begin() const { return const_iterator(_firstNode); }
  const_iterator end() const { return const_iterator(NULL); }

 protected:
  node_type *createNode() {
    if (!_buffer) return NULL;
   d60fe:	b1a0      	cbz	r0, d612a <_ZN11ArduinoJson10JsonObjectixEPKc+0x3a>
   d6100:	6803      	ldr	r3, [r0, #0]
   d6102:	2120      	movs	r1, #32
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	4798      	blx	r3
    return new (_buffer) node_type();
   d6108:	b178      	cbz	r0, d612a <_ZN11ArduinoJson10JsonObjectixEPKc+0x3a>
   d610a:	2300      	movs	r3, #0
   d610c:	6003      	str	r3, [r0, #0]
// - a string (const char*)
// - a reference to a JsonArray or JsonObject
class JsonVariant : public Internals::JsonPrintable<JsonVariant> {
 public:
  // Creates an uninitialized JsonVariant
  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}
   d610e:	2301      	movs	r3, #1
   d6110:	7403      	strb	r3, [r0, #16]
    node = createNode();
    if (!node) return JsonVariant::invalid();

    node->content.key = key;
   d6112:	6085      	str	r5, [r0, #8]
  }

  void addNode(node_type *nodeToAdd) {
    if (_firstNode) {
   d6114:	6863      	ldr	r3, [r4, #4]
   d6116:	b12b      	cbz	r3, d6124 <_ZN11ArduinoJson10JsonObjectixEPKc+0x34>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
   d6118:	681a      	ldr	r2, [r3, #0]
   d611a:	b10a      	cbz	r2, d6120 <_ZN11ArduinoJson10JsonObjectixEPKc+0x30>
   d611c:	4613      	mov	r3, r2
   d611e:	e7fb      	b.n	d6118 <_ZN11ArduinoJson10JsonObjectixEPKc+0x28>
      lastNode->next = nodeToAdd;
   d6120:	6018      	str	r0, [r3, #0]
   d6122:	e000      	b.n	d6126 <_ZN11ArduinoJson10JsonObjectixEPKc+0x36>
    } else {
      _firstNode = nodeToAdd;
   d6124:	6060      	str	r0, [r4, #4]
    addNode(node);
  }

  return node->content.value;
   d6126:	3010      	adds	r0, #16
   d6128:	bd38      	pop	{r3, r4, r5, pc}
  node_type *node = getNodeAt(key);

  // not fount => create a new one
  if (!node) {
    node = createNode();
    if (!node) return JsonVariant::invalid();
   d612a:	4801      	ldr	r0, [pc, #4]	; (d6130 <_ZN11ArduinoJson10JsonObjectixEPKc+0x40>)
    node->content.key = key;
    addNode(node);
  }

  return node->content.value;
}
   d612c:	bd38      	pop	{r3, r4, r5, pc}
   d612e:	bf00      	nop
   d6130:	2003e260 	.word	0x2003e260

000d6134 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE>:

    writer.writeComma();
  }

  writer.endObject();
}
   d6134:	b508      	push	{r3, lr}
   d6136:	f000 f88d 	bl	d6254 <HAL_Pin_Map>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE+0x10>)
   d613c:	2200      	movs	r2, #0
   d613e:	601a      	str	r2, [r3, #0]
   d6140:	605a      	str	r2, [r3, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	2003e258 	.word	0x2003e258

000d6148 <_ZN11ArduinoJson10JsonBuffer11createArrayEv>:
#include "JsonObject.h"

using namespace ArduinoJson;
using namespace ArduinoJson::Internals;

JsonArray &JsonBuffer::createArray() {
   d6148:	b510      	push	{r4, lr}
   d614a:	6803      	ldr	r3, [r0, #0]
   d614c:	2108      	movs	r1, #8
   d614e:	681b      	ldr	r3, [r3, #0]
   d6150:	4604      	mov	r4, r0
   d6152:	4798      	blx	r3
  JsonArray *ptr = new (this) JsonArray(this);
   d6154:	b118      	cbz	r0, d615e <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x16>
   d6156:	2300      	movs	r3, #0
   d6158:	6004      	str	r4, [r0, #0]
   d615a:	6043      	str	r3, [r0, #4]
   d615c:	bd10      	pop	{r4, pc}
  return ptr ? *ptr : JsonArray::invalid();
   d615e:	4801      	ldr	r0, [pc, #4]	; (d6164 <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x1c>)
}
   d6160:	bd10      	pop	{r4, pc}
   d6162:	bf00      	nop
   d6164:	2003e250 	.word	0x2003e250

000d6168 <_ZN11ArduinoJson10JsonBuffer12createObjectEv>:

JsonObject &JsonBuffer::createObject() {
   d6168:	b510      	push	{r4, lr}
   d616a:	6803      	ldr	r3, [r0, #0]
   d616c:	2108      	movs	r1, #8
   d616e:	681b      	ldr	r3, [r3, #0]
   d6170:	4604      	mov	r4, r0
   d6172:	4798      	blx	r3
  JsonObject *ptr = new (this) JsonObject(this);
   d6174:	b118      	cbz	r0, d617e <_ZN11ArduinoJson10JsonBuffer12createObjectEv+0x16>
   d6176:	2300      	movs	r3, #0
   d6178:	6004      	str	r4, [r0, #0]
   d617a:	6043      	str	r3, [r0, #4]
   d617c:	bd10      	pop	{r4, pc}
  return ptr ? *ptr : JsonObject::invalid();
   d617e:	4801      	ldr	r0, [pc, #4]	; (d6184 <_ZN11ArduinoJson10JsonBuffer12createObjectEv+0x1c>)
}
   d6180:	bd10      	pop	{r4, pc}
   d6182:	bf00      	nop
   d6184:	2003e258 	.word	0x2003e258

000d6188 <_ZN11ArduinoJson10JsonBuffer11parseObjectEPch>:
JsonArray &JsonBuffer::parseArray(char *json, uint8_t nestingLimit) {
  JsonParser parser(this, json, nestingLimit);
  return parser.parseArray();
}

JsonObject &JsonBuffer::parseObject(char *json, uint8_t nestingLimit) {
   d6188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
// This internal class is not indended to be used directly.
// Instead, use JsonBuffer.parseArray() or .parseObject()
class JsonParser {
 public:
  JsonParser(JsonBuffer *buffer, char *json, uint8_t nestingLimit)
      : _buffer(buffer), _ptr(json), _nestingLimit(nestingLimit) {}
   d618a:	9001      	str	r0, [sp, #4]
  JsonParser parser(this, json, nestingLimit);
  return parser.parseObject();
   d618c:	a801      	add	r0, sp, #4
   d618e:	9102      	str	r1, [sp, #8]
   d6190:	f88d 200c 	strb.w	r2, [sp, #12]
   d6194:	f7ff fe76 	bl	d5e84 <_ZN11ArduinoJson9Internals10JsonParser11parseObjectEv>
}
   d6198:	b005      	add	sp, #20
   d619a:	f85d fb04 	ldr.w	pc, [sp], #4

000d619e <_GLOBAL__sub_I__ZN11ArduinoJson10JsonBuffer11createArrayEv>:
   d619e:	f000 b859 	b.w	d6254 <HAL_Pin_Map>

000d61a2 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13StringBuilder5writeEh>:
   d61a2:	f000 b857 	b.w	d6254 <HAL_Pin_Map>
	...

000d61a8 <_ZNK11ArduinoJson11JsonVariantcvdEv>:
JsonVariant::operator const char *() const {
  return _type == JSON_STRING ? _content.asString : NULL;
}

JsonVariant::operator double() const {
  return _type >= JSON_DOUBLE_0_DECIMALS ? _content.asDouble : 0;
   d61a8:	7803      	ldrb	r3, [r0, #0]
   d61aa:	2b06      	cmp	r3, #6
   d61ac:	d902      	bls.n	d61b4 <_ZNK11ArduinoJson11JsonVariantcvdEv+0xc>
   d61ae:	ed90 0b02 	vldr	d0, [r0, #8]
   d61b2:	4770      	bx	lr
   d61b4:	ed9f 0b02 	vldr	d0, [pc, #8]	; d61c0 <_ZNK11ArduinoJson11JsonVariantcvdEv+0x18>
}
   d61b8:	4770      	bx	lr
   d61ba:	bf00      	nop
   d61bc:	f3af 8000 	nop.w
	...

000d61c8 <_ZNK11ArduinoJson11JsonVariantcvlEv>:

JsonVariant::operator long() const {
  return _type == JSON_LONG ? _content.asLong : 0;
   d61c8:	7803      	ldrb	r3, [r0, #0]
   d61ca:	2b06      	cmp	r3, #6
   d61cc:	bf0c      	ite	eq
   d61ce:	6880      	ldreq	r0, [r0, #8]
   d61d0:	2000      	movne	r0, #0
}
   d61d2:	4770      	bx	lr

000d61d4 <_ZN11ArduinoJson11JsonVariant3setEb>:

void JsonVariant::set(bool value) {
  if (_type == JSON_INVALID) return;
   d61d4:	7803      	ldrb	r3, [r0, #0]
   d61d6:	b113      	cbz	r3, d61de <_ZN11ArduinoJson11JsonVariant3setEb+0xa>
  _type = Internals::JSON_BOOLEAN;
   d61d8:	2304      	movs	r3, #4
   d61da:	7003      	strb	r3, [r0, #0]
  _content.asBoolean = value;
   d61dc:	7201      	strb	r1, [r0, #8]
   d61de:	4770      	bx	lr

000d61e0 <_ZN11ArduinoJson11JsonVariant3setEPKc>:
}

void JsonVariant::set(const char *value) {
  if (_type == JSON_INVALID) return;
   d61e0:	7803      	ldrb	r3, [r0, #0]
   d61e2:	b113      	cbz	r3, d61ea <_ZN11ArduinoJson11JsonVariant3setEPKc+0xa>
  _type = JSON_STRING;
   d61e4:	2305      	movs	r3, #5
   d61e6:	7003      	strb	r3, [r0, #0]
  _content.asString = value;
   d61e8:	6081      	str	r1, [r0, #8]
   d61ea:	4770      	bx	lr

000d61ec <_ZN11ArduinoJson11JsonVariant3setEdh>:
}

void JsonVariant::set(double value, uint8_t decimals) {
  if (_type == JSON_INVALID) return;
   d61ec:	7803      	ldrb	r3, [r0, #0]
   d61ee:	b11b      	cbz	r3, d61f8 <_ZN11ArduinoJson11JsonVariant3setEdh+0xc>
  _type = static_cast<JsonVariantType>(JSON_DOUBLE_0_DECIMALS + decimals);
  _content.asDouble = value;
   d61f0:	ed80 0b02 	vstr	d0, [r0, #8]
  _content.asString = value;
}

void JsonVariant::set(double value, uint8_t decimals) {
  if (_type == JSON_INVALID) return;
  _type = static_cast<JsonVariantType>(JSON_DOUBLE_0_DECIMALS + decimals);
   d61f4:	3107      	adds	r1, #7
   d61f6:	7001      	strb	r1, [r0, #0]
   d61f8:	4770      	bx	lr

000d61fa <_ZN11ArduinoJson11JsonVariant3setEl>:
  _content.asDouble = value;
}

void JsonVariant::set(long value) {
  if (_type == JSON_INVALID) return;
   d61fa:	7803      	ldrb	r3, [r0, #0]
   d61fc:	b113      	cbz	r3, d6204 <_ZN11ArduinoJson11JsonVariant3setEl+0xa>
  _type = JSON_LONG;
   d61fe:	2306      	movs	r3, #6
   d6200:	7003      	strb	r3, [r0, #0]
  _content.asLong = value;
   d6202:	6081      	str	r1, [r0, #8]
   d6204:	4770      	bx	lr

000d6206 <_ZN11ArduinoJson11JsonVariant3setERNS_9JsonArrayE>:
}

void JsonVariant::set(JsonArray &array) {
  if (_type == JSON_INVALID) return;
   d6206:	7803      	ldrb	r3, [r0, #0]
   d6208:	b113      	cbz	r3, d6210 <_ZN11ArduinoJson11JsonVariant3setERNS_9JsonArrayE+0xa>
  _type = JSON_ARRAY;
   d620a:	2302      	movs	r3, #2
   d620c:	7003      	strb	r3, [r0, #0]
  _content.asArray = &array;
   d620e:	6081      	str	r1, [r0, #8]
   d6210:	4770      	bx	lr

000d6212 <_ZN11ArduinoJson11JsonVariant3setERNS_10JsonObjectE>:
}

void JsonVariant::set(JsonObject &object) {
  if (_type == JSON_INVALID) return;
   d6212:	7803      	ldrb	r3, [r0, #0]
   d6214:	b113      	cbz	r3, d621c <_ZN11ArduinoJson11JsonVariant3setERNS_10JsonObjectE+0xa>
  _type = JSON_OBJECT;
   d6216:	2303      	movs	r3, #3
   d6218:	7003      	strb	r3, [r0, #0]
  _content.asObject = &object;
   d621a:	6081      	str	r1, [r0, #8]
   d621c:	4770      	bx	lr
	...

000d6220 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE>:
    writer.writeBoolean(as<bool>());
  else if (is<double>()) {
    uint8_t decimals = static_cast<uint8_t>(_type - JSON_DOUBLE_0_DECIMALS);
    writer.writeDouble(as<double>(), decimals);
  }
}
   d6220:	b508      	push	{r3, lr}
   d6222:	f000 f817 	bl	d6254 <HAL_Pin_Map>
  // Return JsonVariant::invalid() if the variant is not an object.
  JsonVariant &operator[](const char *key);

 private:
  // Special constructor used only to create _invalid.
  explicit JsonVariant(Internals::JsonVariantType type) : _type(type) {}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE+0x10>)
   d6228:	2200      	movs	r2, #0
   d622a:	701a      	strb	r2, [r3, #0]
   d622c:	bd08      	pop	{r3, pc}
   d622e:	bf00      	nop
   d6230:	2003e260 	.word	0x2003e260

000d6234 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <netdb_freeaddrinfo+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	689b      	ldr	r3, [r3, #8]
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030268 	.word	0x00030268

000d6244 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <netdb_getaddrinfo+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	68db      	ldr	r3, [r3, #12]
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	00030268 	.word	0x00030268

000d6254 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <HAL_Pin_Map+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	681b      	ldr	r3, [r3, #0]
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	0003022c 	.word	0x0003022c

000d6264 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <HAL_Validate_Pin_Function+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	685b      	ldr	r3, [r3, #4]
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	0003022c 	.word	0x0003022c

000d6274 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <HAL_Pin_Mode+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	689b      	ldr	r3, [r3, #8]
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	0003022c 	.word	0x0003022c

000d6284 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <HAL_Get_Pin_Mode+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	68db      	ldr	r3, [r3, #12]
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	0003022c 	.word	0x0003022c

000d6294 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <HAL_GPIO_Write+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	691b      	ldr	r3, [r3, #16]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	0003022c 	.word	0x0003022c

000d62a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <HAL_GPIO_Read+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	695b      	ldr	r3, [r3, #20]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	0003022c 	.word	0x0003022c

000d62b4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <HAL_ADC_Read+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	0003022c 	.word	0x0003022c

000d62c4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <HAL_SPI_Begin+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	681b      	ldr	r3, [r3, #0]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030230 	.word	0x00030230

000d62d4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <HAL_SPI_Set_Bit_Order+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	689b      	ldr	r3, [r3, #8]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030230 	.word	0x00030230

000d62e4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <HAL_SPI_Set_Data_Mode+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	68db      	ldr	r3, [r3, #12]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030230 	.word	0x00030230

000d62f4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <HAL_SPI_Set_Clock_Divider+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	691b      	ldr	r3, [r3, #16]
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030230 	.word	0x00030230

000d6304 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <HAL_SPI_Send_Receive_Data+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	695b      	ldr	r3, [r3, #20]
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030230 	.word	0x00030230

000d6314 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <HAL_SPI_Init+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	69db      	ldr	r3, [r3, #28]
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030230 	.word	0x00030230

000d6324 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <HAL_SPI_Is_Enabled+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	6a1b      	ldr	r3, [r3, #32]
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030230 	.word	0x00030230

000d6334 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <HAL_SPI_Info+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	00030230 	.word	0x00030230

000d6344 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <if_name_to_index+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	691b      	ldr	r3, [r3, #16]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	0003026c 	.word	0x0003026c

000d6354 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <if_index_to_name+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	695b      	ldr	r3, [r3, #20]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	0003026c 	.word	0x0003026c

000d6364 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <if_get_by_index+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	699b      	ldr	r3, [r3, #24]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	0003026c 	.word	0x0003026c

000d6374 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <if_get_addrs+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	0003026c 	.word	0x0003026c

000d6384 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <if_free_if_addrs+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	0003026c 	.word	0x0003026c

000d6394 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <HAL_RNG_GetRandomNumber+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	685b      	ldr	r3, [r3, #4]
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	00030218 	.word	0x00030218

000d63a4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <HAL_Delay_Milliseconds+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	689b      	ldr	r3, [r3, #8]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	00030218 	.word	0x00030218

000d63b4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <HAL_Delay_Microseconds+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	68db      	ldr	r3, [r3, #12]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	00030218 	.word	0x00030218

000d63c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	695b      	ldr	r3, [r3, #20]
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030218 	.word	0x00030218

000d63d4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <HAL_RTC_Get_UnixTime+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	69db      	ldr	r3, [r3, #28]
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	00030218 	.word	0x00030218

000d63e4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <HAL_RTC_Time_Is_Valid+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	00030218 	.word	0x00030218

000d63f4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <HAL_Feature_Set+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	00030234 	.word	0x00030234

000d6404 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <os_thread_create+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	685b      	ldr	r3, [r3, #4]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	00030248 	.word	0x00030248

000d6414 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <os_thread_is_current+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	689b      	ldr	r3, [r3, #8]
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	00030248 	.word	0x00030248

000d6424 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <os_thread_yield+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	68db      	ldr	r3, [r3, #12]
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	00030248 	.word	0x00030248

000d6434 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <os_thread_join+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	691b      	ldr	r3, [r3, #16]
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	00030248 	.word	0x00030248

000d6444 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <os_thread_cleanup+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	695b      	ldr	r3, [r3, #20]
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	00030248 	.word	0x00030248

000d6454 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <os_mutex_create+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030248 	.word	0x00030248

000d6464 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <os_mutex_recursive_create+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	00030248 	.word	0x00030248

000d6474 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <os_mutex_recursive_lock+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	00030248 	.word	0x00030248

000d6484 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <os_mutex_recursive_unlock+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	00030248 	.word	0x00030248

000d6494 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <os_thread_exit+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030248 	.word	0x00030248

000d64a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <inet_inet_ntop+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	695b      	ldr	r3, [r3, #20]
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	00030264 	.word	0x00030264

000d64b4 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <inet_inet_pton+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	699b      	ldr	r3, [r3, #24]
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	00030264 	.word	0x00030264

000d64c4 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <inet_htonl+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	6a1b      	ldr	r3, [r3, #32]
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	00030264 	.word	0x00030264

000d64d4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <inet_ntohs+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	00030264 	.word	0x00030264

000d64e4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <inet_htons+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	00030264 	.word	0x00030264

000d64f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <HAL_USART_Init+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	681b      	ldr	r3, [r3, #0]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	0003023c 	.word	0x0003023c

000d6504 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <HAL_USART_Write_Data+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	68db      	ldr	r3, [r3, #12]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	0003023c 	.word	0x0003023c

000d6514 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <HAL_USART_Available_Data+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	691b      	ldr	r3, [r3, #16]
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	0003023c 	.word	0x0003023c

000d6524 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <HAL_USART_Read_Data+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	695b      	ldr	r3, [r3, #20]
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	0003023c 	.word	0x0003023c

000d6534 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <HAL_USART_Peek_Data+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	699b      	ldr	r3, [r3, #24]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	0003023c 	.word	0x0003023c

000d6544 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <HAL_USART_Flush_Data+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	69db      	ldr	r3, [r3, #28]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	0003023c 	.word	0x0003023c

000d6554 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <HAL_USART_Is_Enabled+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	6a1b      	ldr	r3, [r3, #32]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	0003023c 	.word	0x0003023c

000d6564 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <HAL_USART_Available_Data_For_Write+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	0003023c 	.word	0x0003023c

000d6574 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_I2C_Begin+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	68db      	ldr	r3, [r3, #12]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030228 	.word	0x00030228

000d6584 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <HAL_I2C_Begin_Transmission+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	699b      	ldr	r3, [r3, #24]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030228 	.word	0x00030228

000d6594 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <HAL_I2C_End_Transmission+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	69db      	ldr	r3, [r3, #28]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030228 	.word	0x00030228

000d65a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <HAL_I2C_Write_Data+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	6a1b      	ldr	r3, [r3, #32]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030228 	.word	0x00030228

000d65b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <HAL_I2C_Available_Data+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030228 	.word	0x00030228

000d65c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <HAL_I2C_Read_Data+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	00030228 	.word	0x00030228

000d65d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_I2C_Peek_Data+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030228 	.word	0x00030228

000d65e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_I2C_Flush_Data+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030228 	.word	0x00030228

000d65f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_I2C_Is_Enabled+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	00030228 	.word	0x00030228

000d6604 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <HAL_I2C_Init+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	00030228 	.word	0x00030228

000d6614 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <sock_bind+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	685b      	ldr	r3, [r3, #4]
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030238 	.word	0x00030238

000d6624 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <sock_setsockopt+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	699b      	ldr	r3, [r3, #24]
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030238 	.word	0x00030238

000d6634 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <sock_close+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	69db      	ldr	r3, [r3, #28]
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030238 	.word	0x00030238

000d6644 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <sock_connect+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	6a1b      	ldr	r3, [r3, #32]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030238 	.word	0x00030238

000d6654 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <sock_recv+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030238 	.word	0x00030238

000d6664 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <sock_recvfrom+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030238 	.word	0x00030238

000d6674 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <sock_send+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030238 	.word	0x00030238

000d6684 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <sock_sendto+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030238 	.word	0x00030238

000d6694 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <sock_socket+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030238 	.word	0x00030238

000d66a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <HAL_USB_USART_Init+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	681b      	ldr	r3, [r3, #0]
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	0003024c 	.word	0x0003024c

000d66b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <HAL_USB_USART_Begin+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	685b      	ldr	r3, [r3, #4]
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	0003024c 	.word	0x0003024c

000d66c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <HAL_USB_USART_Available_Data+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	691b      	ldr	r3, [r3, #16]
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	0003024c 	.word	0x0003024c

000d66d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	695b      	ldr	r3, [r3, #20]
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	0003024c 	.word	0x0003024c

000d66e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <HAL_USB_USART_Receive_Data+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	699b      	ldr	r3, [r3, #24]
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	0003024c 	.word	0x0003024c

000d66f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <HAL_USB_USART_Send_Data+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	69db      	ldr	r3, [r3, #28]
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	0003024c 	.word	0x0003024c

000d6704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <HAL_USB_USART_Flush_Data+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	6a1b      	ldr	r3, [r3, #32]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	0003024c 	.word	0x0003024c

000d6714 <wlan_select_antenna>:
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <wlan_select_antenna+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	00030274 	.word	0x00030274

000d6724 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <panic_+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030260 	.word	0x00030260

000d6734 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <log_message+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	00030260 	.word	0x00030260

000d6744 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <system_mode+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	681b      	ldr	r3, [r3, #0]
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	00030220 	.word	0x00030220

000d6754 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <set_system_mode+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	685b      	ldr	r3, [r3, #4]
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	00030220 	.word	0x00030220

000d6764 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <system_delay_ms+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	695b      	ldr	r3, [r3, #20]
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	00030220 	.word	0x00030220

000d6774 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <system_sleep+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	699b      	ldr	r3, [r3, #24]
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	00030220 	.word	0x00030220

000d6784 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <application_thread_current+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	00030220 	.word	0x00030220

000d6794 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <application_thread_invoke+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	00030220 	.word	0x00030220

000d67a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <system_thread_get_state+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	00030220 	.word	0x00030220

000d67b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b03      	ldr	r3, [pc, #12]	; (d67c4 <system_ctrl_set_app_request_handler+0x10>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d67be:	9301      	str	r3, [sp, #4]
   d67c0:	bd08      	pop	{r3, pc}
   d67c2:	0000      	.short	0x0000
   d67c4:	00030220 	.word	0x00030220

000d67c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d67c8:	b508      	push	{r3, lr}
   d67ca:	4b03      	ldr	r3, [pc, #12]	; (d67d8 <system_ctrl_set_result+0x10>)
   d67cc:	681b      	ldr	r3, [r3, #0]
   d67ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d67d2:	9301      	str	r3, [sp, #4]
   d67d4:	bd08      	pop	{r3, pc}
   d67d6:	0000      	.short	0x0000
   d67d8:	00030220 	.word	0x00030220

000d67dc <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b03      	ldr	r3, [pc, #12]	; (d67ec <system_invoke_event_handler+0x10>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d67e6:	9301      	str	r3, [sp, #4]
   d67e8:	bd08      	pop	{r3, pc}
   d67ea:	0000      	.short	0x0000
   d67ec:	00030220 	.word	0x00030220

000d67f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <network_connect+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	685b      	ldr	r3, [r3, #4]
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	00030240 	.word	0x00030240

000d6800 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <network_connecting+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	689b      	ldr	r3, [r3, #8]
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	00030240 	.word	0x00030240

000d6810 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6810:	b508      	push	{r3, lr}
   d6812:	4b02      	ldr	r3, [pc, #8]	; (d681c <network_disconnect+0xc>)
   d6814:	681b      	ldr	r3, [r3, #0]
   d6816:	68db      	ldr	r3, [r3, #12]
   d6818:	9301      	str	r3, [sp, #4]
   d681a:	bd08      	pop	{r3, pc}
   d681c:	00030240 	.word	0x00030240

000d6820 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6820:	b508      	push	{r3, lr}
   d6822:	4b02      	ldr	r3, [pc, #8]	; (d682c <network_ready+0xc>)
   d6824:	681b      	ldr	r3, [r3, #0]
   d6826:	691b      	ldr	r3, [r3, #16]
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	bd08      	pop	{r3, pc}
   d682c:	00030240 	.word	0x00030240

000d6830 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6830:	b508      	push	{r3, lr}
   d6832:	4b02      	ldr	r3, [pc, #8]	; (d683c <network_on+0xc>)
   d6834:	681b      	ldr	r3, [r3, #0]
   d6836:	695b      	ldr	r3, [r3, #20]
   d6838:	9301      	str	r3, [sp, #4]
   d683a:	bd08      	pop	{r3, pc}
   d683c:	00030240 	.word	0x00030240

000d6840 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b02      	ldr	r3, [pc, #8]	; (d684c <network_off+0xc>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	699b      	ldr	r3, [r3, #24]
   d6848:	9301      	str	r3, [sp, #4]
   d684a:	bd08      	pop	{r3, pc}
   d684c:	00030240 	.word	0x00030240

000d6850 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b02      	ldr	r3, [pc, #8]	; (d685c <network_listen+0xc>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	69db      	ldr	r3, [r3, #28]
   d6858:	9301      	str	r3, [sp, #4]
   d685a:	bd08      	pop	{r3, pc}
   d685c:	00030240 	.word	0x00030240

000d6860 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <network_listening+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	6a1b      	ldr	r3, [r3, #32]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030240 	.word	0x00030240

000d6870 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <network_set_listen_timeout+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030240 	.word	0x00030240

000d6880 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <network_get_listen_timeout+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030240 	.word	0x00030240

000d6890 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <spark_process+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	689b      	ldr	r3, [r3, #8]
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030244 	.word	0x00030244

000d68a0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <spark_cloud_flag_connected+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	695b      	ldr	r3, [r3, #20]
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030244 	.word	0x00030244

000d68b0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <spark_deviceID+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	69db      	ldr	r3, [r3, #28]
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030244 	.word	0x00030244

000d68c0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <spark_send_event+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6a1b      	ldr	r3, [r3, #32]
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030244 	.word	0x00030244

000d68d0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <spark_sync_time+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030244 	.word	0x00030244

000d68e0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <spark_sync_time_pending+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	00030244 	.word	0x00030244

000d68f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	00030244 	.word	0x00030244

000d6900 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <malloc+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	681b      	ldr	r3, [r3, #0]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	0003021c 	.word	0x0003021c

000d6910 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <free+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	685b      	ldr	r3, [r3, #4]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	0003021c 	.word	0x0003021c

000d6920 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <realloc+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	689b      	ldr	r3, [r3, #8]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003021c 	.word	0x0003021c

000d6930 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <sprintf+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	68db      	ldr	r3, [r3, #12]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003021c 	.word	0x0003021c

000d6940 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <siprintf+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	691b      	ldr	r3, [r3, #16]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003021c 	.word	0x0003021c

000d6950 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <siscanf+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	699b      	ldr	r3, [r3, #24]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003021c 	.word	0x0003021c

000d6960 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <snprintf+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	69db      	ldr	r3, [r3, #28]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003021c 	.word	0x0003021c

000d6970 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <sniprintf+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	6a1b      	ldr	r3, [r3, #32]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003021c 	.word	0x0003021c

000d6980 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <vsnprintf+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	0003021c 	.word	0x0003021c

000d6990 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <abort+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	0003021c 	.word	0x0003021c

000d69a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <_malloc_r+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	0003021c 	.word	0x0003021c

000d69b0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <__errno+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	0003021c 	.word	0x0003021c

000d69c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69c0:	2200      	movs	r2, #0
   d69c2:	4611      	mov	r1, r2
   d69c4:	6840      	ldr	r0, [r0, #4]
   d69c6:	f7ff bf4b 	b.w	d6860 <network_listening>

000d69ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69ca:	2200      	movs	r2, #0
   d69cc:	4611      	mov	r1, r2
   d69ce:	6840      	ldr	r0, [r0, #4]
   d69d0:	f7ff bf56 	b.w	d6880 <network_get_listen_timeout>

000d69d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69d4:	2200      	movs	r2, #0
   d69d6:	6840      	ldr	r0, [r0, #4]
   d69d8:	f7ff bf4a 	b.w	d6870 <network_set_listen_timeout>

000d69dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69dc:	2200      	movs	r2, #0
   d69de:	f081 0101 	eor.w	r1, r1, #1
   d69e2:	6840      	ldr	r0, [r0, #4]
   d69e4:	f7ff bf34 	b.w	d6850 <network_listen>

000d69e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d69e8:	2300      	movs	r3, #0
   d69ea:	461a      	mov	r2, r3
   d69ec:	4619      	mov	r1, r3
   d69ee:	6840      	ldr	r0, [r0, #4]
   d69f0:	f7ff bf26 	b.w	d6840 <network_off>

000d69f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d69f4:	2300      	movs	r3, #0
   d69f6:	461a      	mov	r2, r3
   d69f8:	4619      	mov	r1, r3
   d69fa:	6840      	ldr	r0, [r0, #4]
   d69fc:	f7ff bf18 	b.w	d6830 <network_on>

000d6a00 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a00:	2200      	movs	r2, #0
   d6a02:	4611      	mov	r1, r2
   d6a04:	6840      	ldr	r0, [r0, #4]
   d6a06:	f7ff bf0b 	b.w	d6820 <network_ready>

000d6a0a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a0a:	2200      	movs	r2, #0
   d6a0c:	4611      	mov	r1, r2
   d6a0e:	6840      	ldr	r0, [r0, #4]
   d6a10:	f7ff bef6 	b.w	d6800 <network_connecting>

000d6a14 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a14:	2200      	movs	r2, #0
   d6a16:	2102      	movs	r1, #2
   d6a18:	6840      	ldr	r0, [r0, #4]
   d6a1a:	f7ff bef9 	b.w	d6810 <network_disconnect>

000d6a1e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a1e:	2300      	movs	r3, #0
   d6a20:	461a      	mov	r2, r3
   d6a22:	6840      	ldr	r0, [r0, #4]
   d6a24:	f7ff bee4 	b.w	d67f0 <network_connect>

000d6a28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6a28:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6a2a:	2203      	movs	r2, #3
   d6a2c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6a2e:	4a02      	ldr	r2, [pc, #8]	; (d6a38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6a30:	601a      	str	r2, [r3, #0]
   d6a32:	4770      	bx	lr
   d6a34:	2003e270 	.word	0x2003e270
   d6a38:	000ddb24 	.word	0x000ddb24

000d6a3c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6a3c:	4770      	bx	lr

000d6a3e <_ZN8SPIClassD0Ev>:
   d6a3e:	b510      	push	{r4, lr}
   d6a40:	2110      	movs	r1, #16
   d6a42:	4604      	mov	r4, r0
   d6a44:	f002 fc0c 	bl	d9260 <_ZdlPvj>
   d6a48:	4620      	mov	r0, r4
   d6a4a:	bd10      	pop	{r4, pc}

000d6a4c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6a4c:	b570      	push	{r4, r5, r6, lr}
   d6a4e:	4b08      	ldr	r3, [pc, #32]	; (d6a70 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6a50:	6003      	str	r3, [r0, #0]
   d6a52:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6a54:	2500      	movs	r5, #0
   d6a56:	460e      	mov	r6, r1
   d6a58:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6a5c:	f7ff fcfa 	bl	d6454 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6a60:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6a62:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6a64:	f7ff fc56 	bl	d6314 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6a68:	60a5      	str	r5, [r4, #8]
}
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	bd70      	pop	{r4, r5, r6, pc}
   d6a6e:	bf00      	nop
   d6a70:	000ddb58 	.word	0x000ddb58

000d6a74 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6a78:	7900      	ldrb	r0, [r0, #4]
   d6a7a:	f7ff bc23 	b.w	d62c4 <HAL_SPI_Begin>

000d6a7e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6a7e:	7900      	ldrb	r0, [r0, #4]
   d6a80:	f7ff bc28 	b.w	d62d4 <HAL_SPI_Set_Bit_Order>

000d6a84 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d6a84:	7900      	ldrb	r0, [r0, #4]
   d6a86:	f7ff bc2d 	b.w	d62e4 <HAL_SPI_Set_Data_Mode>
	...

000d6a8c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d6a8c:	4a05      	ldr	r2, [pc, #20]	; (d6aa4 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d6a8e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d6a90:	5c99      	ldrb	r1, [r3, r2]
   d6a92:	4281      	cmp	r1, r0
   d6a94:	d002      	beq.n	d6a9c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d6a96:	3301      	adds	r3, #1
   d6a98:	2b08      	cmp	r3, #8
   d6a9a:	d1f9      	bne.n	d6a90 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d6a9c:	1c58      	adds	r0, r3, #1
}
   d6a9e:	b2c0      	uxtb	r0, r0
   d6aa0:	4770      	bx	lr
   d6aa2:	bf00      	nop
   d6aa4:	000ddb60 	.word	0x000ddb60

000d6aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6aa8:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d6aaa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6aac:	6018      	str	r0, [r3, #0]
   d6aae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d6ab0:	6818      	ldr	r0, [r3, #0]
   d6ab2:	4288      	cmp	r0, r1
   d6ab4:	b2e5      	uxtb	r5, r4
   d6ab6:	d906      	bls.n	d6ac6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6ab8:	3401      	adds	r4, #1
   d6aba:	2c08      	cmp	r4, #8
   d6abc:	d002      	beq.n	d6ac4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d6abe:	0840      	lsrs	r0, r0, #1
   d6ac0:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d6ac2:	e7f5      	b.n	d6ab0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6ac4:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6ac8:	5d5b      	ldrb	r3, [r3, r5]
   d6aca:	7013      	strb	r3, [r2, #0]
   d6acc:	bd30      	pop	{r4, r5, pc}
   d6ace:	bf00      	nop
   d6ad0:	000ddb60 	.word	0x000ddb60

000d6ad4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6ad4:	b570      	push	{r4, r5, r6, lr}
   d6ad6:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d6ad8:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d6ada:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6ade:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6ae0:	2214      	movs	r2, #20
   d6ae2:	2100      	movs	r1, #0
   d6ae4:	a803      	add	r0, sp, #12
   d6ae6:	f003 fc27 	bl	da338 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d6aea:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6aec:	a903      	add	r1, sp, #12
   d6aee:	4630      	mov	r0, r6
   d6af0:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d6af2:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d6af6:	f7ff fc1d 	bl	d6334 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d6afa:	ab02      	add	r3, sp, #8
   d6afc:	f10d 0207 	add.w	r2, sp, #7
   d6b00:	4629      	mov	r1, r5
   d6b02:	9804      	ldr	r0, [sp, #16]
   d6b04:	f7ff ffd0 	bl	d6aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6b08:	7920      	ldrb	r0, [r4, #4]
   d6b0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6b0e:	f7ff fbf1 	bl	d62f4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d6b12:	9802      	ldr	r0, [sp, #8]
   d6b14:	b008      	add	sp, #32
   d6b16:	bd70      	pop	{r4, r5, r6, pc}

000d6b18 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6b18:	b538      	push	{r3, r4, r5, lr}
   d6b1a:	4604      	mov	r4, r0
   d6b1c:	4608      	mov	r0, r1
    if (dividerReference)
   d6b1e:	68a5      	ldr	r5, [r4, #8]
   d6b20:	b14d      	cbz	r5, d6b36 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d6b22:	f7ff ffb3 	bl	d6a8c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d6b26:	2201      	movs	r2, #1
   d6b28:	fa25 f100 	lsr.w	r1, r5, r0
   d6b2c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d6b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d6b32:	f7ff bfcf 	b.w	d6ad4 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6b36:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6b3c:	f7ff bbda 	b.w	d62f4 <HAL_SPI_Set_Clock_Divider>

000d6b40 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6b40:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d6b42:	7900      	ldrb	r0, [r0, #4]
   d6b44:	f7ff fbde 	bl	d6304 <HAL_SPI_Send_Receive_Data>
}
   d6b48:	b2c0      	uxtb	r0, r0
   d6b4a:	bd08      	pop	{r3, pc}

000d6b4c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6b4c:	7900      	ldrb	r0, [r0, #4]
   d6b4e:	f7ff bbe9 	b.w	d6324 <HAL_SPI_Is_Enabled>
	...

000d6b54 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d6b54:	b510      	push	{r4, lr}
   d6b56:	4604      	mov	r4, r0
   d6b58:	4608      	mov	r0, r1
   d6b5a:	4611      	mov	r1, r2
   d6b5c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d6b5e:	2300      	movs	r3, #0
   d6b60:	f7ff fe08 	bl	d6774 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d6b64:	4b06      	ldr	r3, [pc, #24]	; (d6b80 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d6b66:	2200      	movs	r2, #0
   d6b68:	701a      	strb	r2, [r3, #0]
   d6b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6b6e:	8058      	strh	r0, [r3, #2]
   d6b70:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d6b72:	681a      	ldr	r2, [r3, #0]
   d6b74:	889b      	ldrh	r3, [r3, #4]
   d6b76:	6022      	str	r2, [r4, #0]
   d6b78:	80a3      	strh	r3, [r4, #4]
}
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	bd10      	pop	{r4, pc}
   d6b7e:	bf00      	nop
   d6b80:	2003e278 	.word	0x2003e278

000d6b84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6b84:	4b04      	ldr	r3, [pc, #16]	; (d6b98 <_GLOBAL__sub_I_System+0x14>)
   d6b86:	2000      	movs	r0, #0
   d6b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6b8c:	7018      	strb	r0, [r3, #0]
   d6b8e:	8058      	strh	r0, [r3, #2]
   d6b90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6b92:	f7ff bddf 	b.w	d6754 <set_system_mode>
   d6b96:	bf00      	nop
   d6b98:	2003e278 	.word	0x2003e278

000d6b9c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6b9c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6b9e:	6804      	ldr	r4, [r0, #0]
   d6ba0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6ba2:	46a4      	mov	ip, r4
    }
   d6ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6ba8:	4760      	bx	ip

000d6baa <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6baa:	6803      	ldr	r3, [r0, #0]
   d6bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6bae:	4718      	bx	r3

000d6bb0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6bb0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6bb2:	4770      	bx	lr

000d6bb4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6bb4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6bb6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6bb8:	1a10      	subs	r0, r2, r0
   d6bba:	4770      	bx	lr

000d6bbc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6bbc:	b513      	push	{r0, r1, r4, lr}
   d6bbe:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6bc0:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6bc2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6bc6:	68d4      	ldr	r4, [r2, #12]
   d6bc8:	4619      	mov	r1, r3
   d6bca:	2201      	movs	r2, #1
   d6bcc:	47a0      	blx	r4
}
   d6bce:	b002      	add	sp, #8
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6bd2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6bd4:	6803      	ldr	r3, [r0, #0]
   d6bd6:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6bd8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6bda:	4798      	blx	r3
   d6bdc:	b128      	cbz	r0, d6bea <_ZN3UDP4readEv+0x18>
   d6bde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6be0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6be2:	1c59      	adds	r1, r3, #1
   d6be4:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6be6:	5cd0      	ldrb	r0, [r2, r3]
   d6be8:	bd10      	pop	{r4, pc}
   d6bea:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bee:	bd10      	pop	{r4, pc}

000d6bf0 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6bf0:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6bf2:	6803      	ldr	r3, [r0, #0]
   d6bf4:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6bf6:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6bf8:	4798      	blx	r3
   d6bfa:	b118      	cbz	r0, d6c04 <_ZN3UDP4peekEv+0x14>
   d6bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6bfe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6c00:	5cd0      	ldrb	r0, [r2, r3]
   d6c02:	bd10      	pop	{r4, pc}
   d6c04:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6c08:	bd10      	pop	{r4, pc}

000d6c0a <_ZN3UDP5flushEv>:

void UDP::flush() {
   d6c0a:	4770      	bx	lr

000d6c0c <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d6c0c:	b410      	push	{r4}
   d6c0e:	4603      	mov	r3, r0
   d6c10:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6c12:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d6c14:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d6c16:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d6c18:	6803      	ldr	r3, [r0, #0]
   d6c1a:	1a52      	subs	r2, r2, r1
   d6c1c:	68db      	ldr	r3, [r3, #12]
   d6c1e:	4421      	add	r1, r4
}
   d6c20:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6c24:	4718      	bx	r3

000d6c26 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d6c26:	f1a0 0010 	sub.w	r0, r0, #16
   d6c2a:	f7ff bfef 	b.w	d6c0c <_ZNK3UDP7printToER5Print>

000d6c2e <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d6c30:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6c32:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6c34:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d6c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6c38:	4604      	mov	r4, r0
   d6c3a:	460f      	mov	r7, r1
   d6c3c:	4615      	mov	r5, r2
    stop();
   d6c3e:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d6c40:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6c42:	4632      	mov	r2, r6
   d6c44:	2100      	movs	r1, #0
   d6c46:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d6c48:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6c4a:	f003 fb75 	bl	da338 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6c4e:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6c52:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d6c54:	260a      	movs	r6, #10
   d6c56:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d6c5a:	f7ff fc43 	bl	d64e4 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c5e:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6c60:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c64:	2102      	movs	r1, #2
   d6c66:	4630      	mov	r0, r6
   d6c68:	f7ff fd14 	bl	d6694 <sock_socket>

    if (_sock < 0) {
   d6c6c:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c6e:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6c70:	db24      	blt.n	d6cbc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6c72:	2204      	movs	r2, #4
   d6c74:	9200      	str	r2, [sp, #0]
   d6c76:	ab02      	add	r3, sp, #8
   d6c78:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6c7c:	f7ff fcd2 	bl	d6624 <sock_setsockopt>
   d6c80:	b9e0      	cbnz	r0, d6cbc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6c82:	b195      	cbz	r5, d6caa <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6c84:	9003      	str	r0, [sp, #12]
   d6c86:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6c8a:	a903      	add	r1, sp, #12
   d6c8c:	b2e8      	uxtb	r0, r5
   d6c8e:	f7ff fb61 	bl	d6354 <if_index_to_name>
   d6c92:	b998      	cbnz	r0, d6cbc <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6c94:	2306      	movs	r3, #6
   d6c96:	9300      	str	r3, [sp, #0]
   d6c98:	f241 020b 	movw	r2, #4107	; 0x100b
   d6c9c:	ab03      	add	r3, sp, #12
   d6c9e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6ca2:	6960      	ldr	r0, [r4, #20]
   d6ca4:	f7ff fcbe 	bl	d6624 <sock_setsockopt>
   d6ca8:	b940      	cbnz	r0, d6cbc <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6caa:	221c      	movs	r2, #28
   d6cac:	a905      	add	r1, sp, #20
   d6cae:	6960      	ldr	r0, [r4, #20]
   d6cb0:	f7ff fcb0 	bl	d6614 <sock_bind>
   d6cb4:	b910      	cbnz	r0, d6cbc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d6cb6:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6cb8:	2001      	movs	r0, #1
   d6cba:	e004      	b.n	d6cc6 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6cbc:	6823      	ldr	r3, [r4, #0]
   d6cbe:	4620      	mov	r0, r4
   d6cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cc2:	4798      	blx	r3
   d6cc4:	2000      	movs	r0, #0
    }
    return bound;
}
   d6cc6:	b00d      	add	sp, #52	; 0x34
   d6cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6cca <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6cca:	b510      	push	{r4, lr}
   d6ccc:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6cce:	6940      	ldr	r0, [r0, #20]
   d6cd0:	2800      	cmp	r0, #0
   d6cd2:	db01      	blt.n	d6cd8 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6cd4:	f7ff fcae 	bl	d6634 <sock_close>
    }

    _sock = -1;
   d6cd8:	f04f 33ff 	mov.w	r3, #4294967295
   d6cdc:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6cde:	2300      	movs	r3, #0
   d6ce0:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6ce2:	8723      	strh	r3, [r4, #56]	; 0x38
   d6ce4:	bd10      	pop	{r4, pc}

000d6ce6 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6ce6:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6ce8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6cea:	4605      	mov	r5, r0
   d6cec:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6cee:	b113      	cbz	r3, d6cf6 <_ZN3UDP5writeEPKhj+0x10>
   d6cf0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6cf2:	1a24      	subs	r4, r4, r0
   d6cf4:	e000      	b.n	d6cf8 <_ZN3UDP5writeEPKhj+0x12>
   d6cf6:	461c      	mov	r4, r3
   d6cf8:	4294      	cmp	r4, r2
   d6cfa:	bf28      	it	cs
   d6cfc:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6cfe:	4622      	mov	r2, r4
   d6d00:	4418      	add	r0, r3
   d6d02:	f003 fb0e 	bl	da322 <memcpy>
    _offset += size;
   d6d06:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6d08:	4423      	add	r3, r4
   d6d0a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6d0c:	4620      	mov	r0, r4
   d6d0e:	bd38      	pop	{r3, r4, r5, pc}

000d6d10 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6d10:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d6d12:	6803      	ldr	r3, [r0, #0]
   d6d14:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6d16:	4604      	mov	r4, r0
   d6d18:	460e      	mov	r6, r1
   d6d1a:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6d1c:	4798      	blx	r3
   d6d1e:	b188      	cbz	r0, d6d44 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6d20:	6823      	ldr	r3, [r4, #0]
   d6d22:	4620      	mov	r0, r4
   d6d24:	691b      	ldr	r3, [r3, #16]
   d6d26:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6d28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6d2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6d2c:	4285      	cmp	r5, r0
   d6d2e:	bfa8      	it	ge
   d6d30:	4605      	movge	r5, r0
   d6d32:	4419      	add	r1, r3
   d6d34:	462a      	mov	r2, r5
   d6d36:	4630      	mov	r0, r6
   d6d38:	f003 faf3 	bl	da322 <memcpy>
        _offset += read;
   d6d3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6d3e:	442b      	add	r3, r5
   d6d40:	86e3      	strh	r3, [r4, #54]	; 0x36
   d6d42:	e001      	b.n	d6d48 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d6d44:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d6d48:	4628      	mov	r0, r5
   d6d4a:	bd70      	pop	{r4, r5, r6, pc}

000d6d4c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6d4c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d4e:	4604      	mov	r4, r0
   d6d50:	4b05      	ldr	r3, [pc, #20]	; (d6d68 <_ZN3UDP8remoteIPEv+0x1c>)
   d6d52:	f844 3b04 	str.w	r3, [r4], #4
   d6d56:	f101 0520 	add.w	r5, r1, #32
   d6d5a:	4606      	mov	r6, r0
   d6d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d60:	682b      	ldr	r3, [r5, #0]
   d6d62:	7023      	strb	r3, [r4, #0]
   d6d64:	4630      	mov	r0, r6
   d6d66:	bd70      	pop	{r4, r5, r6, pc}
   d6d68:	000ddcfc 	.word	0x000ddcfc

000d6d6c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d6e:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d70:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d72:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d74:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6d76:	4a0a      	ldr	r2, [pc, #40]	; (d6da0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6d78:	9202      	str	r2, [sp, #8]
   d6d7a:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d7c:	468e      	mov	lr, r1
   d6d7e:	4606      	mov	r6, r0
   d6d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d82:	ac03      	add	r4, sp, #12
   d6d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d86:	682b      	ldr	r3, [r5, #0]
   d6d88:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6d8e:	9300      	str	r3, [sp, #0]
   d6d90:	4662      	mov	r2, ip
   d6d92:	ab02      	add	r3, sp, #8
   d6d94:	4671      	mov	r1, lr
   d6d96:	4630      	mov	r0, r6
   d6d98:	47b8      	blx	r7
    }
   d6d9a:	b009      	add	sp, #36	; 0x24
   d6d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d9e:	bf00      	nop
   d6da0:	000ddcfc 	.word	0x000ddcfc

000d6da4 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6da6:	6803      	ldr	r3, [r0, #0]
   d6da8:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6dac:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6dae:	4b0d      	ldr	r3, [pc, #52]	; (d6de4 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6db0:	b089      	sub	sp, #36	; 0x24
   d6db2:	f100 0620 	add.w	r6, r0, #32
   d6db6:	4604      	mov	r4, r0
   d6db8:	9302      	str	r3, [sp, #8]
   d6dba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6dbc:	ad03      	add	r5, sp, #12
   d6dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6dc0:	6833      	ldr	r3, [r6, #0]
   d6dc2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6dc4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6dc6:	9300      	str	r3, [sp, #0]
   d6dc8:	4672      	mov	r2, lr
   d6dca:	ab02      	add	r3, sp, #8
   d6dcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6dce:	4620      	mov	r0, r4
   d6dd0:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6dd2:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6dd4:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6dd6:	69db      	ldr	r3, [r3, #28]
   d6dd8:	4620      	mov	r0, r4
   d6dda:	4798      	blx	r3
    return result;
}
   d6ddc:	4628      	mov	r0, r5
   d6dde:	b009      	add	sp, #36	; 0x24
   d6de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6de2:	bf00      	nop
   d6de4:	000ddcfc 	.word	0x000ddcfc

000d6de8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6dea:	7843      	ldrb	r3, [r0, #1]
   d6dec:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6dee:	b08d      	sub	sp, #52	; 0x34
   d6df0:	4605      	mov	r5, r0
   d6df2:	460c      	mov	r4, r1
   d6df4:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6df6:	d101      	bne.n	d6dfc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6df8:	1d01      	adds	r1, r0, #4
   d6dfa:	e033      	b.n	d6e64 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6dfc:	2b0a      	cmp	r3, #10
   d6dfe:	d135      	bne.n	d6e6c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6e00:	2211      	movs	r2, #17
   d6e02:	2100      	movs	r1, #0
   d6e04:	a801      	add	r0, sp, #4
   d6e06:	f003 fa97 	bl	da338 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6e0a:	68ab      	ldr	r3, [r5, #8]
   d6e0c:	b943      	cbnz	r3, d6e20 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6e0e:	68eb      	ldr	r3, [r5, #12]
   d6e10:	b933      	cbnz	r3, d6e20 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6e12:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6e16:	692e      	ldr	r6, [r5, #16]
   d6e18:	f7ff fb54 	bl	d64c4 <inet_htonl>
   d6e1c:	4286      	cmp	r6, r0
   d6e1e:	d01f      	beq.n	d6e60 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e20:	f105 0308 	add.w	r3, r5, #8
   d6e24:	ae01      	add	r6, sp, #4
   d6e26:	f105 0e18 	add.w	lr, r5, #24
   d6e2a:	6818      	ldr	r0, [r3, #0]
   d6e2c:	6859      	ldr	r1, [r3, #4]
   d6e2e:	4632      	mov	r2, r6
   d6e30:	c203      	stmia	r2!, {r0, r1}
   d6e32:	3308      	adds	r3, #8
   d6e34:	4573      	cmp	r3, lr
   d6e36:	4616      	mov	r6, r2
   d6e38:	d1f7      	bne.n	d6e2a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6e3a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6e3c:	a901      	add	r1, sp, #4
   d6e3e:	a806      	add	r0, sp, #24
   d6e40:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6e42:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6e46:	f001 f863 	bl	d7f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6e4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6e4c:	3404      	adds	r4, #4
   d6e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e50:	6833      	ldr	r3, [r6, #0]
   d6e52:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6e54:	b157      	cbz	r7, d6e6c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d6e56:	8868      	ldrh	r0, [r5, #2]
   d6e58:	f7ff fb3c 	bl	d64d4 <inet_ntohs>
   d6e5c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6e5e:	e005      	b.n	d6e6c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6e60:	f105 0114 	add.w	r1, r5, #20
   d6e64:	4620      	mov	r0, r4
   d6e66:	f001 f888 	bl	d7f7a <_ZN9IPAddressaSEPKh>
   d6e6a:	e7f3      	b.n	d6e54 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6e6c:	b00d      	add	sp, #52	; 0x34
   d6e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e70 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e74:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6e76:	ab0e      	add	r3, sp, #56	; 0x38
   d6e78:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6e7a:	4606      	mov	r6, r0
   d6e7c:	4617      	mov	r7, r2
   d6e7e:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6e80:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6e84:	462a      	mov	r2, r5
   d6e86:	4629      	mov	r1, r5
   d6e88:	f7ff f9dc 	bl	d6244 <netdb_getaddrinfo>
   d6e8c:	2800      	cmp	r0, #0
   d6e8e:	db1f      	blt.n	d6ed0 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6e90:	9b01      	ldr	r3, [sp, #4]
   d6e92:	b1fb      	cbz	r3, d6ed4 <_ZN3UDP11beginPacketEPKct+0x64>
   d6e94:	695b      	ldr	r3, [r3, #20]
   d6e96:	b1eb      	cbz	r3, d6ed4 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6e98:	a802      	add	r0, sp, #8
   d6e9a:	f001 f82b 	bl	d7ef4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6e9e:	9b01      	ldr	r3, [sp, #4]
   d6ea0:	462a      	mov	r2, r5
   d6ea2:	6958      	ldr	r0, [r3, #20]
   d6ea4:	a902      	add	r1, sp, #8
   d6ea6:	f7ff ff9f 	bl	d6de8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6eaa:	a802      	add	r0, sp, #8
   d6eac:	f001 f842 	bl	d7f34 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6eb0:	b180      	cbz	r0, d6ed4 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6eb2:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6eb4:	ad03      	add	r5, sp, #12
   d6eb6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6eba:	4b0b      	ldr	r3, [pc, #44]	; (d6ee8 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6ebc:	9308      	str	r3, [sp, #32]
   d6ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ec0:	ac09      	add	r4, sp, #36	; 0x24
   d6ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ec4:	682b      	ldr	r3, [r5, #0]
   d6ec6:	7023      	strb	r3, [r4, #0]
   d6ec8:	463a      	mov	r2, r7
   d6eca:	a908      	add	r1, sp, #32
   d6ecc:	4630      	mov	r0, r6
   d6ece:	47c0      	blx	r8
   d6ed0:	4604      	mov	r4, r0
   d6ed2:	e001      	b.n	d6ed8 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6ed4:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6ed8:	9801      	ldr	r0, [sp, #4]
   d6eda:	f7ff f9ab 	bl	d6234 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6ede:	4620      	mov	r0, r4
   d6ee0:	b00e      	add	sp, #56	; 0x38
   d6ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ee6:	bf00      	nop
   d6ee8:	000ddcfc 	.word	0x000ddcfc

000d6eec <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6ef0:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6ef4:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6ef8:	b08c      	sub	sp, #48	; 0x30
   d6efa:	4605      	mov	r5, r0
   d6efc:	460c      	mov	r4, r1
   d6efe:	4617      	mov	r7, r2
   d6f00:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6f02:	db00      	blt.n	d6f06 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6f04:	b911      	cbnz	r1, d6f0c <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6f06:	f04f 30ff 	mov.w	r0, #4294967295
   d6f0a:	e035      	b.n	d6f78 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6f0c:	f04f 0a1c 	mov.w	sl, #28
   d6f10:	ae05      	add	r6, sp, #20
   d6f12:	4652      	mov	r2, sl
   d6f14:	2100      	movs	r1, #0
   d6f16:	4630      	mov	r0, r6
   d6f18:	f003 fa0e 	bl	da338 <memset>
        socklen_t slen = sizeof(saddr);
   d6f1c:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d6f20:	f1b9 0f00 	cmp.w	r9, #0
   d6f24:	d014      	beq.n	d6f50 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d6f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6f2a:	fbb9 f1f2 	udiv	r1, r9, r2
   d6f2e:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6f30:	fb02 9111 	mls	r1, r2, r1, r9
   d6f34:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6f36:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d6f38:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6f3a:	9300      	str	r3, [sp, #0]
   d6f3c:	f241 0206 	movw	r2, #4102	; 0x1006
   d6f40:	ab03      	add	r3, sp, #12
   d6f42:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6f46:	4640      	mov	r0, r8
   d6f48:	f7ff fb6c 	bl	d6624 <sock_setsockopt>
            if (ret) {
   d6f4c:	b108      	cbz	r0, d6f52 <_ZN3UDP13receivePacketEPhjm+0x66>
   d6f4e:	e013      	b.n	d6f78 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d6f50:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6f52:	ab02      	add	r3, sp, #8
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	4621      	mov	r1, r4
   d6f58:	4603      	mov	r3, r0
   d6f5a:	9600      	str	r6, [sp, #0]
   d6f5c:	463a      	mov	r2, r7
   d6f5e:	6968      	ldr	r0, [r5, #20]
   d6f60:	f7ff fb80 	bl	d6664 <sock_recvfrom>
        if (ret >= 0) {
   d6f64:	1e04      	subs	r4, r0, #0
   d6f66:	db06      	blt.n	d6f76 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6f68:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6f6c:	f105 011c 	add.w	r1, r5, #28
   d6f70:	4630      	mov	r0, r6
   d6f72:	f7ff ff39 	bl	d6de8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6f76:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6f78:	b00c      	add	sp, #48	; 0x30
   d6f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6f7e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6f7e:	b538      	push	{r3, r4, r5, lr}
   d6f80:	4605      	mov	r5, r0
   d6f82:	4614      	mov	r4, r2
   d6f84:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6f86:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6f88:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6f8a:	d111      	bne.n	d6fb0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6f8c:	231c      	movs	r3, #28
   d6f8e:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6f90:	230a      	movs	r3, #10
   d6f92:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6f94:	f7ff faa6 	bl	d64e4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6f98:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6f9a:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6f9e:	1d2b      	adds	r3, r5, #4
   d6fa0:	3514      	adds	r5, #20
   d6fa2:	f853 2b04 	ldr.w	r2, [r3], #4
   d6fa6:	f844 2b04 	str.w	r2, [r4], #4
   d6faa:	42ab      	cmp	r3, r5
   d6fac:	d1f9      	bne.n	d6fa2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6fae:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6fb0:	2b04      	cmp	r3, #4
   d6fb2:	d10a      	bne.n	d6fca <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6fb4:	2310      	movs	r3, #16
   d6fb6:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6fb8:	2302      	movs	r3, #2
   d6fba:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6fbc:	f7ff fa92 	bl	d64e4 <inet_htons>
   d6fc0:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6fc2:	6868      	ldr	r0, [r5, #4]
   d6fc4:	f7ff fa7e 	bl	d64c4 <inet_htonl>
   d6fc8:	6060      	str	r0, [r4, #4]
   d6fca:	bd38      	pop	{r3, r4, r5, pc}

000d6fcc <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fd0:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6fd2:	ac03      	add	r4, sp, #12
   d6fd4:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6fd6:	4699      	mov	r9, r3
   d6fd8:	4606      	mov	r6, r0
   d6fda:	460f      	mov	r7, r1
   d6fdc:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6fde:	2100      	movs	r1, #0
   d6fe0:	462a      	mov	r2, r5
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	f003 f9a8 	bl	da338 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6fe8:	4622      	mov	r2, r4
   d6fea:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6fee:	4648      	mov	r0, r9
   d6ff0:	f7ff ffc5 	bl	d6f7e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6ff4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6ff8:	b143      	cbz	r3, d700c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6ffa:	e88d 0030 	stmia.w	sp, {r4, r5}
   d6ffe:	2300      	movs	r3, #0
   d7000:	4642      	mov	r2, r8
   d7002:	4639      	mov	r1, r7
   d7004:	6970      	ldr	r0, [r6, #20]
   d7006:	f7ff fb3d 	bl	d6684 <sock_sendto>
   d700a:	e001      	b.n	d7010 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d700c:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d7010:	b00b      	add	sp, #44	; 0x2c
   d7012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7016 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7016:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7018:	b091      	sub	sp, #68	; 0x44
   d701a:	460c      	mov	r4, r1
   d701c:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d701e:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7020:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d7022:	a809      	add	r0, sp, #36	; 0x24
   d7024:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7026:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d7028:	f003 f986 	bl	da338 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d702c:	aa09      	add	r2, sp, #36	; 0x24
   d702e:	2100      	movs	r1, #0
   d7030:	4620      	mov	r0, r4
   d7032:	f7ff ffa4 	bl	d6f7e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d7036:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d703a:	2b02      	cmp	r3, #2
   d703c:	d12e      	bne.n	d709c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d703e:	2300      	movs	r3, #0
   d7040:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d7042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7044:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d7046:	b1dd      	cbz	r5, d7080 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d7048:	a902      	add	r1, sp, #8
   d704a:	4628      	mov	r0, r5
   d704c:	f7ff f98a 	bl	d6364 <if_get_by_index>
   d7050:	b9b0      	cbnz	r0, d7080 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d7052:	a910      	add	r1, sp, #64	; 0x40
   d7054:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d7058:	9802      	ldr	r0, [sp, #8]
   d705a:	f7ff f98b 	bl	d6374 <if_get_addrs>
   d705e:	b960      	cbnz	r0, d707a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7060:	9b03      	ldr	r3, [sp, #12]
   d7062:	b153      	cbz	r3, d707a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d7064:	68da      	ldr	r2, [r3, #12]
   d7066:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d7068:	7851      	ldrb	r1, [r2, #1]
   d706a:	2902      	cmp	r1, #2
   d706c:	d103      	bne.n	d7076 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d706e:	6852      	ldr	r2, [r2, #4]
   d7070:	b10a      	cbz	r2, d7076 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d7072:	9205      	str	r2, [sp, #20]
   d7074:	e001      	b.n	d707a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7076:	681b      	ldr	r3, [r3, #0]
   d7078:	e7f3      	b.n	d7062 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d707a:	9803      	ldr	r0, [sp, #12]
   d707c:	f7ff f982 	bl	d6384 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d7080:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d7082:	f04f 0308 	mov.w	r3, #8
   d7086:	9300      	str	r3, [sp, #0]
   d7088:	bf18      	it	ne
   d708a:	2203      	movne	r2, #3
   d708c:	ab04      	add	r3, sp, #16
   d708e:	bf08      	it	eq
   d7090:	2204      	moveq	r2, #4
   d7092:	2100      	movs	r1, #0
   d7094:	4630      	mov	r0, r6
   d7096:	f7ff fac5 	bl	d6624 <sock_setsockopt>
   d709a:	e01e      	b.n	d70da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d709c:	2b0a      	cmp	r3, #10
   d709e:	d11a      	bne.n	d70d6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d70a0:	ac04      	add	r4, sp, #16
   d70a2:	2214      	movs	r2, #20
   d70a4:	2100      	movs	r1, #0
   d70a6:	4620      	mov	r0, r4
   d70a8:	f003 f946 	bl	da338 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d70ac:	ab0b      	add	r3, sp, #44	; 0x2c
   d70ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d70b0:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d70b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d70b6:	f04f 0314 	mov.w	r3, #20
   d70ba:	9300      	str	r3, [sp, #0]
   d70bc:	bf18      	it	ne
   d70be:	220c      	movne	r2, #12
   d70c0:	4623      	mov	r3, r4
   d70c2:	bf08      	it	eq
   d70c4:	220d      	moveq	r2, #13
   d70c6:	2129      	movs	r1, #41	; 0x29
   d70c8:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d70ca:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d70cc:	f7ff faaa 	bl	d6624 <sock_setsockopt>
   d70d0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d70d4:	e001      	b.n	d70da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d70d6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d70da:	b011      	add	sp, #68	; 0x44
   d70dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d70e0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d70e0:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d70e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d70e6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d70e8:	4b0b      	ldr	r3, [pc, #44]	; (d7118 <_ZN3UDPC1Ev+0x38>)
   d70ea:	f103 0208 	add.w	r2, r3, #8
   d70ee:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d70f0:	2500      	movs	r5, #0
   d70f2:	6103      	str	r3, [r0, #16]
   d70f4:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d70f8:	4604      	mov	r4, r0
   d70fa:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d70fc:	6002      	str	r2, [r0, #0]
   d70fe:	6143      	str	r3, [r0, #20]
   d7100:	301c      	adds	r0, #28
   d7102:	f000 fef7 	bl	d7ef4 <_ZN9IPAddressC1Ev>
   d7106:	f44f 7300 	mov.w	r3, #512	; 0x200
   d710a:	86e5      	strh	r5, [r4, #54]	; 0x36
   d710c:	8725      	strh	r5, [r4, #56]	; 0x38
   d710e:	63e5      	str	r5, [r4, #60]	; 0x3c
   d7110:	6423      	str	r3, [r4, #64]	; 0x40
   d7112:	6465      	str	r5, [r4, #68]	; 0x44
}
   d7114:	4620      	mov	r0, r4
   d7116:	bd38      	pop	{r3, r4, r5, pc}
   d7118:	000ddb68 	.word	0x000ddb68

000d711c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d711c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d711e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7122:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d7124:	b123      	cbz	r3, d7130 <_ZN3UDP13releaseBufferEv+0x14>
   d7126:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d7128:	b110      	cbz	r0, d7130 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d712a:	2101      	movs	r1, #1
   d712c:	f002 f898 	bl	d9260 <_ZdlPvj>
    }
    _buffer = NULL;
   d7130:	2300      	movs	r3, #0
   d7132:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7134:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d7138:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d713a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d713c:	8723      	strh	r3, [r4, #56]	; 0x38
   d713e:	bd10      	pop	{r4, pc}

000d7140 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7140:	b570      	push	{r4, r5, r6, lr}
   d7142:	4604      	mov	r4, r0
   d7144:	4616      	mov	r6, r2
   d7146:	460d      	mov	r5, r1
    releaseBuffer();
   d7148:	f7ff ffe8 	bl	d711c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d714c:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d714e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7150:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7152:	b93e      	cbnz	r6, d7164 <_ZN3UDP9setBufferEjPh+0x24>
   d7154:	b135      	cbz	r5, d7164 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d7156:	4628      	mov	r0, r5
   d7158:	f7fc ff9f 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d715c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d715e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d7160:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d7164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7166:	b103      	cbz	r3, d716a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d7168:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d716a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d716c:	3000      	adds	r0, #0
   d716e:	bf18      	it	ne
   d7170:	2001      	movne	r0, #1
   d7172:	bd70      	pop	{r4, r5, r6, pc}

000d7174 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7176:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d7178:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d717a:	4605      	mov	r5, r0
   d717c:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d717e:	b91a      	cbnz	r2, d7188 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7180:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7182:	b109      	cbz	r1, d7188 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7184:	f7ff ffdc 	bl	d7140 <_ZN3UDP9setBufferEjPh>
   d7188:	3404      	adds	r4, #4
   d718a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d718c:	f105 0620 	add.w	r6, r5, #32
   d7190:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7192:	6823      	ldr	r3, [r4, #0]
   d7194:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7196:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d7198:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d719a:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d719c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d719e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d71a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71a2 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d71a2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d71a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d71a6:	4604      	mov	r4, r0
   d71a8:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d71aa:	b91a      	cbnz	r2, d71b4 <_ZN3UDP11parsePacketEm+0x12>
   d71ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d71ae:	b109      	cbz	r1, d71b4 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d71b0:	f7ff ffc6 	bl	d7140 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d71b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d71b6:	2200      	movs	r2, #0
   d71b8:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d71ba:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d71bc:	b149      	cbz	r1, d71d2 <_ZN3UDP11parsePacketEm+0x30>
   d71be:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d71c0:	b13a      	cbz	r2, d71d2 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d71c2:	6823      	ldr	r3, [r4, #0]
   d71c4:	4620      	mov	r0, r4
   d71c6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d71c8:	4633      	mov	r3, r6
   d71ca:	47a8      	blx	r5
        if (result > 0) {
   d71cc:	2800      	cmp	r0, #0
            _total = result;
   d71ce:	bfc8      	it	gt
   d71d0:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d71d2:	6823      	ldr	r3, [r4, #0]
   d71d4:	4620      	mov	r0, r4
   d71d6:	691b      	ldr	r3, [r3, #16]
}
   d71d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d71dc:	4718      	bx	r3
	...

000d71e0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d71e0:	b510      	push	{r4, lr}
   d71e2:	4b07      	ldr	r3, [pc, #28]	; (d7200 <_ZN3UDPD1Ev+0x20>)
   d71e4:	f103 0208 	add.w	r2, r3, #8
   d71e8:	336c      	adds	r3, #108	; 0x6c
   d71ea:	4604      	mov	r4, r0
   d71ec:	6002      	str	r2, [r0, #0]
   d71ee:	6103      	str	r3, [r0, #16]
   d71f0:	f7ff fd6b 	bl	d6cca <_ZN3UDP4stopEv>
   d71f4:	4620      	mov	r0, r4
   d71f6:	f7ff ff91 	bl	d711c <_ZN3UDP13releaseBufferEv>
   d71fa:	4620      	mov	r0, r4
   d71fc:	bd10      	pop	{r4, pc}
   d71fe:	bf00      	nop
   d7200:	000ddb68 	.word	0x000ddb68

000d7204 <_ZN3UDPD0Ev>:
   d7204:	b510      	push	{r4, lr}
   d7206:	4604      	mov	r4, r0
   d7208:	f7ff ffea 	bl	d71e0 <_ZN3UDPD1Ev>
   d720c:	4620      	mov	r0, r4
   d720e:	214c      	movs	r1, #76	; 0x4c
   d7210:	f002 f826 	bl	d9260 <_ZdlPvj>
   d7214:	4620      	mov	r0, r4
   d7216:	bd10      	pop	{r4, pc}

000d7218 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d7218:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d721a:	6940      	ldr	r0, [r0, #20]
   d721c:	2800      	cmp	r0, #0
   d721e:	db04      	blt.n	d722a <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d7220:	2301      	movs	r3, #1
   d7222:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d7226:	f7ff bef6 	b.w	d7016 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d722a:	f04f 30ff 	mov.w	r0, #4294967295
   d722e:	4770      	bx	lr

000d7230 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7230:	2300      	movs	r3, #0
   d7232:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7234:	6043      	str	r3, [r0, #4]
	len = 0;
   d7236:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7238:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d723a:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d723c:	680c      	ldr	r4, [r1, #0]
   d723e:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7240:	684c      	ldr	r4, [r1, #4]
   d7242:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7244:	688c      	ldr	r4, [r1, #8]
   d7246:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7248:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d724a:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d724c:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d724e:	bd10      	pop	{r4, pc}

000d7250 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7250:	b510      	push	{r4, lr}
   d7252:	4604      	mov	r4, r0
{
	free(buffer);
   d7254:	6800      	ldr	r0, [r0, #0]
   d7256:	f7ff fb5b 	bl	d6910 <free>
}
   d725a:	4620      	mov	r0, r4
   d725c:	bd10      	pop	{r4, pc}

000d725e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d725e:	b510      	push	{r4, lr}
   d7260:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7262:	6800      	ldr	r0, [r0, #0]
   d7264:	b108      	cbz	r0, d726a <_ZN6String10invalidateEv+0xc>
   d7266:	f7ff fb53 	bl	d6910 <free>
	buffer = NULL;
   d726a:	2300      	movs	r3, #0
   d726c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d726e:	60a3      	str	r3, [r4, #8]
   d7270:	6063      	str	r3, [r4, #4]
   d7272:	bd10      	pop	{r4, pc}

000d7274 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7274:	b538      	push	{r3, r4, r5, lr}
   d7276:	4604      	mov	r4, r0
   d7278:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d727a:	6800      	ldr	r0, [r0, #0]
   d727c:	3101      	adds	r1, #1
   d727e:	f7ff fb4f 	bl	d6920 <realloc>
	if (newbuffer) {
   d7282:	b110      	cbz	r0, d728a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7284:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7288:	2001      	movs	r0, #1
	}
	return 0;
}
   d728a:	bd38      	pop	{r3, r4, r5, pc}

000d728c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d728c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d728e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7290:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7292:	b113      	cbz	r3, d729a <_ZN6String7reserveEj+0xe>
   d7294:	6843      	ldr	r3, [r0, #4]
   d7296:	428b      	cmp	r3, r1
   d7298:	d207      	bcs.n	d72aa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d729a:	4620      	mov	r0, r4
   d729c:	f7ff ffea 	bl	d7274 <_ZN6String12changeBufferEj>
   d72a0:	b120      	cbz	r0, d72ac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d72a2:	68a3      	ldr	r3, [r4, #8]
   d72a4:	b90b      	cbnz	r3, d72aa <_ZN6String7reserveEj+0x1e>
   d72a6:	6822      	ldr	r2, [r4, #0]
   d72a8:	7013      	strb	r3, [r2, #0]
   d72aa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d72ac:	bd10      	pop	{r4, pc}

000d72ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d72ae:	b570      	push	{r4, r5, r6, lr}
   d72b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d72b2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d72b4:	4604      	mov	r4, r0
   d72b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d72b8:	f7ff ffe8 	bl	d728c <_ZN6String7reserveEj>
   d72bc:	b918      	cbnz	r0, d72c6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d72be:	4620      	mov	r0, r4
   d72c0:	f7ff ffcd 	bl	d725e <_ZN6String10invalidateEv>
		return *this;
   d72c4:	e009      	b.n	d72da <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d72c6:	462a      	mov	r2, r5
   d72c8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d72ca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d72cc:	6820      	ldr	r0, [r4, #0]
   d72ce:	f003 f828 	bl	da322 <memcpy>
	buffer[len] = 0;
   d72d2:	6822      	ldr	r2, [r4, #0]
   d72d4:	68a3      	ldr	r3, [r4, #8]
   d72d6:	2100      	movs	r1, #0
   d72d8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d72da:	4620      	mov	r0, r4
   d72dc:	bd70      	pop	{r4, r5, r6, pc}

000d72de <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d72de:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d72e0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d72e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d72e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d72e6:	6043      	str	r3, [r0, #4]
	len = 0;
   d72e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d72ea:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d72ec:	460d      	mov	r5, r1
   d72ee:	b139      	cbz	r1, d7300 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d72f0:	4608      	mov	r0, r1
   d72f2:	f003 fdaf 	bl	dae54 <strlen>
   d72f6:	4629      	mov	r1, r5
   d72f8:	4602      	mov	r2, r0
   d72fa:	4620      	mov	r0, r4
   d72fc:	f7ff ffd7 	bl	d72ae <_ZN6String4copyEPKcj>
}
   d7300:	4620      	mov	r0, r4
   d7302:	bd38      	pop	{r3, r4, r5, pc}

000d7304 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7304:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7306:	b510      	push	{r4, lr}
   d7308:	460b      	mov	r3, r1
   d730a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d730c:	d007      	beq.n	d731e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d730e:	6809      	ldr	r1, [r1, #0]
   d7310:	b119      	cbz	r1, d731a <_ZN6StringaSERKS_+0x16>
   d7312:	689a      	ldr	r2, [r3, #8]
   d7314:	f7ff ffcb 	bl	d72ae <_ZN6String4copyEPKcj>
   d7318:	e001      	b.n	d731e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d731a:	f7ff ffa0 	bl	d725e <_ZN6String10invalidateEv>

	return *this;
}
   d731e:	4620      	mov	r0, r4
   d7320:	bd10      	pop	{r4, pc}

000d7322 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7322:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7324:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7326:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7328:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d732a:	6043      	str	r3, [r0, #4]
	len = 0;
   d732c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d732e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7330:	f7ff ffe8 	bl	d7304 <_ZN6StringaSERKS_>
}
   d7334:	4620      	mov	r0, r4
   d7336:	bd10      	pop	{r4, pc}

000d7338 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7338:	b538      	push	{r3, r4, r5, lr}
   d733a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d733c:	460c      	mov	r4, r1
   d733e:	b141      	cbz	r1, d7352 <_ZN6StringaSEPKc+0x1a>
   d7340:	4608      	mov	r0, r1
   d7342:	f003 fd87 	bl	dae54 <strlen>
   d7346:	4621      	mov	r1, r4
   d7348:	4602      	mov	r2, r0
   d734a:	4628      	mov	r0, r5
   d734c:	f7ff ffaf 	bl	d72ae <_ZN6String4copyEPKcj>
   d7350:	e001      	b.n	d7356 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7352:	f7ff ff84 	bl	d725e <_ZN6String10invalidateEv>

	return *this;
}
   d7356:	4628      	mov	r0, r5
   d7358:	bd38      	pop	{r3, r4, r5, pc}

000d735a <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
   d735a:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
   d735c:	6800      	ldr	r0, [r0, #0]
   d735e:	680b      	ldr	r3, [r1, #0]
   d7360:	b108      	cbz	r0, d7366 <_ZNK6String9compareToERKS_+0xc>
   d7362:	b95b      	cbnz	r3, d737c <_ZNK6String9compareToERKS_+0x22>
   d7364:	e005      	b.n	d7372 <_ZNK6String9compareToERKS_+0x18>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d7366:	b123      	cbz	r3, d7372 <_ZNK6String9compareToERKS_+0x18>
   d7368:	6889      	ldr	r1, [r1, #8]
   d736a:	b111      	cbz	r1, d7372 <_ZNK6String9compareToERKS_+0x18>
   d736c:	7818      	ldrb	r0, [r3, #0]
   d736e:	4240      	negs	r0, r0
   d7370:	4770      	bx	lr
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d7372:	b138      	cbz	r0, d7384 <_ZNK6String9compareToERKS_+0x2a>
   d7374:	6893      	ldr	r3, [r2, #8]
   d7376:	b123      	cbz	r3, d7382 <_ZNK6String9compareToERKS_+0x28>
   d7378:	7800      	ldrb	r0, [r0, #0]
   d737a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d737c:	4619      	mov	r1, r3
   d737e:	f003 b827 	b.w	da3d0 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
   d7382:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
   d7384:	4770      	bx	lr

000d7386 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d7386:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d7388:	6882      	ldr	r2, [r0, #8]
   d738a:	688b      	ldr	r3, [r1, #8]
   d738c:	429a      	cmp	r2, r3
   d738e:	d105      	bne.n	d739c <_ZNK6String6equalsERKS_+0x16>
   d7390:	f7ff ffe3 	bl	d735a <_ZNK6String9compareToERKS_>
   d7394:	fab0 f080 	clz	r0, r0
   d7398:	0940      	lsrs	r0, r0, #5
   d739a:	bd08      	pop	{r3, pc}
   d739c:	2000      	movs	r0, #0
}
   d739e:	bd08      	pop	{r3, pc}

000d73a0 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   d73a0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d73a2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d73a4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d73a6:	b912      	cbnz	r2, d73ae <_ZNK6String6equalsEPKc+0xe>
   d73a8:	b919      	cbnz	r1, d73b2 <_ZNK6String6equalsEPKc+0x12>
   d73aa:	2001      	movs	r0, #1
   d73ac:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d73ae:	b911      	cbnz	r1, d73b6 <_ZNK6String6equalsEPKc+0x16>
   d73b0:	6803      	ldr	r3, [r0, #0]
   d73b2:	7818      	ldrb	r0, [r3, #0]
   d73b4:	e002      	b.n	d73bc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d73b6:	6800      	ldr	r0, [r0, #0]
   d73b8:	f003 f80a 	bl	da3d0 <strcmp>
   d73bc:	fab0 f080 	clz	r0, r0
   d73c0:	0940      	lsrs	r0, r0, #5
}
   d73c2:	bd08      	pop	{r3, pc}

000d73c4 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
   d73c4:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
   d73c6:	f7ff ffc8 	bl	d735a <_ZNK6String9compareToERKS_>
}
   d73ca:	0fc0      	lsrs	r0, r0, #31
   d73cc:	bd08      	pop	{r3, pc}

000d73ce <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d73ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73d0:	4606      	mov	r6, r0
   d73d2:	460d      	mov	r5, r1
   d73d4:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d73d6:	2400      	movs	r4, #0
  while (size--) {
   d73d8:	42bd      	cmp	r5, r7
   d73da:	d00c      	beq.n	d73f6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d73dc:	6833      	ldr	r3, [r6, #0]
   d73de:	f815 1b01 	ldrb.w	r1, [r5], #1
   d73e2:	689b      	ldr	r3, [r3, #8]
   d73e4:	4630      	mov	r0, r6
   d73e6:	4798      	blx	r3
     if (chunk>=0)
   d73e8:	2800      	cmp	r0, #0
   d73ea:	db01      	blt.n	d73f0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d73ec:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d73ee:	e7f3      	b.n	d73d8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d73f0:	2c00      	cmp	r4, #0
   d73f2:	bf08      	it	eq
   d73f4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d73f6:	4620      	mov	r0, r4
   d73f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73fa <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d73fa:	b570      	push	{r4, r5, r6, lr}
   d73fc:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d73fe:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7400:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7402:	b149      	cbz	r1, d7418 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7404:	f003 fd26 	bl	dae54 <strlen>
   d7408:	682b      	ldr	r3, [r5, #0]
   d740a:	4602      	mov	r2, r0
   d740c:	4621      	mov	r1, r4
   d740e:	4628      	mov	r0, r5
   d7410:	68db      	ldr	r3, [r3, #12]
    }
   d7412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7416:	4718      	bx	r3
    }
   d7418:	bd70      	pop	{r4, r5, r6, pc}

000d741a <_ZN5Print5printEPKc>:
   d741a:	b508      	push	{r3, lr}
   d741c:	f7ff ffed 	bl	d73fa <_ZN5Print5writeEPKc>
   d7420:	bd08      	pop	{r3, pc}

000d7422 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7422:	6803      	ldr	r3, [r0, #0]
   d7424:	689b      	ldr	r3, [r3, #8]
   d7426:	4718      	bx	r3

000d7428 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7428:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d742a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d742c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d742e:	f7ff fff8 	bl	d7422 <_ZN5Print5printEc>
  n += print('\n');
   d7432:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7434:	4604      	mov	r4, r0
  n += print('\n');
   d7436:	4628      	mov	r0, r5
   d7438:	f7ff fff3 	bl	d7422 <_ZN5Print5printEc>
  return n;
}
   d743c:	4420      	add	r0, r4
   d743e:	bd38      	pop	{r3, r4, r5, pc}

000d7440 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7440:	b538      	push	{r3, r4, r5, lr}
   d7442:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7444:	f7ff ffd9 	bl	d73fa <_ZN5Print5writeEPKc>
   d7448:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d744a:	4628      	mov	r0, r5
   d744c:	f7ff ffec 	bl	d7428 <_ZN5Print7printlnEv>
  return n;
}
   d7450:	4420      	add	r0, r4
   d7452:	bd38      	pop	{r3, r4, r5, pc}

000d7454 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7454:	b530      	push	{r4, r5, lr}
   d7456:	b08b      	sub	sp, #44	; 0x2c
   d7458:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d745a:	2100      	movs	r1, #0
   d745c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7460:	2a01      	cmp	r2, #1
   d7462:	bf98      	it	ls
   d7464:	220a      	movls	r2, #10
   d7466:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d746a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d746e:	fb05 3312 	mls	r3, r5, r2, r3
   d7472:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7476:	2b09      	cmp	r3, #9
   d7478:	bf94      	ite	ls
   d747a:	3330      	addls	r3, #48	; 0x30
   d747c:	3337      	addhi	r3, #55	; 0x37
   d747e:	b2db      	uxtb	r3, r3
   d7480:	4621      	mov	r1, r4
   d7482:	f804 3901 	strb.w	r3, [r4], #-1
   d7486:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7488:	2d00      	cmp	r5, #0
   d748a:	d1ee      	bne.n	d746a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d748c:	f7ff ffb5 	bl	d73fa <_ZN5Print5writeEPKc>
}
   d7490:	b00b      	add	sp, #44	; 0x2c
   d7492:	bd30      	pop	{r4, r5, pc}

000d7494 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7494:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7496:	b92a      	cbnz	r2, d74a4 <_ZN5Print5printEmi+0x10>
   d7498:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d749a:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d749e:	689b      	ldr	r3, [r3, #8]
   d74a0:	b2c9      	uxtb	r1, r1
   d74a2:	4718      	bx	r3
  else return printNumber(n, base);
   d74a4:	b2d2      	uxtb	r2, r2
}
   d74a6:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d74aa:	f7ff bfd3 	b.w	d7454 <_ZN5Print11printNumberEmh>

000d74ae <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d74ae:	f7ff bff1 	b.w	d7494 <_ZN5Print5printEmi>

000d74b2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d74b2:	b40c      	push	{r2, r3}
   d74b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d74b8:	b087      	sub	sp, #28
   d74ba:	af00      	add	r7, sp, #0
   d74bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d74c0:	4605      	mov	r5, r0
   d74c2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d74c6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d74c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d74ca:	4623      	mov	r3, r4
   d74cc:	464a      	mov	r2, r9
   d74ce:	2114      	movs	r1, #20
   d74d0:	1d38      	adds	r0, r7, #4
   d74d2:	f7ff fa55 	bl	d6980 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d74d6:	2813      	cmp	r0, #19
   d74d8:	d805      	bhi.n	d74e6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d74da:	1d39      	adds	r1, r7, #4
   d74dc:	4628      	mov	r0, r5
   d74de:	f7ff ff8c 	bl	d73fa <_ZN5Print5writeEPKc>
   d74e2:	4604      	mov	r4, r0
   d74e4:	e013      	b.n	d750e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d74e6:	f100 0308 	add.w	r3, r0, #8
   d74ea:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d74ee:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d74f0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d74f4:	1c41      	adds	r1, r0, #1
   d74f6:	4623      	mov	r3, r4
   d74f8:	464a      	mov	r2, r9
   d74fa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d74fc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d74fe:	f7ff fa3f 	bl	d6980 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7502:	4669      	mov	r1, sp
   d7504:	4628      	mov	r0, r5
   d7506:	f7ff ff78 	bl	d73fa <_ZN5Print5writeEPKc>
   d750a:	4604      	mov	r4, r0
   d750c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d750e:	b11e      	cbz	r6, d7518 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7510:	4628      	mov	r0, r5
   d7512:	f7ff ff89 	bl	d7428 <_ZN5Print7printlnEv>
   d7516:	4404      	add	r4, r0
    return n;
}
   d7518:	4620      	mov	r0, r4
   d751a:	371c      	adds	r7, #28
   d751c:	46bd      	mov	sp, r7
   d751e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7522:	b002      	add	sp, #8
   d7524:	4770      	bx	lr

000d7526 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d7526:	6800      	ldr	r0, [r0, #0]
   d7528:	f7fe bfa4 	b.w	d6474 <os_mutex_recursive_lock>

000d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d752c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d752e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d7530:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d7532:	b17c      	cbz	r4, d7554 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7534:	6863      	ldr	r3, [r4, #4]
   d7536:	3b01      	subs	r3, #1
   d7538:	6063      	str	r3, [r4, #4]
   d753a:	b95b      	cbnz	r3, d7554 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d753c:	6823      	ldr	r3, [r4, #0]
   d753e:	4620      	mov	r0, r4
   d7540:	689b      	ldr	r3, [r3, #8]
   d7542:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7544:	68a3      	ldr	r3, [r4, #8]
   d7546:	3b01      	subs	r3, #1
   d7548:	60a3      	str	r3, [r4, #8]
   d754a:	b91b      	cbnz	r3, d7554 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d754c:	6823      	ldr	r3, [r4, #0]
   d754e:	4620      	mov	r0, r4
   d7550:	68db      	ldr	r3, [r3, #12]
   d7552:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d7554:	4628      	mov	r0, r5
   d7556:	bd38      	pop	{r3, r4, r5, pc}

000d7558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7558:	680b      	ldr	r3, [r1, #0]
   d755a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d755c:	b113      	cbz	r3, d7564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d755e:	685a      	ldr	r2, [r3, #4]
   d7560:	3201      	adds	r2, #1
   d7562:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7564:	4770      	bx	lr
	...

000d7568 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7568:	4b01      	ldr	r3, [pc, #4]	; (d7570 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d756a:	4a02      	ldr	r2, [pc, #8]	; (d7574 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d756c:	601a      	str	r2, [r3, #0]
   d756e:	4770      	bx	lr
   d7570:	2003e280 	.word	0x2003e280
   d7574:	000ddc88 	.word	0x000ddc88

000d7578 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7578:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d757a:	4b14      	ldr	r3, [pc, #80]	; (d75cc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d757c:	4f14      	ldr	r7, [pc, #80]	; (d75d0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d757e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7580:	4b14      	ldr	r3, [pc, #80]	; (d75d4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7582:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7584:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7586:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7588:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d758a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d758c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d758e:	d01b      	beq.n	d75c8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7590:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7592:	ad01      	add	r5, sp, #4
   d7594:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7598:	f002 fdb8 	bl	da10c <localtime>
	calendar_time->tm_year += 1900;
   d759c:	6943      	ldr	r3, [r0, #20]
   d759e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d75a2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d75a4:	4604      	mov	r4, r0
   d75a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d75a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d75aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d75ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d75ae:	f8d4 e000 	ldr.w	lr, [r4]
   d75b2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75b6:	ad01      	add	r5, sp, #4
   d75b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75ba:	4c07      	ldr	r4, [pc, #28]	; (d75d8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d75bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d75be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d75c2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75c4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d75c8:	b00b      	add	sp, #44	; 0x2c
   d75ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d75cc:	2003e2b8 	.word	0x2003e2b8
   d75d0:	2003e2b4 	.word	0x2003e2b4
   d75d4:	2003e2b0 	.word	0x2003e2b0
   d75d8:	2003e284 	.word	0x2003e284

000d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d75dc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d75de:	2000      	movs	r0, #0
   d75e0:	f7ff f97e 	bl	d68e0 <spark_sync_time_pending>
   d75e4:	b128      	cbz	r0, d75f2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d75e6:	f7ff f95b 	bl	d68a0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d75ea:	f080 0001 	eor.w	r0, r0, #1
   d75ee:	b2c0      	uxtb	r0, r0
   d75f0:	bd08      	pop	{r3, pc}
   d75f2:	2001      	movs	r0, #1
    }
   d75f4:	bd08      	pop	{r3, pc}
	...

000d75f8 <_ZN9TimeClass4isPMEl>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   d75f8:	b508      	push	{r3, lr}
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d75fa:	f7ff ffbd 	bl	d7578 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
   d75fe:	4b03      	ldr	r3, [pc, #12]	; (d760c <_ZN9TimeClass4isPMEl+0x14>)
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
	return (hour(t) >= 12);
   d7600:	6898      	ldr	r0, [r3, #8]
}
   d7602:	280b      	cmp	r0, #11
   d7604:	bfd4      	ite	le
   d7606:	2000      	movle	r0, #0
   d7608:	2001      	movgt	r0, #1
   d760a:	bd08      	pop	{r3, pc}
   d760c:	2003e284 	.word	0x2003e284

000d7610 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7610:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7614:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d761c:	d40f      	bmi.n	d763e <_ZN9TimeClass4zoneEf+0x2e>
   d761e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7622:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d762a:	dc08      	bgt.n	d763e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d762c:	eddf 7a04 	vldr	s15, [pc, #16]	; d7640 <_ZN9TimeClass4zoneEf+0x30>
   d7630:	4b04      	ldr	r3, [pc, #16]	; (d7644 <_ZN9TimeClass4zoneEf+0x34>)
   d7632:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7636:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d763a:	ed83 0a00 	vstr	s0, [r3]
   d763e:	4770      	bx	lr
   d7640:	45610000 	.word	0x45610000
   d7644:	2003e2b8 	.word	0x2003e2b8

000d7648 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7648:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d764a:	4b0e      	ldr	r3, [pc, #56]	; (d7684 <_ZN9TimeClass7timeStrEl+0x3c>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	4419      	add	r1, r3
   d7650:	4b0d      	ldr	r3, [pc, #52]	; (d7688 <_ZN9TimeClass7timeStrEl+0x40>)
   d7652:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7654:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7656:	a802      	add	r0, sp, #8
   d7658:	4419      	add	r1, r3
   d765a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d765e:	f002 fd55 	bl	da10c <localtime>
        char* ascstr = asctime(calendar_time);
   d7662:	f002 fcff 	bl	da064 <asctime>
   d7666:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7668:	f003 fbf4 	bl	dae54 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d766c:	4428      	add	r0, r5
   d766e:	2300      	movs	r3, #0
   d7670:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7674:	4629      	mov	r1, r5
   d7676:	4620      	mov	r0, r4
   d7678:	f7ff fe31 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
}
   d767c:	4620      	mov	r0, r4
   d767e:	b003      	add	sp, #12
   d7680:	bd30      	pop	{r4, r5, pc}
   d7682:	bf00      	nop
   d7684:	2003e2b8 	.word	0x2003e2b8
   d7688:	2003e2b0 	.word	0x2003e2b0

000d768c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7690:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d7692:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7694:	4607      	mov	r7, r0
   d7696:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d7698:	4620      	mov	r0, r4
   d769a:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d769c:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d769e:	f002 fea1 	bl	da3e4 <strcpy>
    size_t len = strlen(format_str);
   d76a2:	4620      	mov	r0, r4
   d76a4:	f003 fbd6 	bl	dae54 <strlen>
   d76a8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d76aa:	b925      	cbnz	r5, d76b6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d76ac:	4924      	ldr	r1, [pc, #144]	; (d7740 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d76ae:	a803      	add	r0, sp, #12
   d76b0:	f002 fe98 	bl	da3e4 <strcpy>
   d76b4:	e013      	b.n	d76de <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d76b6:	213c      	movs	r1, #60	; 0x3c
   d76b8:	fb95 f2f1 	sdiv	r2, r5, r1
   d76bc:	2a00      	cmp	r2, #0
   d76be:	bfb8      	it	lt
   d76c0:	4252      	neglt	r2, r2
   d76c2:	fb92 f3f1 	sdiv	r3, r2, r1
   d76c6:	fb01 2213 	mls	r2, r1, r3, r2
   d76ca:	9200      	str	r2, [sp, #0]
   d76cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d76d0:	4a1c      	ldr	r2, [pc, #112]	; (d7744 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d76d2:	fb95 f3f3 	sdiv	r3, r5, r3
   d76d6:	2110      	movs	r1, #16
   d76d8:	a803      	add	r0, sp, #12
   d76da:	f7ff f941 	bl	d6960 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d76de:	4625      	mov	r5, r4
   d76e0:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d76e2:	f108 3aff 	add.w	sl, r8, #4294967295
   d76e6:	45b2      	cmp	sl, r6
   d76e8:	d91b      	bls.n	d7722 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d76ea:	782b      	ldrb	r3, [r5, #0]
   d76ec:	2b25      	cmp	r3, #37	; 0x25
   d76ee:	d116      	bne.n	d771e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d76f0:	786b      	ldrb	r3, [r5, #1]
   d76f2:	2b7a      	cmp	r3, #122	; 0x7a
   d76f4:	d113      	bne.n	d771e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d76f6:	a803      	add	r0, sp, #12
   d76f8:	f003 fbac 	bl	dae54 <strlen>
   d76fc:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d76fe:	4430      	add	r0, r6
   d7700:	ebc6 020a 	rsb	r2, r6, sl
   d7704:	1ca9      	adds	r1, r5, #2
   d7706:	4420      	add	r0, r4
   d7708:	f002 fe0b 	bl	da322 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d770c:	4642      	mov	r2, r8
   d770e:	a903      	add	r1, sp, #12
   d7710:	4628      	mov	r0, r5
   d7712:	f002 fe06 	bl	da322 <memcpy>
            len = strlen(format_str);
   d7716:	4620      	mov	r0, r4
   d7718:	f003 fb9c 	bl	dae54 <strlen>
   d771c:	4680      	mov	r8, r0
   d771e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7720:	e7de      	b.n	d76e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d7722:	464b      	mov	r3, r9
   d7724:	4622      	mov	r2, r4
   d7726:	2132      	movs	r1, #50	; 0x32
   d7728:	a807      	add	r0, sp, #28
   d772a:	f002 fedf 	bl	da4ec <strftime>
    return String(buf);
   d772e:	a907      	add	r1, sp, #28
   d7730:	4638      	mov	r0, r7
   d7732:	f7ff fdd4 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7736:	4638      	mov	r0, r7
   d7738:	b024      	add	sp, #144	; 0x90
   d773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d773e:	bf00      	nop
   d7740:	000de3dd 	.word	0x000de3dd
   d7744:	000ddcb1 	.word	0x000ddcb1

000d7748 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d7748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d774a:	4605      	mov	r5, r0
   d774c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d774e:	461c      	mov	r4, r3
   d7750:	b913      	cbnz	r3, d7758 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d7752:	4b12      	ldr	r3, [pc, #72]	; (d779c <_ZN9TimeClass6formatElPKc+0x54>)
   d7754:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d7756:	b12c      	cbz	r4, d7764 <_ZN9TimeClass6formatElPKc+0x1c>
   d7758:	4b11      	ldr	r3, [pc, #68]	; (d77a0 <_ZN9TimeClass6formatElPKc+0x58>)
   d775a:	4620      	mov	r0, r4
   d775c:	6819      	ldr	r1, [r3, #0]
   d775e:	f002 fe37 	bl	da3d0 <strcmp>
   d7762:	b920      	cbnz	r0, d776e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d7764:	9901      	ldr	r1, [sp, #4]
   d7766:	4628      	mov	r0, r5
   d7768:	f7ff ff6e 	bl	d7648 <_ZN9TimeClass7timeStrEl>
   d776c:	e013      	b.n	d7796 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d776e:	4f0d      	ldr	r7, [pc, #52]	; (d77a4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d7770:	9a01      	ldr	r2, [sp, #4]
   d7772:	683b      	ldr	r3, [r7, #0]
   d7774:	4e0c      	ldr	r6, [pc, #48]	; (d77a8 <_ZN9TimeClass6formatElPKc+0x60>)
   d7776:	441a      	add	r2, r3
   d7778:	6833      	ldr	r3, [r6, #0]
   d777a:	a802      	add	r0, sp, #8
   d777c:	4413      	add	r3, r2
   d777e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d7782:	f002 fcc3 	bl	da10c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7786:	683a      	ldr	r2, [r7, #0]
   d7788:	6833      	ldr	r3, [r6, #0]
   d778a:	4601      	mov	r1, r0
   d778c:	4413      	add	r3, r2
   d778e:	4628      	mov	r0, r5
   d7790:	4622      	mov	r2, r4
   d7792:	f7ff ff7b 	bl	d768c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d7796:	4628      	mov	r0, r5
   d7798:	b003      	add	sp, #12
   d779a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d779c:	2003e2ac 	.word	0x2003e2ac
   d77a0:	2003d6e0 	.word	0x2003d6e0
   d77a4:	2003e2b8 	.word	0x2003e2b8
   d77a8:	2003e2b0 	.word	0x2003e2b0

000d77ac <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d77ac:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d77ae:	2000      	movs	r0, #0
   d77b0:	f7fe fe18 	bl	d63e4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d77b4:	4604      	mov	r4, r0
   d77b6:	b968      	cbnz	r0, d77d4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d77b8:	f7fe ffc4 	bl	d6744 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d77bc:	2801      	cmp	r0, #1
   d77be:	d10b      	bne.n	d77d8 <_ZN9TimeClass7isValidEv+0x2c>
   d77c0:	4620      	mov	r0, r4
   d77c2:	f7fe ffef 	bl	d67a4 <system_thread_get_state>
   d77c6:	b938      	cbnz	r0, d77d8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d77c8:	f7ff ff08 	bl	d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d77cc:	b930      	cbnz	r0, d77dc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d77ce:	f7ff f85f 	bl	d6890 <spark_process>
   d77d2:	e7f9      	b.n	d77c8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d77d4:	2001      	movs	r0, #1
   d77d6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d77d8:	2000      	movs	r0, #0
   d77da:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d77dc:	f7ff fefe 	bl	d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d77e0:	2000      	movs	r0, #0
   d77e2:	f7fe fdff 	bl	d63e4 <HAL_RTC_Time_Is_Valid>
   d77e6:	3000      	adds	r0, #0
   d77e8:	bf18      	it	ne
   d77ea:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d77ec:	bd10      	pop	{r4, pc}

000d77ee <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d77ee:	b508      	push	{r3, lr}
    (void)isValid();
   d77f0:	f7ff ffdc 	bl	d77ac <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d77f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d77f8:	f7fe bdec 	b.w	d63d4 <HAL_RTC_Get_UnixTime>

000d77fc <_ZN9TimeClass4isAMEv>:
		return calendar_time_cache.tm_hour ;
}

/* returns true if time now is AM */
uint8_t TimeClass::isAM()
{
   d77fc:	b508      	push	{r3, lr}
	return !isPM(now());
   d77fe:	f7ff fff6 	bl	d77ee <_ZN9TimeClass3nowEv>
   d7802:	f7ff fef9 	bl	d75f8 <_ZN9TimeClass4isPMEl>
}
   d7806:	fab0 f080 	clz	r0, r0
   d780a:	0940      	lsrs	r0, r0, #5
   d780c:	bd08      	pop	{r3, pc}
	...

000d7810 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d7810:	b508      	push	{r3, lr}
	return year(now());
   d7812:	f7ff ffec 	bl	d77ee <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7816:	f7ff feaf 	bl	d7578 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d781a:	4b01      	ldr	r3, [pc, #4]	; (d7820 <_ZN9TimeClass4yearEv+0x10>)
   d781c:	6958      	ldr	r0, [r3, #20]
   d781e:	bd08      	pop	{r3, pc}
   d7820:	2003e284 	.word	0x2003e284

000d7824 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7824:	4b02      	ldr	r3, [pc, #8]	; (d7830 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7826:	681a      	ldr	r2, [r3, #0]
   d7828:	4b02      	ldr	r3, [pc, #8]	; (d7834 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d782a:	601a      	str	r2, [r3, #0]
   d782c:	4770      	bx	lr
   d782e:	bf00      	nop
   d7830:	2003d6e0 	.word	0x2003d6e0
   d7834:	2003e2ac 	.word	0x2003e2ac

000d7838 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7838:	2100      	movs	r1, #0
   d783a:	f7fe bf93 	b.w	d6764 <system_delay_ms>

000d783e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d783e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7840:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7842:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7844:	b113      	cbz	r3, d784c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7846:	2203      	movs	r2, #3
   d7848:	4601      	mov	r1, r0
   d784a:	4798      	blx	r3
    }
   d784c:	4620      	mov	r0, r4
   d784e:	bd10      	pop	{r4, pc}

000d7850 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7850:	b510      	push	{r4, lr}
   d7852:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7854:	f7ff fff3 	bl	d783e <_ZNSt14_Function_baseD1Ev>
   d7858:	4620      	mov	r0, r4
   d785a:	bd10      	pop	{r4, pc}

000d785c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d785c:	b513      	push	{r0, r1, r4, lr}
   d785e:	460b      	mov	r3, r1
   d7860:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7862:	c803      	ldmia	r0, {r0, r1}
   d7864:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7868:	e893 0003 	ldmia.w	r3, {r0, r1}
   d786c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7870:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7874:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7878:	b002      	add	sp, #8
   d787a:	bd10      	pop	{r4, pc}

000d787c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d787c:	4803      	ldr	r0, [pc, #12]	; (d788c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d787e:	4a04      	ldr	r2, [pc, #16]	; (d7890 <_GLOBAL__sub_I_RGB+0x14>)
   d7880:	4904      	ldr	r1, [pc, #16]	; (d7894 <_GLOBAL__sub_I_RGB+0x18>)
   d7882:	2300      	movs	r3, #0
   d7884:	6083      	str	r3, [r0, #8]
   d7886:	f001 bcdd 	b.w	d9244 <__aeabi_atexit>
   d788a:	bf00      	nop
   d788c:	2003e2bc 	.word	0x2003e2bc
   d7890:	2003d7d0 	.word	0x2003d7d0
   d7894:	000d7851 	.word	0x000d7851

000d7898 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7898:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d789a:	4b0c      	ldr	r3, [pc, #48]	; (d78cc <serialEventRun+0x34>)
   d789c:	b133      	cbz	r3, d78ac <serialEventRun+0x14>
   d789e:	f000 fbd9 	bl	d8054 <_Z16_fetch_usbserialv>
   d78a2:	6803      	ldr	r3, [r0, #0]
   d78a4:	691b      	ldr	r3, [r3, #16]
   d78a6:	4798      	blx	r3
   d78a8:	2800      	cmp	r0, #0
   d78aa:	dc09      	bgt.n	d78c0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d78ac:	4b08      	ldr	r3, [pc, #32]	; (d78d0 <serialEventRun+0x38>)
   d78ae:	b163      	cbz	r3, d78ca <serialEventRun+0x32>
   d78b0:	f000 fc52 	bl	d8158 <_Z22__fetch_global_Serial1v>
   d78b4:	6803      	ldr	r3, [r0, #0]
   d78b6:	691b      	ldr	r3, [r3, #16]
   d78b8:	4798      	blx	r3
   d78ba:	2800      	cmp	r0, #0
   d78bc:	dc03      	bgt.n	d78c6 <serialEventRun+0x2e>
   d78be:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d78c0:	f3af 8000 	nop.w
   d78c4:	e7f2      	b.n	d78ac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d78c6:	f3af 8000 	nop.w
   d78ca:	bd08      	pop	{r3, pc}
	...

000d78d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d78d4:	b508      	push	{r3, lr}
	serialEventRun();
   d78d6:	f7ff ffdf 	bl	d7898 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d78da:	f7fe fd73 	bl	d63c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d78de:	4b01      	ldr	r3, [pc, #4]	; (d78e4 <_post_loop+0x10>)
   d78e0:	6018      	str	r0, [r3, #0]
   d78e2:	bd08      	pop	{r3, pc}
   d78e4:	2003e608 	.word	0x2003e608

000d78e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d78e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78ea:	2300      	movs	r3, #0
   d78ec:	9300      	str	r3, [sp, #0]
   d78ee:	461a      	mov	r2, r3
   d78f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78f4:	f7fe ff68 	bl	d67c8 <system_ctrl_set_result>
}
   d78f8:	b003      	add	sp, #12
   d78fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7900 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7900:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7902:	8843      	ldrh	r3, [r0, #2]
   d7904:	2b0a      	cmp	r3, #10
   d7906:	d008      	beq.n	d791a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7908:	2b50      	cmp	r3, #80	; 0x50
   d790a:	d109      	bne.n	d7920 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d790c:	4b09      	ldr	r3, [pc, #36]	; (d7934 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d790e:	681b      	ldr	r3, [r3, #0]
   d7910:	b13b      	cbz	r3, d7922 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7912:	b003      	add	sp, #12
   d7914:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7918:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d791a:	f7ff ffe5 	bl	d78e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d791e:	e006      	b.n	d792e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7920:	2300      	movs	r3, #0
   d7922:	9300      	str	r3, [sp, #0]
   d7924:	461a      	mov	r2, r3
   d7926:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d792a:	f7fe ff4d 	bl	d67c8 <system_ctrl_set_result>
        break;
    }
}
   d792e:	b003      	add	sp, #12
   d7930:	f85d fb04 	ldr.w	pc, [sp], #4
   d7934:	2003e2cc 	.word	0x2003e2cc

000d7938 <module_user_init_hook>:

void module_user_init_hook()
{
   d7938:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d793a:	f7fe fd2b 	bl	d6394 <HAL_RNG_GetRandomNumber>
   d793e:	4604      	mov	r4, r0
    srand(seed);
   d7940:	f002 fd10 	bl	da364 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7944:	4b07      	ldr	r3, [pc, #28]	; (d7964 <module_user_init_hook+0x2c>)
   d7946:	b113      	cbz	r3, d794e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7948:	4620      	mov	r0, r4
   d794a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d794e:	2100      	movs	r1, #0
   d7950:	4804      	ldr	r0, [pc, #16]	; (d7964 <module_user_init_hook+0x2c>)
   d7952:	f7fe ffcd 	bl	d68f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7956:	2100      	movs	r1, #0
   d7958:	4803      	ldr	r0, [pc, #12]	; (d7968 <module_user_init_hook+0x30>)
}
   d795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d795e:	f7fe bf29 	b.w	d67b4 <system_ctrl_set_app_request_handler>
   d7962:	bf00      	nop
   d7964:	00000000 	.word	0x00000000
   d7968:	000d7901 	.word	0x000d7901

000d796c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d796c:	4770      	bx	lr

000d796e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d796e:	2000      	movs	r0, #0
   d7970:	4770      	bx	lr

000d7972 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7972:	b510      	push	{r4, lr}
   d7974:	2110      	movs	r1, #16
   d7976:	4604      	mov	r4, r0
   d7978:	f001 fc72 	bl	d9260 <_ZdlPvj>
   d797c:	4620      	mov	r0, r4
   d797e:	bd10      	pop	{r4, pc}

000d7980 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7980:	b508      	push	{r3, lr}
      { delete this; }
   d7982:	b108      	cbz	r0, d7988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7984:	f7ff fff5 	bl	d7972 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7988:	bd08      	pop	{r3, pc}

000d798a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d798a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d798c:	68c4      	ldr	r4, [r0, #12]
   d798e:	b1ec      	cbz	r4, d79cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7990:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7992:	2b02      	cmp	r3, #2
   d7994:	d102      	bne.n	d799c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7996:	68e0      	ldr	r0, [r4, #12]
   d7998:	f7fe ffba 	bl	d6910 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d799c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d799e:	b135      	cbz	r5, d79ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d79a0:	4628      	mov	r0, r5
   d79a2:	f7ff ff4c 	bl	d783e <_ZNSt14_Function_baseD1Ev>
   d79a6:	2110      	movs	r1, #16
   d79a8:	4628      	mov	r0, r5
   d79aa:	f001 fc59 	bl	d9260 <_ZdlPvj>
   d79ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d79b0:	b135      	cbz	r5, d79c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d79b2:	4628      	mov	r0, r5
   d79b4:	f7ff ff43 	bl	d783e <_ZNSt14_Function_baseD1Ev>
   d79b8:	2110      	movs	r1, #16
   d79ba:	4628      	mov	r0, r5
   d79bc:	f001 fc50 	bl	d9260 <_ZdlPvj>
   d79c0:	4620      	mov	r0, r4
   d79c2:	2114      	movs	r1, #20
   d79c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d79c8:	f001 bc4a 	b.w	d9260 <_ZdlPvj>
   d79cc:	bd38      	pop	{r3, r4, r5, pc}

000d79ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d79ce:	b513      	push	{r0, r1, r4, lr}
   d79d0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79d2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d79d6:	2300      	movs	r3, #0
   d79d8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d79da:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79dc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d79de:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79e0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d79e2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d79e4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79e6:	f7ff fda1 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79ea:	4620      	mov	r0, r4
   d79ec:	b002      	add	sp, #8
   d79ee:	bd10      	pop	{r4, pc}

000d79f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d79f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79f2:	460c      	mov	r4, r1
   d79f4:	ad02      	add	r5, sp, #8
   d79f6:	f854 3b04 	ldr.w	r3, [r4], #4
   d79fa:	f845 3d08 	str.w	r3, [r5, #-8]!
   d79fe:	4606      	mov	r6, r0
   d7a00:	460f      	mov	r7, r1
   d7a02:	a801      	add	r0, sp, #4
   d7a04:	4621      	mov	r1, r4
   d7a06:	f7ff fda7 	bl	d7558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7a0a:	4629      	mov	r1, r5
   d7a0c:	4630      	mov	r0, r6
   d7a0e:	f7ff ffde 	bl	d79ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a12:	a801      	add	r0, sp, #4
   d7a14:	f7ff fd8a 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a18:	4620      	mov	r0, r4
   d7a1a:	f7ff fd87 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7a1e:	4638      	mov	r0, r7
   d7a20:	2108      	movs	r1, #8
   d7a22:	f001 fc1d 	bl	d9260 <_ZdlPvj>
        return p;
    }
   d7a26:	4630      	mov	r0, r6
   d7a28:	b003      	add	sp, #12
   d7a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a2c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a2c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7a2e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a30:	b90a      	cbnz	r2, d7a36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7a32:	f001 fce1 	bl	d93f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a36:	68c3      	ldr	r3, [r0, #12]
    }
   d7a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a3c:	4718      	bx	r3

000d7a3e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7a3e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7a40:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7a42:	f100 0110 	add.w	r1, r0, #16
   d7a46:	f7ff fff1 	bl	d7a2c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7a4a:	bd08      	pop	{r3, pc}

000d7a4c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a4c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7a4e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a50:	b90a      	cbnz	r2, d7a56 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7a52:	f001 fcd1 	bl	d93f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a56:	68c3      	ldr	r3, [r0, #12]
    }
   d7a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a5c:	4718      	bx	r3

000d7a5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7a5e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7a60:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7a62:	f100 0110 	add.w	r1, r0, #16
   d7a66:	f7ff fff1 	bl	d7a4c <_ZNKSt8functionIFvRKbEEclES1_>
   d7a6a:	bd08      	pop	{r3, pc}

000d7a6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a6c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7a6e:	2300      	movs	r3, #0
   d7a70:	6083      	str	r3, [r0, #8]
   d7a72:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a74:	4604      	mov	r4, r0
   d7a76:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7a78:	b12b      	cbz	r3, d7a86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a7a:	2202      	movs	r2, #2
   d7a7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a7e:	68eb      	ldr	r3, [r5, #12]
   d7a80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a82:	68ab      	ldr	r3, [r5, #8]
   d7a84:	60a3      	str	r3, [r4, #8]
	}
    }
   d7a86:	4620      	mov	r0, r4
   d7a88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d7a90:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d7a94:	b086      	sub	sp, #24
   d7a96:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7a98:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a9c:	808b      	strh	r3, [r1, #4]
   d7a9e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7aa0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7aa2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d7aa6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7aa8:	f04f 0002 	mov.w	r0, #2
   d7aac:	e8d4 1f4f 	ldrexb	r1, [r4]
   d7ab0:	4299      	cmp	r1, r3
   d7ab2:	d103      	bne.n	d7abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d7ab4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d7ab8:	2d00      	cmp	r5, #0
   d7aba:	d1f7      	bne.n	d7aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7abc:	d002      	beq.n	d7ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d7abe:	f88d 1000 	strb.w	r1, [sp]
   d7ac2:	e06b      	b.n	d7b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7ac4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7ac8:	bf1e      	ittt	ne
   d7aca:	60e7      	strne	r7, [r4, #12]
   d7acc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ace:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7ad0:	2301      	movs	r3, #1
   d7ad2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7ad6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7ad8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7ada:	f104 0308 	add.w	r3, r4, #8
   d7ade:	f3bf 8f5f 	dmb	sy
   d7ae2:	e853 6f00 	ldrex	r6, [r3]
   d7ae6:	e843 0200 	strex	r2, r0, [r3]
   d7aea:	2a00      	cmp	r2, #0
   d7aec:	d1f9      	bne.n	d7ae2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d7aee:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7af2:	2e00      	cmp	r6, #0
   d7af4:	d052      	beq.n	d7b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7af6:	f7fe fe45 	bl	d6784 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7afa:	b120      	cbz	r0, d7b06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7afc:	4629      	mov	r1, r5
   d7afe:	4630      	mov	r0, r6
   d7b00:	f7ff ff94 	bl	d7a2c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7b04:	e043      	b.n	d7b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7b06:	4631      	mov	r1, r6
   d7b08:	4668      	mov	r0, sp
   d7b0a:	f7ff ffaf 	bl	d7a6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7b0e:	68e0      	ldr	r0, [r4, #12]
   d7b10:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7b14:	b108      	cbz	r0, d7b1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d7b16:	f002 fc6d 	bl	da3f4 <strdup>
   d7b1a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7b1c:	2010      	movs	r0, #16
   d7b1e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d7b22:	f7fc fab8 	bl	d4096 <_Znwj>
   d7b26:	4605      	mov	r5, r0
   d7b28:	b330      	cbz	r0, d7b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7b2a:	f04f 0800 	mov.w	r8, #0
   d7b2e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b32:	2018      	movs	r0, #24
   d7b34:	f7fc faaf 	bl	d4096 <_Znwj>
   d7b38:	4604      	mov	r4, r0
   d7b3a:	b1c0      	cbz	r0, d7b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7b3c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7b40:	4601      	mov	r1, r0
   d7b42:	4668      	mov	r0, sp
   d7b44:	f7ff fe8a 	bl	d785c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b48:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b4a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b4c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b4e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b50:	9202      	str	r2, [sp, #8]
   d7b52:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b54:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d7b5a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d7b60:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b64:	9b04      	ldr	r3, [sp, #16]
   d7b66:	9203      	str	r2, [sp, #12]
   d7b68:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b6a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7b6e:	4b0e      	ldr	r3, [pc, #56]	; (d7ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d7b70:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7b72:	4b0e      	ldr	r3, [pc, #56]	; (d7bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b74:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7b76:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7b78:	9804      	ldr	r0, [sp, #16]
   d7b7a:	f7fe fec9 	bl	d6910 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b7e:	4668      	mov	r0, sp
   d7b80:	f7ff fe5d 	bl	d783e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7b84:	2200      	movs	r2, #0
   d7b86:	4629      	mov	r1, r5
   d7b88:	4809      	ldr	r0, [pc, #36]	; (d7bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d7b8a:	f7fe fe03 	bl	d6794 <application_thread_invoke>
   d7b8e:	4630      	mov	r0, r6
   d7b90:	f7ff fe55 	bl	d783e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7b94:	2110      	movs	r1, #16
   d7b96:	4630      	mov	r0, r6
   d7b98:	f001 fb62 	bl	d9260 <_ZdlPvj>
   d7b9c:	4638      	mov	r0, r7
   d7b9e:	f7fe feb7 	bl	d6910 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d7ba2:	b006      	add	sp, #24
   d7ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ba8:	000d7a3f 	.word	0x000d7a3f
   d7bac:	000d7c9d 	.word	0x000d7c9d
   d7bb0:	000d81a5 	.word	0x000d81a5

000d7bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bb8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7bba:	ad07      	add	r5, sp, #28
   d7bbc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7bc0:	4606      	mov	r6, r0
   d7bc2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7bc4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7bc6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7bc8:	460f      	mov	r7, r1
   d7bca:	4690      	mov	r8, r2
   d7bcc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7bd0:	f8c5 b004 	str.w	fp, [r5, #4]
   d7bd4:	f8c5 b008 	str.w	fp, [r5, #8]
   d7bd8:	9307      	str	r3, [sp, #28]
   d7bda:	f7fc fa5c 	bl	d4096 <_Znwj>
   d7bde:	4604      	mov	r4, r0
   d7be0:	b138      	cbz	r0, d7bf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7be2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7be6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7bea:	f8c0 b004 	str.w	fp, [r0, #4]
   d7bee:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7bf2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7bf4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7bf6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7bf8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7bfa:	f7fc fa4c 	bl	d4096 <_Znwj>
   d7bfe:	b128      	cbz	r0, d7c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7c00:	2301      	movs	r3, #1
   d7c02:	6043      	str	r3, [r0, #4]
   d7c04:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7c06:	4b23      	ldr	r3, [pc, #140]	; (d7c94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d7c08:	6003      	str	r3, [r0, #0]
   d7c0a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7c0c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7c0e:	4b22      	ldr	r3, [pc, #136]	; (d7c98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d7c10:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7c12:	2008      	movs	r0, #8
   d7c14:	f7fc fa3f 	bl	d4096 <_Znwj>
   d7c18:	4604      	mov	r4, r0
   d7c1a:	b128      	cbz	r0, d7c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7c1c:	9b03      	ldr	r3, [sp, #12]
   d7c1e:	f840 3b04 	str.w	r3, [r0], #4
   d7c22:	a904      	add	r1, sp, #16
   d7c24:	f7ff fc98 	bl	d7558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7c28:	9500      	str	r5, [sp, #0]
   d7c2a:	fa5f f38a 	uxtb.w	r3, sl
   d7c2e:	464a      	mov	r2, r9
   d7c30:	4641      	mov	r1, r8
   d7c32:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7c34:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7c36:	f7fe fe43 	bl	d68c0 <spark_send_event>
   d7c3a:	b9b8      	cbnz	r0, d7c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7c3c:	9b03      	ldr	r3, [sp, #12]
   d7c3e:	785b      	ldrb	r3, [r3, #1]
   d7c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7c44:	b993      	cbnz	r3, d7c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7c46:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7c4a:	a905      	add	r1, sp, #20
   d7c4c:	a803      	add	r0, sp, #12
   d7c4e:	9205      	str	r2, [sp, #20]
   d7c50:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7c54:	f7ff ff1a 	bl	d7a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7c58:	9805      	ldr	r0, [sp, #20]
   d7c5a:	f7fe fe59 	bl	d6910 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7c5e:	a805      	add	r0, sp, #20
   d7c60:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7c62:	f7ff fec5 	bl	d79f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7c66:	a806      	add	r0, sp, #24
   d7c68:	f7ff fc60 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7c6c:	9b03      	ldr	r3, [sp, #12]
   d7c6e:	9305      	str	r3, [sp, #20]
   d7c70:	a904      	add	r1, sp, #16
   d7c72:	a806      	add	r0, sp, #24
   d7c74:	f7ff fc70 	bl	d7558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7c78:	a905      	add	r1, sp, #20
   d7c7a:	4630      	mov	r0, r6
   d7c7c:	f7ff fea7 	bl	d79ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7c80:	a806      	add	r0, sp, #24
   d7c82:	f7ff fc53 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c86:	a804      	add	r0, sp, #16
   d7c88:	f7ff fc50 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d7c8c:	4630      	mov	r0, r6
   d7c8e:	b00b      	add	sp, #44	; 0x2c
   d7c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c94:	000ddce0 	.word	0x000ddce0
   d7c98:	000d7e09 	.word	0x000d7e09

000d7c9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7c9c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ca0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7ca2:	d006      	beq.n	d7cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7ca4:	2a03      	cmp	r2, #3
   d7ca6:	d017      	beq.n	d7cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7ca8:	2a01      	cmp	r2, #1
   d7caa:	d121      	bne.n	d7cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7cac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7cae:	6003      	str	r3, [r0, #0]
	      break;
   d7cb0:	e01e      	b.n	d7cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7cb2:	2018      	movs	r0, #24
   d7cb4:	680e      	ldr	r6, [r1, #0]
   d7cb6:	f7fc f9ee 	bl	d4096 <_Znwj>
   d7cba:	4605      	mov	r5, r0
   d7cbc:	b150      	cbz	r0, d7cd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7cbe:	4631      	mov	r1, r6
   d7cc0:	f7ff fed4 	bl	d7a6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7cc4:	6930      	ldr	r0, [r6, #16]
   d7cc6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7cca:	b108      	cbz	r0, d7cd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7ccc:	f002 fb92 	bl	da3f4 <strdup>
   d7cd0:	6128      	str	r0, [r5, #16]
   d7cd2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7cd4:	6025      	str	r5, [r4, #0]
   d7cd6:	e00b      	b.n	d7cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7cd8:	6804      	ldr	r4, [r0, #0]
   d7cda:	b14c      	cbz	r4, d7cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7cdc:	6920      	ldr	r0, [r4, #16]
   d7cde:	f7fe fe17 	bl	d6910 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	f7ff fdab 	bl	d783e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7ce8:	2118      	movs	r1, #24
   d7cea:	4620      	mov	r0, r4
   d7cec:	f001 fab8 	bl	d9260 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7cf0:	2000      	movs	r0, #0
   d7cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7cf4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7cf6:	2300      	movs	r3, #0
   d7cf8:	6083      	str	r3, [r0, #8]
   d7cfa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7cfc:	4604      	mov	r4, r0
   d7cfe:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7d00:	b12b      	cbz	r3, d7d0e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7d02:	2202      	movs	r2, #2
   d7d04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7d06:	68eb      	ldr	r3, [r5, #12]
   d7d08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7d0a:	68ab      	ldr	r3, [r5, #8]
   d7d0c:	60a3      	str	r3, [r4, #8]
	}
    }
   d7d0e:	4620      	mov	r0, r4
   d7d10:	bd38      	pop	{r3, r4, r5, pc}

000d7d12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7d12:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7d14:	b570      	push	{r4, r5, r6, lr}
   d7d16:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7d18:	d006      	beq.n	d7d28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7d1a:	2a03      	cmp	r2, #3
   d7d1c:	d011      	beq.n	d7d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7d1e:	2a01      	cmp	r2, #1
   d7d20:	d118      	bne.n	d7d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7d22:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7d24:	6003      	str	r3, [r0, #0]
	      break;
   d7d26:	e015      	b.n	d7d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7d28:	2014      	movs	r0, #20
   d7d2a:	680e      	ldr	r6, [r1, #0]
   d7d2c:	f7fc f9b3 	bl	d4096 <_Znwj>
   d7d30:	4605      	mov	r5, r0
   d7d32:	b120      	cbz	r0, d7d3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7d34:	4631      	mov	r1, r6
   d7d36:	f7ff ffdd 	bl	d7cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7d3a:	7c33      	ldrb	r3, [r6, #16]
   d7d3c:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7d3e:	6025      	str	r5, [r4, #0]
   d7d40:	e008      	b.n	d7d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7d42:	6804      	ldr	r4, [r0, #0]
   d7d44:	b134      	cbz	r4, d7d54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7d46:	4620      	mov	r0, r4
   d7d48:	f7ff fd79 	bl	d783e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7d4c:	2114      	movs	r1, #20
   d7d4e:	4620      	mov	r0, r4
   d7d50:	f001 fa86 	bl	d9260 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7d54:	2000      	movs	r0, #0
   d7d56:	bd70      	pop	{r4, r5, r6, pc}

000d7d58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7d58:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7d5a:	2300      	movs	r3, #0
   d7d5c:	b087      	sub	sp, #28
   d7d5e:	460c      	mov	r4, r1
   d7d60:	f3bf 8f5f 	dmb	sy
   d7d64:	e850 6f00 	ldrex	r6, [r0]
   d7d68:	e840 3200 	strex	r2, r3, [r0]
   d7d6c:	2a00      	cmp	r2, #0
   d7d6e:	d1f9      	bne.n	d7d64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7d70:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7d74:	2e00      	cmp	r6, #0
   d7d76:	d03f      	beq.n	d7df8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7d78:	4618      	mov	r0, r3
   d7d7a:	f7fe fd03 	bl	d6784 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7d7e:	4607      	mov	r7, r0
   d7d80:	b120      	cbz	r0, d7d8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7d82:	4621      	mov	r1, r4
   d7d84:	4630      	mov	r0, r6
   d7d86:	f7ff fe61 	bl	d7a4c <_ZNKSt8functionIFvRKbEEclES1_>
   d7d8a:	e02e      	b.n	d7dea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7d8c:	4631      	mov	r1, r6
   d7d8e:	a801      	add	r0, sp, #4
   d7d90:	f7ff ffb0 	bl	d7cf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d94:	7823      	ldrb	r3, [r4, #0]
   d7d96:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7d9a:	2010      	movs	r0, #16
   d7d9c:	f7fc f97b 	bl	d4096 <_Znwj>
   d7da0:	4605      	mov	r5, r0
   d7da2:	b1d0      	cbz	r0, d7dda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7da4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7da6:	2014      	movs	r0, #20
   d7da8:	f7fc f975 	bl	d4096 <_Znwj>
   d7dac:	4604      	mov	r4, r0
   d7dae:	b178      	cbz	r0, d7dd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7db0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7db2:	4601      	mov	r1, r0
   d7db4:	a801      	add	r0, sp, #4
   d7db6:	f7ff fd51 	bl	d785c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7dba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7dbc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7dbe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7dc0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7dc2:	9203      	str	r2, [sp, #12]
   d7dc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7dc6:	60e3      	str	r3, [r4, #12]
   d7dc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7dcc:	9204      	str	r2, [sp, #16]
   d7dce:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7dd0:	4b0a      	ldr	r3, [pc, #40]	; (d7dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7dd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7dd4:	4b0a      	ldr	r3, [pc, #40]	; (d7e00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7dd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7dd8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7dda:	a801      	add	r0, sp, #4
   d7ddc:	f7ff fd2f 	bl	d783e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7de0:	2200      	movs	r2, #0
   d7de2:	4629      	mov	r1, r5
   d7de4:	4807      	ldr	r0, [pc, #28]	; (d7e04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7de6:	f7fe fcd5 	bl	d6794 <application_thread_invoke>
   d7dea:	4630      	mov	r0, r6
   d7dec:	f7ff fd27 	bl	d783e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7df0:	2110      	movs	r1, #16
   d7df2:	4630      	mov	r0, r6
   d7df4:	f001 fa34 	bl	d9260 <_ZdlPvj>
        }
    }
   d7df8:	b007      	add	sp, #28
   d7dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7dfc:	000d7a5f 	.word	0x000d7a5f
   d7e00:	000d7d13 	.word	0x000d7d13
   d7e04:	000d81a5 	.word	0x000d81a5

000d7e08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7e08:	b530      	push	{r4, r5, lr}
   d7e0a:	b085      	sub	sp, #20
   d7e0c:	4604      	mov	r4, r0
   d7e0e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7e10:	4668      	mov	r0, sp
   d7e12:	4611      	mov	r1, r2
   d7e14:	f7ff fdec 	bl	d79f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7e18:	b17c      	cbz	r4, d7e3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7e1a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7e1c:	4628      	mov	r0, r5
   d7e1e:	b10d      	cbz	r5, d7e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7e20:	f002 fae8 	bl	da3f4 <strdup>
   d7e24:	9002      	str	r0, [sp, #8]
   d7e26:	a902      	add	r1, sp, #8
   d7e28:	4668      	mov	r0, sp
   d7e2a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7e2e:	f7ff fe2d 	bl	d7a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7e32:	9802      	ldr	r0, [sp, #8]
   d7e34:	f7fe fd6c 	bl	d6910 <free>
   d7e38:	e01d      	b.n	d7e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7e3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7e3c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7e40:	f04f 0201 	mov.w	r2, #1
   d7e44:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7e48:	42a3      	cmp	r3, r4
   d7e4a:	d103      	bne.n	d7e54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7e4c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7e50:	2900      	cmp	r1, #0
   d7e52:	d1f7      	bne.n	d7e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7e54:	d002      	beq.n	d7e5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7e56:	f88d 3008 	strb.w	r3, [sp, #8]
   d7e5a:	e00c      	b.n	d7e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7e5c:	f110 010c 	adds.w	r1, r0, #12
   d7e60:	f04f 0301 	mov.w	r3, #1
   d7e64:	bf18      	it	ne
   d7e66:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7e68:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7e6c:	3004      	adds	r0, #4
   d7e6e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7e72:	f7ff ff71 	bl	d7d58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7e76:	a801      	add	r0, sp, #4
   d7e78:	f7ff fb58 	bl	d752c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7e7c:	b005      	add	sp, #20
   d7e7e:	bd30      	pop	{r4, r5, pc}

000d7e80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7e80:	4770      	bx	lr

000d7e82 <_ZN9IPAddressD0Ev>:
   d7e82:	b510      	push	{r4, lr}
   d7e84:	2118      	movs	r1, #24
   d7e86:	4604      	mov	r4, r0
   d7e88:	f001 f9ea 	bl	d9260 <_ZdlPvj>
   d7e8c:	4620      	mov	r0, r4
   d7e8e:	bd10      	pop	{r4, pc}

000d7e90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7e90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7e92:	7d03      	ldrb	r3, [r0, #20]
   d7e94:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7e96:	b08d      	sub	sp, #52	; 0x34
   d7e98:	460e      	mov	r6, r1
   d7e9a:	f100 0704 	add.w	r7, r0, #4
   d7e9e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7ea2:	d002      	beq.n	d7eaa <_ZNK9IPAddress7printToER5Print+0x1a>
   d7ea4:	f100 0508 	add.w	r5, r0, #8
   d7ea8:	e018      	b.n	d7edc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7eaa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7eac:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7eae:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7eb2:	232f      	movs	r3, #47	; 0x2f
   d7eb4:	462a      	mov	r2, r5
   d7eb6:	200a      	movs	r0, #10
   d7eb8:	f7fe faf4 	bl	d64a4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7ebc:	4628      	mov	r0, r5
   d7ebe:	f002 ffc9 	bl	dae54 <strlen>
   d7ec2:	6833      	ldr	r3, [r6, #0]
   d7ec4:	4602      	mov	r2, r0
   d7ec6:	68db      	ldr	r3, [r3, #12]
   d7ec8:	4629      	mov	r1, r5
   d7eca:	4630      	mov	r0, r6
   d7ecc:	4798      	blx	r3
   d7ece:	e00f      	b.n	d7ef0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7ed0:	b124      	cbz	r4, d7edc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7ed2:	212e      	movs	r1, #46	; 0x2e
   d7ed4:	4630      	mov	r0, r6
   d7ed6:	f7ff faa4 	bl	d7422 <_ZN5Print5printEc>
   d7eda:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7edc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7ee0:	220a      	movs	r2, #10
   d7ee2:	4630      	mov	r0, r6
   d7ee4:	f7ff fae3 	bl	d74ae <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7ee8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7eea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7eec:	d1f0      	bne.n	d7ed0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7eee:	4620      	mov	r0, r4
    }
    return n;
}
   d7ef0:	b00d      	add	sp, #52	; 0x34
   d7ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ef4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7ef4:	b510      	push	{r4, lr}
   d7ef6:	4b05      	ldr	r3, [pc, #20]	; (d7f0c <_ZN9IPAddressC1Ev+0x18>)
   d7ef8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7efa:	2211      	movs	r2, #17
   d7efc:	f840 3b04 	str.w	r3, [r0], #4
   d7f00:	2100      	movs	r1, #0
   d7f02:	f002 fa19 	bl	da338 <memset>
{
    clear();
}
   d7f06:	4620      	mov	r0, r4
   d7f08:	bd10      	pop	{r4, pc}
   d7f0a:	bf00      	nop
   d7f0c:	000ddcfc 	.word	0x000ddcfc

000d7f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7f10:	4603      	mov	r3, r0
   d7f12:	4a07      	ldr	r2, [pc, #28]	; (d7f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7f14:	b510      	push	{r4, lr}
   d7f16:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7f1a:	f101 0210 	add.w	r2, r1, #16
   d7f1e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7f22:	f843 4b04 	str.w	r4, [r3], #4
   d7f26:	4291      	cmp	r1, r2
   d7f28:	d1f9      	bne.n	d7f1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7f2a:	780a      	ldrb	r2, [r1, #0]
   d7f2c:	701a      	strb	r2, [r3, #0]
}
   d7f2e:	bd10      	pop	{r4, pc}
   d7f30:	000ddcfc 	.word	0x000ddcfc

000d7f34 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7f34:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7f36:	2b04      	cmp	r3, #4
   d7f38:	d101      	bne.n	d7f3e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7f3a:	6840      	ldr	r0, [r0, #4]
   d7f3c:	e008      	b.n	d7f50 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7f3e:	2b06      	cmp	r3, #6
   d7f40:	d10a      	bne.n	d7f58 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d7f42:	6843      	ldr	r3, [r0, #4]
   d7f44:	b153      	cbz	r3, d7f5c <_ZNK9IPAddresscvbEv+0x28>
   d7f46:	6883      	ldr	r3, [r0, #8]
   d7f48:	b143      	cbz	r3, d7f5c <_ZNK9IPAddresscvbEv+0x28>
   d7f4a:	68c3      	ldr	r3, [r0, #12]
   d7f4c:	b133      	cbz	r3, d7f5c <_ZNK9IPAddresscvbEv+0x28>
   d7f4e:	6900      	ldr	r0, [r0, #16]
   d7f50:	3000      	adds	r0, #0
   d7f52:	bf18      	it	ne
   d7f54:	2001      	movne	r0, #1
   d7f56:	4770      	bx	lr
   d7f58:	2000      	movs	r0, #0
   d7f5a:	4770      	bx	lr
   d7f5c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7f5e:	4770      	bx	lr

000d7f60 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7f60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7f62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7f66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7f6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7f6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7f72:	2304      	movs	r3, #4
   d7f74:	6041      	str	r1, [r0, #4]
   d7f76:	7503      	strb	r3, [r0, #20]
   d7f78:	bd10      	pop	{r4, pc}

000d7f7a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7f7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7f7c:	780d      	ldrb	r5, [r1, #0]
   d7f7e:	788b      	ldrb	r3, [r1, #2]
   d7f80:	784a      	ldrb	r2, [r1, #1]
   d7f82:	78c9      	ldrb	r1, [r1, #3]
   d7f84:	9100      	str	r1, [sp, #0]
   d7f86:	4629      	mov	r1, r5
   d7f88:	f7ff ffea 	bl	d7f60 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7f8c:	b003      	add	sp, #12
   d7f8e:	bd30      	pop	{r4, r5, pc}

000d7f90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f90:	7441      	strb	r1, [r0, #17]
   d7f92:	4770      	bx	lr

000d7f94 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7f94:	4770      	bx	lr

000d7f96 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7f96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7f98:	2100      	movs	r1, #0
   d7f9a:	7c00      	ldrb	r0, [r0, #16]
   d7f9c:	f7fe fba2 	bl	d66e4 <HAL_USB_USART_Receive_Data>
}
   d7fa0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7fa4:	bf28      	it	cs
   d7fa6:	f04f 30ff 	movcs.w	r0, #4294967295
   d7faa:	bd08      	pop	{r3, pc}

000d7fac <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7fac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7fae:	2101      	movs	r1, #1
   d7fb0:	7c00      	ldrb	r0, [r0, #16]
   d7fb2:	f7fe fb97 	bl	d66e4 <HAL_USB_USART_Receive_Data>
}
   d7fb6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7fba:	bf28      	it	cs
   d7fbc:	f04f 30ff 	movcs.w	r0, #4294967295
   d7fc0:	bd08      	pop	{r3, pc}

000d7fc2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7fc2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7fc4:	7c00      	ldrb	r0, [r0, #16]
   d7fc6:	f7fe fb85 	bl	d66d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7fca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7fce:	bd08      	pop	{r3, pc}

000d7fd0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7fd0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7fd2:	7c00      	ldrb	r0, [r0, #16]
   d7fd4:	f7fe fb76 	bl	d66c4 <HAL_USB_USART_Available_Data>
}
   d7fd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7fdc:	bd08      	pop	{r3, pc}

000d7fde <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7fde:	7c00      	ldrb	r0, [r0, #16]
   d7fe0:	f7fe bb90 	b.w	d6704 <HAL_USB_USART_Flush_Data>

000d7fe4 <_ZN9USBSerialD0Ev>:
   d7fe4:	b510      	push	{r4, lr}
   d7fe6:	2114      	movs	r1, #20
   d7fe8:	4604      	mov	r4, r0
   d7fea:	f001 f939 	bl	d9260 <_ZdlPvj>
   d7fee:	4620      	mov	r0, r4
   d7ff0:	bd10      	pop	{r4, pc}

000d7ff2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ff2:	b538      	push	{r3, r4, r5, lr}
   d7ff4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ff6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ff8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ffa:	f7fe fb6b 	bl	d66d4 <HAL_USB_USART_Available_Data_For_Write>
   d7ffe:	2800      	cmp	r0, #0
   d8000:	dc01      	bgt.n	d8006 <_ZN9USBSerial5writeEh+0x14>
   d8002:	7c60      	ldrb	r0, [r4, #17]
   d8004:	b128      	cbz	r0, d8012 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8006:	4629      	mov	r1, r5
   d8008:	7c20      	ldrb	r0, [r4, #16]
   d800a:	f7fe fb73 	bl	d66f4 <HAL_USB_USART_Send_Data>
   d800e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8012:	bd38      	pop	{r3, r4, r5, pc}

000d8014 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8014:	b510      	push	{r4, lr}
   d8016:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8018:	2300      	movs	r3, #0
   d801a:	6063      	str	r3, [r4, #4]
   d801c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8020:	60a3      	str	r3, [r4, #8]
   d8022:	4b05      	ldr	r3, [pc, #20]	; (d8038 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8024:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8026:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8028:	4608      	mov	r0, r1
{
  _serial = serial;
   d802a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d802c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d802e:	4611      	mov	r1, r2
   d8030:	f7fe fb38 	bl	d66a4 <HAL_USB_USART_Init>
}
   d8034:	4620      	mov	r0, r4
   d8036:	bd10      	pop	{r4, pc}
   d8038:	000ddd10 	.word	0x000ddd10

000d803c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d803c:	2200      	movs	r2, #0
   d803e:	7c00      	ldrb	r0, [r0, #16]
   d8040:	f7fe bb38 	b.w	d66b4 <HAL_USB_USART_Begin>

000d8044 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8044:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8046:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8048:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d804a:	2100      	movs	r1, #0
   d804c:	f002 f974 	bl	da338 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8050:	4620      	mov	r0, r4
   d8052:	bd10      	pop	{r4, pc}

000d8054 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8054:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8056:	4d0e      	ldr	r5, [pc, #56]	; (d8090 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8058:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d805a:	a801      	add	r0, sp, #4
   d805c:	f7ff fff2 	bl	d8044 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8060:	6829      	ldr	r1, [r5, #0]
   d8062:	f011 0401 	ands.w	r4, r1, #1
   d8066:	d110      	bne.n	d808a <_Z16_fetch_usbserialv+0x36>
   d8068:	4628      	mov	r0, r5
   d806a:	f7fc f827 	bl	d40bc <__cxa_guard_acquire>
   d806e:	b160      	cbz	r0, d808a <_Z16_fetch_usbserialv+0x36>
   d8070:	aa01      	add	r2, sp, #4
   d8072:	4621      	mov	r1, r4
   d8074:	4807      	ldr	r0, [pc, #28]	; (d8094 <_Z16_fetch_usbserialv+0x40>)
   d8076:	f7ff ffcd 	bl	d8014 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d807a:	4628      	mov	r0, r5
   d807c:	f7fc f823 	bl	d40c6 <__cxa_guard_release>
   d8080:	4a05      	ldr	r2, [pc, #20]	; (d8098 <_Z16_fetch_usbserialv+0x44>)
   d8082:	4906      	ldr	r1, [pc, #24]	; (d809c <_Z16_fetch_usbserialv+0x48>)
   d8084:	4803      	ldr	r0, [pc, #12]	; (d8094 <_Z16_fetch_usbserialv+0x40>)
   d8086:	f001 f8dd 	bl	d9244 <__aeabi_atexit>
	return _usbserial;
}
   d808a:	4802      	ldr	r0, [pc, #8]	; (d8094 <_Z16_fetch_usbserialv+0x40>)
   d808c:	b007      	add	sp, #28
   d808e:	bd30      	pop	{r4, r5, pc}
   d8090:	2003e2d0 	.word	0x2003e2d0
   d8094:	2003e2d4 	.word	0x2003e2d4
   d8098:	2003d7d0 	.word	0x2003d7d0
   d809c:	000d7f95 	.word	0x000d7f95

000d80a0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d80a0:	4770      	bx	lr

000d80a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d80a2:	7441      	strb	r1, [r0, #17]
   d80a4:	4770      	bx	lr

000d80a6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d80a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d80a8:	7c00      	ldrb	r0, [r0, #16]
   d80aa:	f7fe fa5b 	bl	d6564 <HAL_USART_Available_Data_For_Write>
}
   d80ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80b2:	bd08      	pop	{r3, pc}

000d80b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d80b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d80b6:	7c00      	ldrb	r0, [r0, #16]
   d80b8:	f7fe fa2c 	bl	d6514 <HAL_USART_Available_Data>
}
   d80bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80c0:	bd08      	pop	{r3, pc}

000d80c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d80c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d80c4:	7c00      	ldrb	r0, [r0, #16]
   d80c6:	f7fe fa35 	bl	d6534 <HAL_USART_Peek_Data>
}
   d80ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80ce:	bf28      	it	cs
   d80d0:	f04f 30ff 	movcs.w	r0, #4294967295
   d80d4:	bd08      	pop	{r3, pc}

000d80d6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d80d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d80d8:	7c00      	ldrb	r0, [r0, #16]
   d80da:	f7fe fa23 	bl	d6524 <HAL_USART_Read_Data>
}
   d80de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80e2:	bf28      	it	cs
   d80e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d80e8:	bd08      	pop	{r3, pc}

000d80ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d80ea:	7c00      	ldrb	r0, [r0, #16]
   d80ec:	f7fe ba2a 	b.w	d6544 <HAL_USART_Flush_Data>

000d80f0 <_ZN11USARTSerialD0Ev>:
   d80f0:	b510      	push	{r4, lr}
   d80f2:	2114      	movs	r1, #20
   d80f4:	4604      	mov	r4, r0
   d80f6:	f001 f8b3 	bl	d9260 <_ZdlPvj>
   d80fa:	4620      	mov	r0, r4
   d80fc:	bd10      	pop	{r4, pc}

000d80fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d80fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8100:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8102:	4604      	mov	r4, r0
   d8104:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8106:	b925      	cbnz	r5, d8112 <_ZN11USARTSerial5writeEh+0x14>
   d8108:	7c00      	ldrb	r0, [r0, #16]
   d810a:	f7fe fa2b 	bl	d6564 <HAL_USART_Available_Data_For_Write>
   d810e:	2800      	cmp	r0, #0
   d8110:	dd05      	ble.n	d811e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8112:	4631      	mov	r1, r6
   d8114:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d811a:	f7fe b9f3 	b.w	d6504 <HAL_USART_Write_Data>
  }
  return 0;
}
   d811e:	4628      	mov	r0, r5
   d8120:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8124:	b510      	push	{r4, lr}
   d8126:	4604      	mov	r4, r0
   d8128:	4608      	mov	r0, r1
   d812a:	4611      	mov	r1, r2
   d812c:	2200      	movs	r2, #0
   d812e:	6062      	str	r2, [r4, #4]
   d8130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8134:	60a2      	str	r2, [r4, #8]
   d8136:	4a05      	ldr	r2, [pc, #20]	; (d814c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8138:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d813a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d813c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d813e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8140:	461a      	mov	r2, r3
   d8142:	f7fe f9d7 	bl	d64f4 <HAL_USART_Init>
}
   d8146:	4620      	mov	r0, r4
   d8148:	bd10      	pop	{r4, pc}
   d814a:	bf00      	nop
   d814c:	000ddd40 	.word	0x000ddd40

000d8150 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8150:	7c00      	ldrb	r0, [r0, #16]
   d8152:	f7fe b9ff 	b.w	d6554 <HAL_USART_Is_Enabled>
	...

000d8158 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8158:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d815a:	4d0c      	ldr	r5, [pc, #48]	; (d818c <_Z22__fetch_global_Serial1v+0x34>)
   d815c:	6829      	ldr	r1, [r5, #0]
   d815e:	f011 0401 	ands.w	r4, r1, #1
   d8162:	d111      	bne.n	d8188 <_Z22__fetch_global_Serial1v+0x30>
   d8164:	4628      	mov	r0, r5
   d8166:	f7fb ffa9 	bl	d40bc <__cxa_guard_acquire>
   d816a:	b168      	cbz	r0, d8188 <_Z22__fetch_global_Serial1v+0x30>
   d816c:	4a08      	ldr	r2, [pc, #32]	; (d8190 <_Z22__fetch_global_Serial1v+0x38>)
   d816e:	4b09      	ldr	r3, [pc, #36]	; (d8194 <_Z22__fetch_global_Serial1v+0x3c>)
   d8170:	4809      	ldr	r0, [pc, #36]	; (d8198 <_Z22__fetch_global_Serial1v+0x40>)
   d8172:	4621      	mov	r1, r4
   d8174:	f7ff ffd6 	bl	d8124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8178:	4628      	mov	r0, r5
   d817a:	f7fb ffa4 	bl	d40c6 <__cxa_guard_release>
   d817e:	4a07      	ldr	r2, [pc, #28]	; (d819c <_Z22__fetch_global_Serial1v+0x44>)
   d8180:	4907      	ldr	r1, [pc, #28]	; (d81a0 <_Z22__fetch_global_Serial1v+0x48>)
   d8182:	4805      	ldr	r0, [pc, #20]	; (d8198 <_Z22__fetch_global_Serial1v+0x40>)
   d8184:	f001 f85e 	bl	d9244 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8188:	4803      	ldr	r0, [pc, #12]	; (d8198 <_Z22__fetch_global_Serial1v+0x40>)
   d818a:	bd38      	pop	{r3, r4, r5, pc}
   d818c:	2003e380 	.word	0x2003e380
   d8190:	2003e384 	.word	0x2003e384
   d8194:	2003e2fc 	.word	0x2003e2fc
   d8198:	2003e2e8 	.word	0x2003e2e8
   d819c:	2003d7d0 	.word	0x2003d7d0
   d81a0:	000d80a1 	.word	0x000d80a1

000d81a4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d81a4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d81a6:	6883      	ldr	r3, [r0, #8]
   d81a8:	4604      	mov	r4, r0
   d81aa:	b90b      	cbnz	r3, d81b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d81ac:	f001 f924 	bl	d93f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d81b0:	68c3      	ldr	r3, [r0, #12]
   d81b2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d81b4:	68a3      	ldr	r3, [r4, #8]
   d81b6:	b11b      	cbz	r3, d81c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d81b8:	2203      	movs	r2, #3
   d81ba:	4621      	mov	r1, r4
   d81bc:	4620      	mov	r0, r4
   d81be:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d81c0:	4620      	mov	r0, r4
   d81c2:	2110      	movs	r1, #16
}
   d81c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d81c8:	f001 b84a 	b.w	d9260 <_ZdlPvj>

000d81cc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d81cc:	4770      	bx	lr

000d81ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d81ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81d0:	4606      	mov	r6, r0
   d81d2:	4615      	mov	r5, r2
   d81d4:	460c      	mov	r4, r1
   d81d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d81d8:	42bc      	cmp	r4, r7
   d81da:	d006      	beq.n	d81ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d81dc:	6833      	ldr	r3, [r6, #0]
   d81de:	f814 1b01 	ldrb.w	r1, [r4], #1
   d81e2:	689b      	ldr	r3, [r3, #8]
   d81e4:	4630      	mov	r0, r6
   d81e6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d81e8:	e7f6      	b.n	d81d8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d81ea:	4628      	mov	r0, r5
   d81ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d81ee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d81ee:	2200      	movs	r2, #0
   d81f0:	7c00      	ldrb	r0, [r0, #16]
   d81f2:	f7fe b9d7 	b.w	d65a4 <HAL_I2C_Write_Data>

000d81f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d81f6:	2100      	movs	r1, #0
   d81f8:	7c00      	ldrb	r0, [r0, #16]
   d81fa:	f7fe b9db 	b.w	d65b4 <HAL_I2C_Available_Data>

000d81fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d81fe:	2100      	movs	r1, #0
   d8200:	7c00      	ldrb	r0, [r0, #16]
   d8202:	f7fe b9df 	b.w	d65c4 <HAL_I2C_Read_Data>

000d8206 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8206:	2100      	movs	r1, #0
   d8208:	7c00      	ldrb	r0, [r0, #16]
   d820a:	f7fe b9e3 	b.w	d65d4 <HAL_I2C_Peek_Data>

000d820e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d820e:	2100      	movs	r1, #0
   d8210:	7c00      	ldrb	r0, [r0, #16]
   d8212:	f7fe b9e7 	b.w	d65e4 <HAL_I2C_Flush_Data>

000d8216 <_ZN7TwoWireD0Ev>:
   d8216:	b510      	push	{r4, lr}
   d8218:	2114      	movs	r1, #20
   d821a:	4604      	mov	r4, r0
   d821c:	f001 f820 	bl	d9260 <_ZdlPvj>
   d8220:	4620      	mov	r0, r4
   d8222:	bd10      	pop	{r4, pc}

000d8224 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d8224:	b510      	push	{r4, lr}
   d8226:	4604      	mov	r4, r0
   d8228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d822c:	4608      	mov	r0, r1
   d822e:	60a3      	str	r3, [r4, #8]
   d8230:	2100      	movs	r1, #0
   d8232:	4b04      	ldr	r3, [pc, #16]	; (d8244 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d8234:	7420      	strb	r0, [r4, #16]
   d8236:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d8238:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d823a:	f7fe f9e3 	bl	d6604 <HAL_I2C_Init>

}
   d823e:	4620      	mov	r0, r4
   d8240:	bd10      	pop	{r4, pc}
   d8242:	bf00      	nop
   d8244:	000ddd70 	.word	0x000ddd70

000d8248 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8248:	2300      	movs	r3, #0
   d824a:	461a      	mov	r2, r3
   d824c:	4619      	mov	r1, r3
   d824e:	7c00      	ldrb	r0, [r0, #16]
   d8250:	f7fe b990 	b.w	d6574 <HAL_I2C_Begin>

000d8254 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8254:	2200      	movs	r2, #0
   d8256:	7c00      	ldrb	r0, [r0, #16]
   d8258:	f7fe b994 	b.w	d6584 <HAL_I2C_Begin_Transmission>

000d825c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d825c:	b2c9      	uxtb	r1, r1
   d825e:	f7ff bff9 	b.w	d8254 <_ZN7TwoWire17beginTransmissionEh>

000d8262 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8262:	2200      	movs	r2, #0
   d8264:	7c00      	ldrb	r0, [r0, #16]
   d8266:	f7fe b995 	b.w	d6594 <HAL_I2C_End_Transmission>

000d826a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d826a:	2101      	movs	r1, #1
   d826c:	f7ff bff9 	b.w	d8262 <_ZN7TwoWire15endTransmissionEh>

000d8270 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8270:	2100      	movs	r1, #0
   d8272:	7c00      	ldrb	r0, [r0, #16]
   d8274:	f7fe b9be 	b.w	d65f4 <HAL_I2C_Is_Enabled>

000d8278 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d8278:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d827a:	2301      	movs	r3, #1
   d827c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d827e:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d8280:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d8282:	b10b      	cbz	r3, d8288 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d8284:	68c0      	ldr	r0, [r0, #12]
   d8286:	e006      	b.n	d8296 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8288:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d828a:	b128      	cbz	r0, d8298 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d828c:	6883      	ldr	r3, [r0, #8]
   d828e:	b90b      	cbnz	r3, d8294 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d8290:	f001 f8b2 	bl	d93f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8294:	68c3      	ldr	r3, [r0, #12]
   d8296:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d8298:	2301      	movs	r3, #1
   d829a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d829c:	2000      	movs	r0, #0
    }
   d829e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d82a2:	f7fe b8f7 	b.w	d6494 <os_thread_exit>

000d82a6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d82a6:	2200      	movs	r2, #0
   d82a8:	4611      	mov	r1, r2
   d82aa:	6840      	ldr	r0, [r0, #4]
   d82ac:	f7fe bad8 	b.w	d6860 <network_listening>

000d82b0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d82b0:	2200      	movs	r2, #0
   d82b2:	4611      	mov	r1, r2
   d82b4:	6840      	ldr	r0, [r0, #4]
   d82b6:	f7fe bae3 	b.w	d6880 <network_get_listen_timeout>

000d82ba <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d82ba:	2200      	movs	r2, #0
   d82bc:	6840      	ldr	r0, [r0, #4]
   d82be:	f7fe bad7 	b.w	d6870 <network_set_listen_timeout>

000d82c2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d82c2:	2200      	movs	r2, #0
   d82c4:	f081 0101 	eor.w	r1, r1, #1
   d82c8:	6840      	ldr	r0, [r0, #4]
   d82ca:	f7fe bac1 	b.w	d6850 <network_listen>

000d82ce <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d82ce:	2300      	movs	r3, #0
   d82d0:	461a      	mov	r2, r3
   d82d2:	4619      	mov	r1, r3
   d82d4:	6840      	ldr	r0, [r0, #4]
   d82d6:	f7fe bab3 	b.w	d6840 <network_off>

000d82da <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d82da:	2300      	movs	r3, #0
   d82dc:	461a      	mov	r2, r3
   d82de:	4619      	mov	r1, r3
   d82e0:	6840      	ldr	r0, [r0, #4]
   d82e2:	f7fe baa5 	b.w	d6830 <network_on>

000d82e6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d82e6:	2200      	movs	r2, #0
   d82e8:	4611      	mov	r1, r2
   d82ea:	6840      	ldr	r0, [r0, #4]
   d82ec:	f7fe ba98 	b.w	d6820 <network_ready>

000d82f0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d82f0:	2200      	movs	r2, #0
   d82f2:	4611      	mov	r1, r2
   d82f4:	6840      	ldr	r0, [r0, #4]
   d82f6:	f7fe ba83 	b.w	d6800 <network_connecting>

000d82fa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d82fa:	2200      	movs	r2, #0
   d82fc:	2102      	movs	r1, #2
   d82fe:	6840      	ldr	r0, [r0, #4]
   d8300:	f7fe ba86 	b.w	d6810 <network_disconnect>

000d8304 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8304:	2300      	movs	r3, #0
   d8306:	461a      	mov	r2, r3
   d8308:	6840      	ldr	r0, [r0, #4]
   d830a:	f7fe ba71 	b.w	d67f0 <network_connect>

000d830e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d830e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8310:	4605      	mov	r5, r0
   d8312:	b188      	cbz	r0, d8338 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8314:	6804      	ldr	r4, [r0, #0]
   d8316:	b14c      	cbz	r4, d832c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8318:	68a3      	ldr	r3, [r4, #8]
   d831a:	b11b      	cbz	r3, d8324 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d831c:	2203      	movs	r2, #3
   d831e:	4621      	mov	r1, r4
   d8320:	4620      	mov	r0, r4
   d8322:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8324:	2110      	movs	r1, #16
   d8326:	4620      	mov	r0, r4
   d8328:	f000 ff9a 	bl	d9260 <_ZdlPvj>
   d832c:	4628      	mov	r0, r5
   d832e:	2114      	movs	r1, #20
      }
   d8330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8334:	f000 bf94 	b.w	d9260 <_ZdlPvj>
   d8338:	bd38      	pop	{r3, r4, r5, pc}

000d833a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d833a:	b110      	cbz	r0, d8342 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d833c:	6803      	ldr	r3, [r0, #0]
   d833e:	685b      	ldr	r3, [r3, #4]
   d8340:	4718      	bx	r3
   d8342:	4770      	bx	lr

000d8344 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8344:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8346:	6803      	ldr	r3, [r0, #0]
   d8348:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d834a:	b1bb      	cbz	r3, d837c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d834c:	6858      	ldr	r0, [r3, #4]
   d834e:	f7fe f861 	bl	d6414 <os_thread_is_current>
   d8352:	b978      	cbnz	r0, d8374 <_ZN6ThreadD1Ev+0x30>
   d8354:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8356:	7c5a      	ldrb	r2, [r3, #17]
   d8358:	b912      	cbnz	r2, d8360 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d835a:	6858      	ldr	r0, [r3, #4]
   d835c:	f7fe f86a 	bl	d6434 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8360:	6823      	ldr	r3, [r4, #0]
   d8362:	6858      	ldr	r0, [r3, #4]
   d8364:	f7fe f86e 	bl	d6444 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8368:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d836a:	2300      	movs	r3, #0
   d836c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d836e:	b128      	cbz	r0, d837c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8370:	f7ff ffcd 	bl	d830e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8374:	6820      	ldr	r0, [r4, #0]
   d8376:	b108      	cbz	r0, d837c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8378:	f7ff ffc9 	bl	d830e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d837c:	4620      	mov	r0, r4
   d837e:	bd10      	pop	{r4, pc}

000d8380 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8380:	b538      	push	{r3, r4, r5, lr}
   d8382:	4b0c      	ldr	r3, [pc, #48]	; (d83b4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d8384:	6003      	str	r3, [r0, #0]
   d8386:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8388:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d838c:	b108      	cbz	r0, d8392 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d838e:	f7fb fe88 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8392:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d8396:	b135      	cbz	r5, d83a6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8398:	4628      	mov	r0, r5
   d839a:	f7ff ffd3 	bl	d8344 <_ZN6ThreadD1Ev>
   d839e:	2104      	movs	r1, #4
   d83a0:	4628      	mov	r0, r5
   d83a2:	f000 ff5d 	bl	d9260 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d83a6:	68a0      	ldr	r0, [r4, #8]
   d83a8:	b108      	cbz	r0, d83ae <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d83aa:	f7ff ffc6 	bl	d833a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d83ae:	4620      	mov	r0, r4
   d83b0:	bd38      	pop	{r3, r4, r5, pc}
   d83b2:	bf00      	nop
   d83b4:	000ddd98 	.word	0x000ddd98

000d83b8 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d83b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d83be:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d83c2:	4606      	mov	r6, r0
   d83c4:	4688      	mov	r8, r1
   d83c6:	4691      	mov	r9, r2
   d83c8:	469a      	mov	sl, r3
   d83ca:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d83cc:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d83ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d83d0:	454b      	cmp	r3, r9
   d83d2:	d129      	bne.n	d8428 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d83d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d83d6:	4553      	cmp	r3, sl
   d83d8:	d126      	bne.n	d8428 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d83da:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d83de:	455b      	cmp	r3, fp
   d83e0:	d122      	bne.n	d8428 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d83e2:	2140      	movs	r1, #64	; 0x40
   d83e4:	4640      	mov	r0, r8
   d83e6:	f002 fd52 	bl	dae8e <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d83ea:	4641      	mov	r1, r8
   d83ec:	4602      	mov	r2, r0
   d83ee:	4620      	mov	r0, r4
   d83f0:	f002 fd38 	bl	dae64 <strncmp>
   d83f4:	b9c0      	cbnz	r0, d8428 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d83f6:	b16f      	cbz	r7, d8414 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d83f8:	210c      	movs	r1, #12
   d83fa:	4638      	mov	r0, r7
   d83fc:	f002 fd47 	bl	dae8e <strnlen>
                if (id_len)
   d8400:	4602      	mov	r2, r0
   d8402:	b138      	cbz	r0, d8414 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d8404:	2358      	movs	r3, #88	; 0x58
   d8406:	fb03 6005 	mla	r0, r3, r5, r6
   d840a:	4639      	mov	r1, r7
   d840c:	3049      	adds	r0, #73	; 0x49
   d840e:	f002 fd29 	bl	dae64 <strncmp>
   d8412:	e004      	b.n	d841e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d8414:	2058      	movs	r0, #88	; 0x58
   d8416:	fb00 6505 	mla	r5, r0, r5, r6
   d841a:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d841e:	fab0 f080 	clz	r0, r0
   d8422:	0940      	lsrs	r0, r0, #5
   d8424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d8428:	3501      	adds	r5, #1
   d842a:	2d05      	cmp	r5, #5
   d842c:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d8430:	d1cd      	bne.n	d83ce <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d8432:	2000      	movs	r0, #0
}
   d8434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8438 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d8438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d843c:	b085      	sub	sp, #20
   d843e:	4607      	mov	r7, r0
   d8440:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d8444:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d8446:	9601      	str	r6, [sp, #4]
   d8448:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d844c:	4689      	mov	r9, r1
   d844e:	9202      	str	r2, [sp, #8]
   d8450:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d8452:	f7ff ffb1 	bl	d83b8 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d8456:	2800      	cmp	r0, #0
   d8458:	d13c      	bne.n	d84d4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d845a:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d845c:	2358      	movs	r3, #88	; 0x58
   d845e:	fb03 7504 	mla	r5, r3, r4, r7
   d8462:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d8466:	f1b8 0f00 	cmp.w	r8, #0
   d846a:	d12e      	bne.n	d84ca <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d846c:	2140      	movs	r1, #64	; 0x40
   d846e:	4648      	mov	r0, r9
   d8470:	f002 fd0d 	bl	dae8e <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d8474:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d8476:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d8478:	4602      	mov	r2, r0
   d847a:	4628      	mov	r0, r5
   d847c:	f001 ff51 	bl	da322 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d8480:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d8484:	4641      	mov	r1, r8
   d8486:	eb05 000b 	add.w	r0, r5, fp
   d848a:	f001 ff55 	bl	da338 <memset>
            event_handlers[i].handler = handler;
   d848e:	9b02      	ldr	r3, [sp, #8]
   d8490:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d8492:	9b03      	ldr	r3, [sp, #12]
   d8494:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d8496:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d849a:	b12e      	cbz	r6, d84a8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d849c:	210c      	movs	r1, #12
   d849e:	4630      	mov	r0, r6
   d84a0:	f002 fcf5 	bl	dae8e <strnlen>
   d84a4:	4605      	mov	r5, r0
   d84a6:	e000      	b.n	d84aa <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d84a8:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d84aa:	2058      	movs	r0, #88	; 0x58
   d84ac:	4344      	muls	r4, r0
   d84ae:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d84b0:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d84b2:	462a      	mov	r2, r5
   d84b4:	4631      	mov	r1, r6
   d84b6:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d84b8:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d84ba:	f001 ff32 	bl	da322 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d84be:	2000      	movs	r0, #0
   d84c0:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d84c4:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d84c8:	e005      	b.n	d84d6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d84ca:	3401      	adds	r4, #1
   d84cc:	2c05      	cmp	r4, #5
   d84ce:	d1c6      	bne.n	d845e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d84d0:	4802      	ldr	r0, [pc, #8]	; (d84dc <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d84d2:	e000      	b.n	d84d6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d84d4:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d84d6:	b005      	add	sp, #20
   d84d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84dc:	fffffefc 	.word	0xfffffefc

000d84e0 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d84e0:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d84e2:	2300      	movs	r3, #0
   d84e4:	9301      	str	r3, [sp, #4]
   d84e6:	9300      	str	r3, [sp, #0]
   d84e8:	f7ff ffa6 	bl	d8438 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d84ec:	b003      	add	sp, #12
   d84ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d84f2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d84f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d84f6:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d84f8:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d84fa:	460d      	mov	r5, r1
   d84fc:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d84fe:	f002 fca9 	bl	dae54 <strlen>
   d8502:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d8506:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d8508:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d850a:	b1ab      	cbz	r3, d8538 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d850c:	2140      	movs	r1, #64	; 0x40
   d850e:	4620      	mov	r0, r4
   d8510:	f002 fcbd 	bl	dae8e <strnlen>

        if (event_name_length < filter_length)
   d8514:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d8516:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d8518:	d30b      	bcc.n	d8532 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d851a:	4629      	mov	r1, r5
   d851c:	4620      	mov	r0, r4
   d851e:	f001 fef1 	bl	da304 <memcmp>
        if (0 == cmp)
   d8522:	b930      	cbnz	r0, d8532 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d8524:	9000      	str	r0, [sp, #0]
   d8526:	4643      	mov	r3, r8
   d8528:	462a      	mov	r2, r5
   d852a:	4621      	mov	r1, r4
   d852c:	2058      	movs	r0, #88	; 0x58
   d852e:	f7fe f955 	bl	d67dc <system_invoke_event_handler>
   d8532:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d8534:	42b4      	cmp	r4, r6
   d8536:	d1e7      	bne.n	d8508 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d8538:	b002      	add	sp, #8
   d853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d8540 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d8540:	b530      	push	{r4, r5, lr}
   d8542:	b08d      	sub	sp, #52	; 0x34
   d8544:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d8546:	2211      	movs	r2, #17
   d8548:	2100      	movs	r1, #0
   d854a:	a801      	add	r0, sp, #4
   d854c:	f001 fef4 	bl	da338 <memset>
    addr.v = 6;
   d8550:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d8552:	aa01      	add	r2, sp, #4
   d8554:	4909      	ldr	r1, [pc, #36]	; (d857c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d8556:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d855a:	200a      	movs	r0, #10
   d855c:	f7fd ffaa 	bl	d64b4 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8560:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d8562:	a901      	add	r1, sp, #4
   d8564:	a806      	add	r0, sp, #24
   d8566:	f7ff fcd3 	bl	d7f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d856a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d856c:	3404      	adds	r4, #4
   d856e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8570:	682b      	ldr	r3, [r5, #0]
   d8572:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d8574:	2000      	movs	r0, #0
   d8576:	b00d      	add	sp, #52	; 0x34
   d8578:	bd30      	pop	{r4, r5, pc}
   d857a:	bf00      	nop
   d857c:	000dddc4 	.word	0x000dddc4

000d8580 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d8580:	b530      	push	{r4, r5, lr}
   d8582:	4604      	mov	r4, r0
   d8584:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8586:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d858a:	f7fe ffcc 	bl	d7526 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d858e:	6823      	ldr	r3, [r4, #0]
   d8590:	bb83      	cbnz	r3, d85f4 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d8592:	204c      	movs	r0, #76	; 0x4c
   d8594:	f7fb fd7f 	bl	d4096 <_Znwj>
   d8598:	4605      	mov	r5, r0
   d859a:	b108      	cbz	r0, d85a0 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d859c:	f7fe fda0 	bl	d70e0 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85a0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d85a2:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d85a4:	b108      	cbz	r0, d85aa <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d85a6:	f7ff fec8 	bl	d833a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d85aa:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d85ac:	b320      	cbz	r0, d85f8 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d85ae:	2200      	movs	r2, #0
   d85b0:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d85b4:	f7fe fdc4 	bl	d7140 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d85b8:	a908      	add	r1, sp, #32
   d85ba:	2500      	movs	r5, #0
   d85bc:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d85c0:	4811      	ldr	r0, [pc, #68]	; (d8608 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d85c2:	f7fd febf 	bl	d6344 <if_name_to_index>
   d85c6:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d85c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d85cc:	6803      	ldr	r3, [r0, #0]
   d85ce:	f249 0169 	movw	r1, #36969	; 0x9069
   d85d2:	6a1b      	ldr	r3, [r3, #32]
   d85d4:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d85d6:	a802      	add	r0, sp, #8
   d85d8:	f7ff fc8c 	bl	d7ef4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d85dc:	a802      	add	r0, sp, #8
   d85de:	f7ff ffaf 	bl	d8540 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d85e2:	2800      	cmp	r0, #0
   d85e4:	db04      	blt.n	d85f0 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d85e6:	a902      	add	r1, sp, #8
   d85e8:	6820      	ldr	r0, [r4, #0]
   d85ea:	f7fe fe15 	bl	d7218 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d85ee:	e004      	b.n	d85fa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d85f0:	4605      	mov	r5, r0
   d85f2:	e002      	b.n	d85fa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d85f4:	2500      	movs	r5, #0
   d85f6:	e000      	b.n	d85fa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d85f8:	4d04      	ldr	r5, [pc, #16]	; (d860c <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d85fa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d85fe:	f7fd ff41 	bl	d6484 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d8602:	4628      	mov	r0, r5
   d8604:	b009      	add	sp, #36	; 0x24
   d8606:	bd30      	pop	{r4, r5, pc}
   d8608:	000dddd1 	.word	0x000dddd1
   d860c:	fffffefc 	.word	0xfffffefc

000d8610 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d8610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8614:	4605      	mov	r5, r0
   d8616:	b08c      	sub	sp, #48	; 0x30
   d8618:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d861a:	460f      	mov	r7, r1
   d861c:	b109      	cbz	r1, d8622 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d861e:	780b      	ldrb	r3, [r1, #0]
   d8620:	b90b      	cbnz	r3, d8626 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d8622:	4c35      	ldr	r4, [pc, #212]	; (d86f8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d8624:	e064      	b.n	d86f0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d8626:	4608      	mov	r0, r1
   d8628:	f002 fc14 	bl	dae54 <strlen>
   d862c:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d862e:	2e00      	cmp	r6, #0
   d8630:	d05c      	beq.n	d86ec <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d8632:	4630      	mov	r0, r6
   d8634:	f002 fc0e 	bl	dae54 <strlen>
   d8638:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d863a:	f108 0302 	add.w	r3, r8, #2
   d863e:	4423      	add	r3, r4
   d8640:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d8644:	d84f      	bhi.n	d86e6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d8646:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d864a:	f7fe ff6c 	bl	d7526 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d864e:	4628      	mov	r0, r5
   d8650:	f7ff ff96 	bl	d8580 <_ZN5spark11MeshPublish14initialize_udpEv>
   d8654:	2800      	cmp	r0, #0
   d8656:	db40      	blt.n	d86da <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d8658:	4668      	mov	r0, sp
   d865a:	f7ff fc4b 	bl	d7ef4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d865e:	4668      	mov	r0, sp
   d8660:	f7ff ff6e 	bl	d8540 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d8664:	2800      	cmp	r0, #0
   d8666:	db38      	blt.n	d86da <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d8668:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d866c:	f8da 3000 	ldr.w	r3, [sl]
   d8670:	f10d 0c04 	add.w	ip, sp, #4
   d8674:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d8678:	4b20      	ldr	r3, [pc, #128]	; (d86fc <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d867a:	9306      	str	r3, [sp, #24]
   d867c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8680:	f10d 0e1c 	add.w	lr, sp, #28
   d8684:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d8688:	f8dc 3000 	ldr.w	r3, [ip]
   d868c:	f88e 3000 	strb.w	r3, [lr]
   d8690:	f249 0269 	movw	r2, #36969	; 0x9069
   d8694:	a906      	add	r1, sp, #24
   d8696:	4650      	mov	r0, sl
   d8698:	47c8      	blx	r9
   d869a:	2800      	cmp	r0, #0
   d869c:	db1d      	blt.n	d86da <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d869e:	2300      	movs	r3, #0
   d86a0:	6828      	ldr	r0, [r5, #0]
   d86a2:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d86a6:	6803      	ldr	r3, [r0, #0]
   d86a8:	2201      	movs	r2, #1
   d86aa:	68db      	ldr	r3, [r3, #12]
   d86ac:	a906      	add	r1, sp, #24
   d86ae:	4798      	blx	r3
   d86b0:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d86b2:	6803      	ldr	r3, [r0, #0]
   d86b4:	f108 0201 	add.w	r2, r8, #1
   d86b8:	68db      	ldr	r3, [r3, #12]
   d86ba:	4639      	mov	r1, r7
   d86bc:	4798      	blx	r3
    if (dataLen > 0) {
   d86be:	b12c      	cbz	r4, d86cc <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d86c0:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d86c2:	6803      	ldr	r3, [r0, #0]
   d86c4:	4622      	mov	r2, r4
   d86c6:	68db      	ldr	r3, [r3, #12]
   d86c8:	4631      	mov	r1, r6
   d86ca:	4798      	blx	r3
   d86cc:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d86ce:	6803      	ldr	r3, [r0, #0]
   d86d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d86d2:	4798      	blx	r3
   d86d4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d86d8:	e000      	b.n	d86dc <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d86da:	4604      	mov	r4, r0
   d86dc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d86e0:	f7fd fed0 	bl	d6484 <os_mutex_recursive_unlock>
   d86e4:	e004      	b.n	d86f0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d86e6:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d86ea:	e001      	b.n	d86f0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d86ec:	4634      	mov	r4, r6
   d86ee:	e7a4      	b.n	d863a <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d86f0:	4620      	mov	r0, r4
   d86f2:	b00c      	add	sp, #48	; 0x30
   d86f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86f8:	fffffef2 	.word	0xfffffef2
   d86fc:	000ddcfc 	.word	0x000ddcfc

000d8700 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d8700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8704:	4604      	mov	r4, r0
   d8706:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d870a:	460f      	mov	r7, r1
   d870c:	4690      	mov	r8, r2
   d870e:	f7fe ff0a 	bl	d7526 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d8712:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d8716:	2e00      	cmp	r6, #0
   d8718:	d13a      	bne.n	d8790 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d871a:	4928      	ldr	r1, [pc, #160]	; (d87bc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d871c:	2004      	movs	r0, #4
   d871e:	f000 fda3 	bl	d9268 <_ZnwjRKSt9nothrow_t>
   d8722:	4605      	mov	r5, r0
   d8724:	b340      	cbz	r0, d8778 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d8726:	4925      	ldr	r1, [pc, #148]	; (d87bc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d8728:	2014      	movs	r0, #20
   d872a:	f000 fd9d 	bl	d9268 <_ZnwjRKSt9nothrow_t>
   d872e:	b128      	cbz	r0, d873c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x3c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d8730:	7406      	strb	r6, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8732:	6006      	str	r6, [r0, #0]
   d8734:	6046      	str	r6, [r0, #4]
   d8736:	6086      	str	r6, [r0, #8]
   d8738:	60c6      	str	r6, [r0, #12]
   d873a:	7446      	strb	r6, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d873c:	6028      	str	r0, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d873e:	b1a8      	cbz	r0, d876c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
            goto error;
        }
        d_->func = function;
   d8740:	4b1f      	ldr	r3, [pc, #124]	; (d87c0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc0>)
   d8742:	6083      	str	r3, [r0, #8]
   d8744:	682b      	ldr	r3, [r5, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d8746:	491f      	ldr	r1, [pc, #124]	; (d87c4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d8748:	60dc      	str	r4, [r3, #12]
   d874a:	6828      	ldr	r0, [r5, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d874c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d8750:	e88d 0009 	stmia.w	sp, {r0, r3}
   d8754:	2203      	movs	r2, #3
   d8756:	4b1c      	ldr	r3, [pc, #112]	; (d87c8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc8>)
   d8758:	3004      	adds	r0, #4
   d875a:	f7fd fe53 	bl	d6404 <os_thread_create>
   d875e:	b928      	cbnz	r0, d876c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
   d8760:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d8762:	7c1b      	ldrb	r3, [r3, #16]
   d8764:	b943      	cbnz	r3, d8778 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
            os_thread_yield();
   d8766:	f7fd fe5d 	bl	d6424 <os_thread_yield>
   d876a:	e7f9      	b.n	d8760 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x60>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d876c:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d876e:	2300      	movs	r3, #0
   d8770:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8772:	b108      	cbz	r0, d8778 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
	  get_deleter()(__p);
   d8774:	f7ff fdcb 	bl	d830e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8778:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d877c:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8780:	b136      	cbz	r6, d8790 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8782:	4630      	mov	r0, r6
   d8784:	f7ff fdde 	bl	d8344 <_ZN6ThreadD1Ev>
   d8788:	2104      	movs	r1, #4
   d878a:	4630      	mov	r0, r6
   d878c:	f000 fd68 	bl	d9260 <_ZdlPvj>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d8790:	4620      	mov	r0, r4
   d8792:	f7ff fef5 	bl	d8580 <_ZN5spark11MeshPublish14initialize_udpEv>
   d8796:	2800      	cmp	r0, #0
   d8798:	db07      	blt.n	d87aa <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xaa>
    CHECK(subscriptions.add(prefix, handler));
   d879a:	4642      	mov	r2, r8
   d879c:	4639      	mov	r1, r7
   d879e:	1d20      	adds	r0, r4, #4
   d87a0:	f7ff fe9e 	bl	d84e0 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d87a4:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d87a8:	e000      	b.n	d87ac <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xac>
   d87aa:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d87ac:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d87b0:	f7fd fe68 	bl	d6484 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d87b4:	4628      	mov	r0, r5
   d87b6:	b002      	add	sp, #8
   d87b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d87bc:	000dded4 	.word	0x000dded4
   d87c0:	000d88dd 	.word	0x000d88dd
   d87c4:	000dddd5 	.word	0x000dddd5
   d87c8:	000d8279 	.word	0x000d8279

000d87cc <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d87cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d87d0:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d87d2:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d87d6:	b08a      	sub	sp, #40	; 0x28
   d87d8:	4630      	mov	r0, r6
   d87da:	f7fe fea4 	bl	d7526 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d87de:	682c      	ldr	r4, [r5, #0]
   d87e0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d87e4:	f7fd fe4e 	bl	d6484 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d87e8:	2c00      	cmp	r4, #0
   d87ea:	d063      	beq.n	d88b4 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d87ec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d87f0:	b163      	cbz	r3, d880c <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d87f2:	6823      	ldr	r3, [r4, #0]
   d87f4:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d87f8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d87fa:	4620      	mov	r0, r4
   d87fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8800:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d8804:	47b8      	blx	r7
        if (len > 0) {
   d8806:	1e04      	subs	r4, r0, #0
   d8808:	dc13      	bgt.n	d8832 <_ZN5spark11MeshPublish4pollEv+0x66>
   d880a:	e056      	b.n	d88ba <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d880c:	492d      	ldr	r1, [pc, #180]	; (d88c4 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d880e:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d8812:	f000 fd27 	bl	d9264 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8816:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d881a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d881e:	b113      	cbz	r3, d8826 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8820:	4618      	mov	r0, r3
   d8822:	f7fb fc3e 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d8826:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d882a:	2b00      	cmp	r3, #0
   d882c:	d1e1      	bne.n	d87f2 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d882e:	4826      	ldr	r0, [pc, #152]	; (d88c8 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d8830:	e044      	b.n	d88bc <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d8832:	2320      	movs	r3, #32
   d8834:	4a25      	ldr	r2, [pc, #148]	; (d88cc <_ZN5spark11MeshPublish4pollEv+0x100>)
   d8836:	9302      	str	r3, [sp, #8]
   d8838:	9200      	str	r2, [sp, #0]
   d883a:	2300      	movs	r3, #0
   d883c:	9401      	str	r4, [sp, #4]
   d883e:	aa02      	add	r2, sp, #8
   d8840:	4923      	ldr	r1, [pc, #140]	; (d88d0 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d8842:	9303      	str	r3, [sp, #12]
   d8844:	2001      	movs	r0, #1
   d8846:	f7fd ff75 	bl	d6734 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d884a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d884e:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d8850:	781b      	ldrb	r3, [r3, #0]
   d8852:	bb6b      	cbnz	r3, d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d8854:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d8856:	4621      	mov	r1, r4
   d8858:	4638      	mov	r0, r7
   d885a:	f002 fb18 	bl	dae8e <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d885e:	b338      	cbz	r0, d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d8860:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d8862:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d8864:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d8868:	dd22      	ble.n	d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d886a:	5c3b      	ldrb	r3, [r7, r0]
   d886c:	bb03      	cbnz	r3, d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d886e:	3c01      	subs	r4, #1
   d8870:	d00e      	beq.n	d8890 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d8872:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d8876:	4621      	mov	r1, r4
   d8878:	4640      	mov	r0, r8
   d887a:	f002 fb08 	bl	dae8e <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d887e:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d8880:	2c00      	cmp	r4, #0
   d8882:	dd15      	ble.n	d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d8884:	f818 3000 	ldrb.w	r3, [r8, r0]
   d8888:	b993      	cbnz	r3, d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d888a:	2c01      	cmp	r4, #1
   d888c:	d002      	beq.n	d8894 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d888e:	e00f      	b.n	d88b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d8890:	f8df 8044 	ldr.w	r8, [pc, #68]	; d88d8 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d8894:	4630      	mov	r0, r6
   d8896:	f7fe fe46 	bl	d7526 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d889a:	4642      	mov	r2, r8
   d889c:	4639      	mov	r1, r7
   d889e:	1d28      	adds	r0, r5, #4
   d88a0:	f7ff fe27 	bl	d84f2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d88a4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d88a8:	f7fd fdec 	bl	d6484 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d88ac:	2000      	movs	r0, #0
   d88ae:	e005      	b.n	d88bc <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d88b0:	4808      	ldr	r0, [pc, #32]	; (d88d4 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d88b2:	e003      	b.n	d88bc <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d88b4:	2064      	movs	r0, #100	; 0x64
   d88b6:	f7fd fd75 	bl	d63a4 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d88ba:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d88bc:	b00a      	add	sp, #40	; 0x28
   d88be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d88c2:	bf00      	nop
   d88c4:	000dded4 	.word	0x000dded4
   d88c8:	fffffefc 	.word	0xfffffefc
   d88cc:	000ddde4 	.word	0x000ddde4
   d88d0:	000ddddd 	.word	0x000ddddd
   d88d4:	fffffee8 	.word	0xfffffee8
   d88d8:	000ddb19 	.word	0x000ddb19

000d88dc <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d88dc:	b508      	push	{r3, lr}
   d88de:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d88e0:	4620      	mov	r0, r4
   d88e2:	f7ff ff73 	bl	d87cc <_ZN5spark11MeshPublish4pollEv>
   d88e6:	e7fb      	b.n	d88e0 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d88e8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d88e8:	b538      	push	{r3, r4, r5, lr}
   d88ea:	4c0d      	ldr	r4, [pc, #52]	; (d8920 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d88ec:	4b0d      	ldr	r3, [pc, #52]	; (d8924 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d88ee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d88f0:	2500      	movs	r5, #0
   d88f2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d88f4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d88f8:	6063      	str	r3, [r4, #4]
   d88fa:	60a5      	str	r5, [r4, #8]
   d88fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8900:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8904:	f7fd fdae 	bl	d6464 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8908:	4b07      	ldr	r3, [pc, #28]	; (d8928 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d890a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d890e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8910:	4620      	mov	r0, r4
   d8912:	4a06      	ldr	r2, [pc, #24]	; (d892c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d8914:	4906      	ldr	r1, [pc, #24]	; (d8930 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d8916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d891a:	f000 bc93 	b.w	d9244 <__aeabi_atexit>
   d891e:	bf00      	nop
   d8920:	2003e408 	.word	0x2003e408
   d8924:	000ddea8 	.word	0x000ddea8
   d8928:	000ddd98 	.word	0x000ddd98
   d892c:	2003d7d0 	.word	0x2003d7d0
   d8930:	000d8381 	.word	0x000d8381

000d8934 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d8934:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8936:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8938:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d893a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d893e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8940:	2201      	movs	r2, #1
   d8942:	f04f 33ff 	mov.w	r3, #4294967295
   d8946:	4621      	mov	r1, r4
   d8948:	47a8      	blx	r5
}
   d894a:	b003      	add	sp, #12
   d894c:	bd30      	pop	{r4, r5, pc}

000d894e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d894e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8950:	6803      	ldr	r3, [r0, #0]
   d8952:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8954:	f04f 33ff 	mov.w	r3, #4294967295
   d8958:	46a4      	mov	ip, r4
}
   d895a:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d895e:	4760      	bx	ip

000d8960 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8962:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d8964:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8966:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d896a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d896c:	4621      	mov	r1, r4
   d896e:	4613      	mov	r3, r2
   d8970:	2201      	movs	r2, #1
   d8972:	47a8      	blx	r5
}
   d8974:	b003      	add	sp, #12
   d8976:	bd30      	pop	{r4, r5, pc}

000d8978 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8978:	4770      	bx	lr

000d897a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d897a:	b538      	push	{r3, r4, r5, lr}
   d897c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d897e:	681a      	ldr	r2, [r3, #0]
   d8980:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8982:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8984:	da05      	bge.n	d8992 <_ZN9TCPClient9connectedEv+0x18>
   d8986:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d898a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d898e:	429a      	cmp	r2, r3
   d8990:	d001      	beq.n	d8996 <_ZN9TCPClient9connectedEv+0x1c>
   d8992:	2501      	movs	r5, #1
   d8994:	e00b      	b.n	d89ae <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d8996:	6803      	ldr	r3, [r0, #0]
   d8998:	691b      	ldr	r3, [r3, #16]
   d899a:	4798      	blx	r3
   d899c:	2800      	cmp	r0, #0
   d899e:	bf14      	ite	ne
   d89a0:	2501      	movne	r5, #1
   d89a2:	2500      	moveq	r5, #0
        if (!rv) {
   d89a4:	d103      	bne.n	d89ae <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d89a6:	6823      	ldr	r3, [r4, #0]
   d89a8:	4620      	mov	r0, r4
   d89aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d89ac:	4798      	blx	r3
        }
    }
    return rv;
}
   d89ae:	4628      	mov	r0, r5
   d89b0:	bd38      	pop	{r3, r4, r5, pc}

000d89b2 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d89b2:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d89b4:	6818      	ldr	r0, [r3, #0]
}
   d89b6:	43c0      	mvns	r0, r0
   d89b8:	0fc0      	lsrs	r0, r0, #31
   d89ba:	4770      	bx	lr

000d89bc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d89bc:	4770      	bx	lr

000d89be <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d89be:	2000      	movs	r0, #0
   d89c0:	4770      	bx	lr

000d89c2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d89c2:	b510      	push	{r4, lr}
   d89c4:	2114      	movs	r1, #20
   d89c6:	4604      	mov	r4, r0
   d89c8:	f000 fc4a 	bl	d9260 <_ZdlPvj>
   d89cc:	4620      	mov	r0, r4
   d89ce:	bd10      	pop	{r4, pc}

000d89d0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d89d0:	f7fb bb65 	b.w	d409e <_ZdlPv>

000d89d4 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d89d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d89d8:	4698      	mov	r8, r3
    stop();
   d89da:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d89dc:	b093      	sub	sp, #76	; 0x4c
    stop();
   d89de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d89e0:	460c      	mov	r4, r1
   d89e2:	4606      	mov	r6, r0
   d89e4:	4617      	mov	r7, r2
    stop();
   d89e6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d89e8:	ab12      	add	r3, sp, #72	; 0x48
   d89ea:	2500      	movs	r5, #0
   d89ec:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d89f0:	462a      	mov	r2, r5
   d89f2:	4629      	mov	r1, r5
   d89f4:	4620      	mov	r0, r4
   d89f6:	f7fd fc25 	bl	d6244 <netdb_getaddrinfo>
   d89fa:	2800      	cmp	r0, #0
   d89fc:	db3a      	blt.n	d8a74 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d89fe:	9b00      	ldr	r3, [sp, #0]
   d8a00:	2b00      	cmp	r3, #0
   d8a02:	d039      	beq.n	d8a78 <_ZN9TCPClient7connectEPKctm+0xa4>
   d8a04:	695b      	ldr	r3, [r3, #20]
   d8a06:	2b00      	cmp	r3, #0
   d8a08:	d036      	beq.n	d8a78 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d8a0a:	a806      	add	r0, sp, #24
   d8a0c:	f7ff fa72 	bl	d7ef4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8a10:	9b00      	ldr	r3, [sp, #0]
   d8a12:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8a14:	7863      	ldrb	r3, [r4, #1]
   d8a16:	2b02      	cmp	r3, #2
   d8a18:	d101      	bne.n	d8a1e <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8a1a:	1d21      	adds	r1, r4, #4
   d8a1c:	e013      	b.n	d8a46 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8a1e:	2b0a      	cmp	r3, #10
   d8a20:	d114      	bne.n	d8a4c <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8a22:	2211      	movs	r2, #17
   d8a24:	4629      	mov	r1, r5
   d8a26:	a801      	add	r0, sp, #4
   d8a28:	f001 fc86 	bl	da338 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8a2c:	68a3      	ldr	r3, [r4, #8]
   d8a2e:	bb33      	cbnz	r3, d8a7e <_ZN9TCPClient7connectEPKctm+0xaa>
   d8a30:	68e3      	ldr	r3, [r4, #12]
   d8a32:	bb23      	cbnz	r3, d8a7e <_ZN9TCPClient7connectEPKctm+0xaa>
   d8a34:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8a38:	6925      	ldr	r5, [r4, #16]
   d8a3a:	f7fd fd43 	bl	d64c4 <inet_htonl>
   d8a3e:	4285      	cmp	r5, r0
   d8a40:	d11d      	bne.n	d8a7e <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8a42:	f104 0114 	add.w	r1, r4, #20
   d8a46:	a806      	add	r0, sp, #24
   d8a48:	f7ff fa97 	bl	d7f7a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8a4c:	a806      	add	r0, sp, #24
   d8a4e:	f7ff fa71 	bl	d7f34 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8a52:	b188      	cbz	r0, d8a78 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d8a54:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8a56:	ad07      	add	r5, sp, #28
   d8a58:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8a5c:	4b18      	ldr	r3, [pc, #96]	; (d8ac0 <_ZN9TCPClient7connectEPKctm+0xec>)
   d8a5e:	930c      	str	r3, [sp, #48]	; 0x30
   d8a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a62:	ac0d      	add	r4, sp, #52	; 0x34
   d8a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a66:	682b      	ldr	r3, [r5, #0]
   d8a68:	7023      	strb	r3, [r4, #0]
   d8a6a:	463a      	mov	r2, r7
   d8a6c:	4643      	mov	r3, r8
   d8a6e:	a90c      	add	r1, sp, #48	; 0x30
   d8a70:	4630      	mov	r0, r6
   d8a72:	47c8      	blx	r9
   d8a74:	4604      	mov	r4, r0
   d8a76:	e01c      	b.n	d8ab2 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d8a78:	f04f 34ff 	mov.w	r4, #4294967295
   d8a7c:	e019      	b.n	d8ab2 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8a7e:	f104 0308 	add.w	r3, r4, #8
   d8a82:	ad01      	add	r5, sp, #4
   d8a84:	3418      	adds	r4, #24
   d8a86:	6818      	ldr	r0, [r3, #0]
   d8a88:	6859      	ldr	r1, [r3, #4]
   d8a8a:	462a      	mov	r2, r5
   d8a8c:	c203      	stmia	r2!, {r0, r1}
   d8a8e:	3308      	adds	r3, #8
   d8a90:	42a3      	cmp	r3, r4
   d8a92:	4615      	mov	r5, r2
   d8a94:	d1f7      	bne.n	d8a86 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d8a96:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8a98:	a901      	add	r1, sp, #4
   d8a9a:	a80c      	add	r0, sp, #48	; 0x30
   d8a9c:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8a9e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8aa2:	f7ff fa35 	bl	d7f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8aa8:	ac07      	add	r4, sp, #28
   d8aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8aac:	682b      	ldr	r3, [r5, #0]
   d8aae:	7023      	strb	r3, [r4, #0]
   d8ab0:	e7cc      	b.n	d8a4c <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8ab2:	9800      	ldr	r0, [sp, #0]
   d8ab4:	f7fd fbbe 	bl	d6234 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d8ab8:	4620      	mov	r0, r4
   d8aba:	b013      	add	sp, #76	; 0x4c
   d8abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8ac0:	000ddcfc 	.word	0x000ddcfc

000d8ac4 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8ac4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8ac6:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d8ac8:	2200      	movs	r2, #0
   d8aca:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8acc:	9202      	str	r2, [sp, #8]
   d8ace:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8ad0:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8ad2:	4604      	mov	r4, r0
   d8ad4:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8ad6:	d008      	beq.n	d8aea <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d8ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8adc:	fbb3 f1f2 	udiv	r1, r3, r2
   d8ae0:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8ae2:	fb02 3111 	mls	r1, r2, r1, r3
   d8ae6:	434a      	muls	r2, r1
   d8ae8:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8aea:	6960      	ldr	r0, [r4, #20]
   d8aec:	2308      	movs	r3, #8
   d8aee:	9300      	str	r3, [sp, #0]
   d8af0:	f241 0205 	movw	r2, #4101	; 0x1005
   d8af4:	446b      	add	r3, sp
   d8af6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8afa:	6800      	ldr	r0, [r0, #0]
   d8afc:	f7fd fd92 	bl	d6624 <sock_setsockopt>
    if (ret < 0) {
   d8b00:	2800      	cmp	r0, #0
   d8b02:	db08      	blt.n	d8b16 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8b04:	6960      	ldr	r0, [r4, #20]
   d8b06:	2300      	movs	r3, #0
   d8b08:	4632      	mov	r2, r6
   d8b0a:	4629      	mov	r1, r5
   d8b0c:	6800      	ldr	r0, [r0, #0]
   d8b0e:	f7fd fdb1 	bl	d6674 <sock_send>
    if (ret < 0) {
   d8b12:	2800      	cmp	r0, #0
   d8b14:	da04      	bge.n	d8b20 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d8b16:	f7fd ff4b 	bl	d69b0 <__errno>
   d8b1a:	6803      	ldr	r3, [r0, #0]
   d8b1c:	6063      	str	r3, [r4, #4]
   d8b1e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8b20:	b004      	add	sp, #16
   d8b22:	bd70      	pop	{r4, r5, r6, pc}

000d8b24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b24:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8b26:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b28:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8b2a:	689b      	ldr	r3, [r3, #8]
   d8b2c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8b2e:	68a3      	ldr	r3, [r4, #8]
   d8b30:	3b01      	subs	r3, #1
   d8b32:	60a3      	str	r3, [r4, #8]
   d8b34:	b92b      	cbnz	r3, d8b42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d8b36:	6823      	ldr	r3, [r4, #0]
   d8b38:	4620      	mov	r0, r4
   d8b3a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8b40:	4718      	bx	r3
   d8b42:	bd10      	pop	{r4, pc}

000d8b44 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8b44:	b570      	push	{r4, r5, r6, lr}
   d8b46:	4604      	mov	r4, r0
   d8b48:	694d      	ldr	r5, [r1, #20]
   d8b4a:	4b05      	ldr	r3, [pc, #20]	; (d8b60 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8b4c:	f844 3b04 	str.w	r3, [r4], #4
   d8b50:	358c      	adds	r5, #140	; 0x8c
   d8b52:	4606      	mov	r6, r0
   d8b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b58:	682b      	ldr	r3, [r5, #0]
   d8b5a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8b5c:	4630      	mov	r0, r6
   d8b5e:	bd70      	pop	{r4, r5, r6, pc}
   d8b60:	000ddcfc 	.word	0x000ddcfc

000d8b64 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8b64:	b510      	push	{r4, lr}
   d8b66:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8b68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b70:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8b72:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8b74:	d005      	beq.n	d8b82 <_ZN9TCPClient4peekEv+0x1e>
   d8b76:	6962      	ldr	r2, [r4, #20]
   d8b78:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8b7c:	4413      	add	r3, r2
   d8b7e:	7918      	ldrb	r0, [r3, #4]
   d8b80:	bd10      	pop	{r4, pc}
   d8b82:	6803      	ldr	r3, [r0, #0]
   d8b84:	691b      	ldr	r3, [r3, #16]
   d8b86:	4798      	blx	r3
   d8b88:	2800      	cmp	r0, #0
   d8b8a:	d1f4      	bne.n	d8b76 <_ZN9TCPClient4peekEv+0x12>
   d8b8c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8b90:	bd10      	pop	{r4, pc}

000d8b92 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8b92:	b510      	push	{r4, lr}
   d8b94:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8b96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8b9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8b9e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8ba0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8ba2:	d008      	beq.n	d8bb6 <_ZN9TCPClient4readEv+0x24>
   d8ba4:	6962      	ldr	r2, [r4, #20]
   d8ba6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8baa:	1c59      	adds	r1, r3, #1
   d8bac:	4413      	add	r3, r2
   d8bae:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8bb2:	7918      	ldrb	r0, [r3, #4]
   d8bb4:	bd10      	pop	{r4, pc}
   d8bb6:	6803      	ldr	r3, [r0, #0]
   d8bb8:	691b      	ldr	r3, [r3, #16]
   d8bba:	4798      	blx	r3
   d8bbc:	2800      	cmp	r0, #0
   d8bbe:	d1f1      	bne.n	d8ba4 <_ZN9TCPClient4readEv+0x12>
   d8bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8bc4:	bd10      	pop	{r4, pc}

000d8bc6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bc8:	6943      	ldr	r3, [r0, #20]
   d8bca:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8bcc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8bd0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8bd4:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8bd6:	4605      	mov	r5, r0
   d8bd8:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d8bda:	d106      	bne.n	d8bea <_ZN9TCPClient4readEPhj+0x24>
   d8bdc:	6803      	ldr	r3, [r0, #0]
   d8bde:	691b      	ldr	r3, [r3, #16]
   d8be0:	4798      	blx	r3
   d8be2:	b910      	cbnz	r0, d8bea <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8be4:	f04f 34ff 	mov.w	r4, #4294967295
   d8be8:	e014      	b.n	d8c14 <_ZN9TCPClient4readEPhj+0x4e>
   d8bea:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8bec:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8bf0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8bf4:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8bf6:	42bc      	cmp	r4, r7
   d8bf8:	bf28      	it	cs
   d8bfa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8bfc:	4419      	add	r1, r3
   d8bfe:	4622      	mov	r2, r4
   d8c00:	3104      	adds	r1, #4
   d8c02:	4630      	mov	r0, r6
   d8c04:	f001 fb8d 	bl	da322 <memcpy>
   d8c08:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8c0a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8c0e:	4423      	add	r3, r4
   d8c10:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8c14:	4620      	mov	r0, r4
   d8c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c18 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d8c18:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8c1a:	2300      	movs	r3, #0
   d8c1c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8c20:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8c22:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d8c26:	4770      	bx	lr

000d8c28 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c2c:	4698      	mov	r8, r3
    stop();
   d8c2e:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c30:	460d      	mov	r5, r1
   d8c32:	b08a      	sub	sp, #40	; 0x28
    stop();
   d8c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8c36:	4606      	mov	r6, r0
   d8c38:	4617      	mov	r7, r2
    stop();
   d8c3a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8c3c:	7d2b      	ldrb	r3, [r5, #20]
   d8c3e:	6974      	ldr	r4, [r6, #20]
   d8c40:	2b04      	cmp	r3, #4
   d8c42:	bf0c      	ite	eq
   d8c44:	2002      	moveq	r0, #2
   d8c46:	200a      	movne	r0, #10
   d8c48:	2206      	movs	r2, #6
   d8c4a:	2101      	movs	r1, #1
   d8c4c:	f7fd fd22 	bl	d6694 <sock_socket>
   d8c50:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d8c52:	6973      	ldr	r3, [r6, #20]
   d8c54:	681c      	ldr	r4, [r3, #0]
   d8c56:	2c00      	cmp	r4, #0
   d8c58:	db5b      	blt.n	d8d12 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d8c5a:	4630      	mov	r0, r6
   d8c5c:	f7ff ffdc 	bl	d8c18 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d8c60:	f1b8 0f00 	cmp.w	r8, #0
   d8c64:	d017      	beq.n	d8c96 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d8c66:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d8c68:	a903      	add	r1, sp, #12
   d8c6a:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8c6e:	9303      	str	r3, [sp, #12]
   d8c70:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d8c74:	f7fd fb6e 	bl	d6354 <if_index_to_name>
   d8c78:	2800      	cmp	r0, #0
   d8c7a:	db49      	blt.n	d8d10 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d8c7c:	6970      	ldr	r0, [r6, #20]
   d8c7e:	2306      	movs	r3, #6
   d8c80:	9300      	str	r3, [sp, #0]
   d8c82:	f241 020b 	movw	r2, #4107	; 0x100b
   d8c86:	ab03      	add	r3, sp, #12
   d8c88:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8c8c:	6800      	ldr	r0, [r0, #0]
   d8c8e:	f7fd fcc9 	bl	d6624 <sock_setsockopt>
   d8c92:	2800      	cmp	r0, #0
   d8c94:	db3c      	blt.n	d8d10 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8c96:	241c      	movs	r4, #28
   d8c98:	4622      	mov	r2, r4
   d8c9a:	2100      	movs	r1, #0
   d8c9c:	a803      	add	r0, sp, #12
   d8c9e:	f001 fb4b 	bl	da338 <memset>
    if (ip.version() == 4) {
   d8ca2:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8ca4:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8ca8:	2b04      	cmp	r3, #4
   d8caa:	d10c      	bne.n	d8cc6 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8cac:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8cae:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8cb0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8cb4:	f7fd fc16 	bl	d64e4 <inet_htons>
   d8cb8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8cbc:	6868      	ldr	r0, [r5, #4]
   d8cbe:	f7fd fc01 	bl	d64c4 <inet_htonl>
   d8cc2:	9004      	str	r0, [sp, #16]
   d8cc4:	e013      	b.n	d8cee <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8cc6:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d8cc8:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8cca:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d8cce:	f7fd fc09 	bl	d64e4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8cd2:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8cd4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8cd8:	1d2b      	adds	r3, r5, #4
   d8cda:	f105 0714 	add.w	r7, r5, #20
   d8cde:	6818      	ldr	r0, [r3, #0]
   d8ce0:	6859      	ldr	r1, [r3, #4]
   d8ce2:	4622      	mov	r2, r4
   d8ce4:	c203      	stmia	r2!, {r0, r1}
   d8ce6:	3308      	adds	r3, #8
   d8ce8:	42bb      	cmp	r3, r7
   d8cea:	4614      	mov	r4, r2
   d8cec:	d1f7      	bne.n	d8cde <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d8cee:	6973      	ldr	r3, [r6, #20]
   d8cf0:	221c      	movs	r2, #28
   d8cf2:	a903      	add	r1, sp, #12
   d8cf4:	6818      	ldr	r0, [r3, #0]
   d8cf6:	f7fd fca5 	bl	d6644 <sock_connect>
   d8cfa:	2800      	cmp	r0, #0
   d8cfc:	db08      	blt.n	d8d10 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d8cfe:	1d2c      	adds	r4, r5, #4
   d8d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8d02:	6976      	ldr	r6, [r6, #20]
   d8d04:	368c      	adds	r6, #140	; 0x8c
   d8d06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8d08:	6823      	ldr	r3, [r4, #0]
   d8d0a:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d8d0c:	2401      	movs	r4, #1
   d8d0e:	e004      	b.n	d8d1a <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d8d10:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8d12:	6833      	ldr	r3, [r6, #0]
   d8d14:	4630      	mov	r0, r6
   d8d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8d18:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d8d1a:	4620      	mov	r0, r4
   d8d1c:	b00a      	add	sp, #40	; 0x28
   d8d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8d22 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8d22:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8d24:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8d26:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8d28:	6818      	ldr	r0, [r3, #0]
   d8d2a:	2800      	cmp	r0, #0
   d8d2c:	db01      	blt.n	d8d32 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8d2e:	f7fd fc81 	bl	d6634 <sock_close>
   d8d32:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8d34:	f04f 32ff 	mov.w	r2, #4294967295
   d8d38:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8d3a:	6960      	ldr	r0, [r4, #20]
   d8d3c:	2211      	movs	r2, #17
   d8d3e:	2100      	movs	r1, #0
   d8d40:	308c      	adds	r0, #140	; 0x8c
   d8d42:	f001 faf9 	bl	da338 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8d46:	4620      	mov	r0, r4
}
   d8d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8d4c:	f7ff bf64 	b.w	d8c18 <_ZN9TCPClient12flush_bufferEv>

000d8d50 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8d50:	b530      	push	{r4, r5, lr}
   d8d52:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8d54:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8d58:	b08b      	sub	sp, #44	; 0x2c
   d8d5a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8d5c:	b11b      	cbz	r3, d8d66 <_ZN9TCPClient9availableEv+0x16>
   d8d5e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8d62:	429a      	cmp	r2, r3
   d8d64:	d040      	beq.n	d8de8 <_ZN9TCPClient9availableEv+0x98>
   d8d66:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8d68:	6818      	ldr	r0, [r3, #0]
   d8d6a:	2800      	cmp	r0, #0
   d8d6c:	db3f      	blt.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8d6e:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d8d72:	2d7f      	cmp	r5, #127	; 0x7f
   d8d74:	d83b      	bhi.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8d76:	1d19      	adds	r1, r3, #4
   d8d78:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8d7c:	2308      	movs	r3, #8
   d8d7e:	4429      	add	r1, r5
   d8d80:	f7fd fc68 	bl	d6654 <sock_recv>
            if (ret > 0) {
   d8d84:	2800      	cmp	r0, #0
   d8d86:	dd0c      	ble.n	d8da2 <_ZN9TCPClient9availableEv+0x52>
   d8d88:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8d8a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8d8e:	b90a      	cbnz	r2, d8d94 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8d90:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8d94:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8d96:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8d9a:	4418      	add	r0, r3
   d8d9c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8da0:	e025      	b.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8da2:	f7fd fe05 	bl	d69b0 <__errno>
   d8da6:	6803      	ldr	r3, [r0, #0]
   d8da8:	2b0b      	cmp	r3, #11
   d8daa:	d020      	beq.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
   d8dac:	f7fd fe00 	bl	d69b0 <__errno>
   d8db0:	6803      	ldr	r3, [r0, #0]
   d8db2:	2b0b      	cmp	r3, #11
   d8db4:	d01b      	beq.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8db6:	2320      	movs	r3, #32
   d8db8:	2500      	movs	r5, #0
   d8dba:	9302      	str	r3, [sp, #8]
   d8dbc:	9503      	str	r5, [sp, #12]
   d8dbe:	f7fd fdf7 	bl	d69b0 <__errno>
   d8dc2:	6803      	ldr	r3, [r0, #0]
   d8dc4:	9301      	str	r3, [sp, #4]
   d8dc6:	4b0e      	ldr	r3, [pc, #56]	; (d8e00 <_ZN9TCPClient9availableEv+0xb0>)
   d8dc8:	9300      	str	r3, [sp, #0]
   d8dca:	aa02      	add	r2, sp, #8
   d8dcc:	462b      	mov	r3, r5
   d8dce:	490d      	ldr	r1, [pc, #52]	; (d8e04 <_ZN9TCPClient9availableEv+0xb4>)
   d8dd0:	2032      	movs	r0, #50	; 0x32
   d8dd2:	f7fd fcaf 	bl	d6734 <log_message>
                    sock_close(d_->sock);
   d8dd6:	6963      	ldr	r3, [r4, #20]
   d8dd8:	6818      	ldr	r0, [r3, #0]
   d8dda:	f7fd fc2b 	bl	d6634 <sock_close>
   d8dde:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8de0:	f04f 32ff 	mov.w	r2, #4294967295
   d8de4:	601a      	str	r2, [r3, #0]
   d8de6:	e002      	b.n	d8dee <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8de8:	f7ff ff16 	bl	d8c18 <_ZN9TCPClient12flush_bufferEv>
   d8dec:	e7bb      	b.n	d8d66 <_ZN9TCPClient9availableEv+0x16>
   d8dee:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8df0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8df4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8df8:	1a18      	subs	r0, r3, r0
}
   d8dfa:	b00b      	add	sp, #44	; 0x2c
   d8dfc:	bd30      	pop	{r4, r5, pc}
   d8dfe:	bf00      	nop
   d8e00:	000dde5c 	.word	0x000dde5c
   d8e04:	000ddddd 	.word	0x000ddddd

000d8e08 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8e08:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8e0a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8e0c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8e0e:	6001      	str	r1, [r0, #0]
   d8e10:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8e14:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8e18:	3088      	adds	r0, #136	; 0x88
   d8e1a:	f7ff f86b 	bl	d7ef4 <_ZN9IPAddressC1Ev>
}
   d8e1e:	4620      	mov	r0, r4
   d8e20:	bd10      	pop	{r4, pc}
	...

000d8e24 <_ZN9TCPClientC1Ei>:
   d8e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8e28:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8e2a:	2300      	movs	r3, #0
   d8e2c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8e2e:	4a14      	ldr	r2, [pc, #80]	; (d8e80 <_ZN9TCPClientC1Ei+0x5c>)
   d8e30:	6043      	str	r3, [r0, #4]
   d8e32:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8e34:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8e36:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8e38:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e3a:	20a0      	movs	r0, #160	; 0xa0
   d8e3c:	460e      	mov	r6, r1
   d8e3e:	f7fb f92a 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8e42:	4605      	mov	r5, r0
   d8e44:	b110      	cbz	r0, d8e4c <_ZN9TCPClientC1Ei+0x28>
   d8e46:	4631      	mov	r1, r6
   d8e48:	f7ff ffde 	bl	d8e08 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e4c:	2014      	movs	r0, #20
   d8e4e:	f7fb f922 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8e52:	4603      	mov	r3, r0
   d8e54:	b128      	cbz	r0, d8e62 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8e56:	2201      	movs	r2, #1
   d8e58:	6042      	str	r2, [r0, #4]
   d8e5a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8e5c:	4a09      	ldr	r2, [pc, #36]	; (d8e84 <_ZN9TCPClientC1Ei+0x60>)
   d8e5e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8e60:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8e62:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8e64:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8e66:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8e68:	b128      	cbz	r0, d8e76 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8e6a:	6843      	ldr	r3, [r0, #4]
   d8e6c:	3b01      	subs	r3, #1
   d8e6e:	6043      	str	r3, [r0, #4]
   d8e70:	b90b      	cbnz	r3, d8e76 <_ZN9TCPClientC1Ei+0x52>
   d8e72:	f7ff fe57 	bl	d8b24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8e76:	4620      	mov	r0, r4
   d8e78:	f7ff fece 	bl	d8c18 <_ZN9TCPClient12flush_bufferEv>
}
   d8e7c:	4620      	mov	r0, r4
   d8e7e:	bd70      	pop	{r4, r5, r6, pc}
   d8e80:	000dde18 	.word	0x000dde18
   d8e84:	000dddfc 	.word	0x000dddfc

000d8e88 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8e88:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8e8a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8e8e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8e90:	f7ff ffc8 	bl	d8e24 <_ZN9TCPClientC1Ei>
}
   d8e94:	4620      	mov	r0, r4
   d8e96:	bd10      	pop	{r4, pc}

000d8e98 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8e98:	b510      	push	{r4, lr}
   d8e9a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8e9c:	6800      	ldr	r0, [r0, #0]
   d8e9e:	2800      	cmp	r0, #0
   d8ea0:	db01      	blt.n	d8ea6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8ea2:	f7fd fbc7 	bl	d6634 <sock_close>
    }
}
   d8ea6:	4620      	mov	r0, r4
   d8ea8:	bd10      	pop	{r4, pc}

000d8eaa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8eaa:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8eac:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8eae:	4620      	mov	r0, r4
   d8eb0:	f7ff fff2 	bl	d8e98 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8eb4:	b124      	cbz	r4, d8ec0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8eb6:	4620      	mov	r0, r4
   d8eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8ebc:	f7fb b8ef 	b.w	d409e <_ZdlPv>
   d8ec0:	bd10      	pop	{r4, pc}

000d8ec2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8ec2:	2200      	movs	r2, #0
   d8ec4:	4611      	mov	r1, r2
   d8ec6:	6840      	ldr	r0, [r0, #4]
   d8ec8:	f7fd bcaa 	b.w	d6820 <network_ready>

000d8ecc <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8ecc:	2200      	movs	r2, #0
   d8ece:	4611      	mov	r1, r2
   d8ed0:	6840      	ldr	r0, [r0, #4]
   d8ed2:	f7fd bcc5 	b.w	d6860 <network_listening>

000d8ed6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8ed6:	2200      	movs	r2, #0
   d8ed8:	4611      	mov	r1, r2
   d8eda:	6840      	ldr	r0, [r0, #4]
   d8edc:	f7fd bcd0 	b.w	d6880 <network_get_listen_timeout>

000d8ee0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ee0:	2200      	movs	r2, #0
   d8ee2:	6840      	ldr	r0, [r0, #4]
   d8ee4:	f7fd bcc4 	b.w	d6870 <network_set_listen_timeout>

000d8ee8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8ee8:	2200      	movs	r2, #0
   d8eea:	f081 0101 	eor.w	r1, r1, #1
   d8eee:	6840      	ldr	r0, [r0, #4]
   d8ef0:	f7fd bcae 	b.w	d6850 <network_listen>

000d8ef4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8ef4:	2300      	movs	r3, #0
   d8ef6:	461a      	mov	r2, r3
   d8ef8:	4619      	mov	r1, r3
   d8efa:	6840      	ldr	r0, [r0, #4]
   d8efc:	f7fd bca0 	b.w	d6840 <network_off>

000d8f00 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8f00:	2300      	movs	r3, #0
   d8f02:	461a      	mov	r2, r3
   d8f04:	4619      	mov	r1, r3
   d8f06:	6840      	ldr	r0, [r0, #4]
   d8f08:	f7fd bc92 	b.w	d6830 <network_on>

000d8f0c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8f0c:	2200      	movs	r2, #0
   d8f0e:	4611      	mov	r1, r2
   d8f10:	6840      	ldr	r0, [r0, #4]
   d8f12:	f7fd bc75 	b.w	d6800 <network_connecting>

000d8f16 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8f16:	2200      	movs	r2, #0
   d8f18:	2102      	movs	r1, #2
   d8f1a:	6840      	ldr	r0, [r0, #4]
   d8f1c:	f7fd bc78 	b.w	d6810 <network_disconnect>

000d8f20 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8f20:	2300      	movs	r3, #0
   d8f22:	461a      	mov	r2, r3
   d8f24:	6840      	ldr	r0, [r0, #4]
   d8f26:	f7fd bc63 	b.w	d67f0 <network_connect>
	...

000d8f2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8f2c:	4b02      	ldr	r3, [pc, #8]	; (d8f38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8f2e:	2204      	movs	r2, #4
   d8f30:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8f32:	4a02      	ldr	r2, [pc, #8]	; (d8f3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8f34:	601a      	str	r2, [r3, #0]
   d8f36:	4770      	bx	lr
   d8f38:	2003e5d8 	.word	0x2003e5d8
   d8f3c:	000dde74 	.word	0x000dde74

000d8f40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8f40:	2300      	movs	r3, #0
   d8f42:	461a      	mov	r2, r3
   d8f44:	6840      	ldr	r0, [r0, #4]
   d8f46:	f7fd bc53 	b.w	d67f0 <network_connect>

000d8f4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8f4a:	2200      	movs	r2, #0
   d8f4c:	2102      	movs	r1, #2
   d8f4e:	6840      	ldr	r0, [r0, #4]
   d8f50:	f7fd bc5e 	b.w	d6810 <network_disconnect>

000d8f54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8f54:	2200      	movs	r2, #0
   d8f56:	4611      	mov	r1, r2
   d8f58:	6840      	ldr	r0, [r0, #4]
   d8f5a:	f7fd bc51 	b.w	d6800 <network_connecting>

000d8f5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8f5e:	2200      	movs	r2, #0
   d8f60:	4611      	mov	r1, r2
   d8f62:	6840      	ldr	r0, [r0, #4]
   d8f64:	f7fd bc5c 	b.w	d6820 <network_ready>

000d8f68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8f68:	2300      	movs	r3, #0
   d8f6a:	461a      	mov	r2, r3
   d8f6c:	4619      	mov	r1, r3
   d8f6e:	6840      	ldr	r0, [r0, #4]
   d8f70:	f7fd bc5e 	b.w	d6830 <network_on>

000d8f74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8f74:	2300      	movs	r3, #0
   d8f76:	461a      	mov	r2, r3
   d8f78:	4619      	mov	r1, r3
   d8f7a:	6840      	ldr	r0, [r0, #4]
   d8f7c:	f7fd bc60 	b.w	d6840 <network_off>

000d8f80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8f80:	2200      	movs	r2, #0
   d8f82:	f081 0101 	eor.w	r1, r1, #1
   d8f86:	6840      	ldr	r0, [r0, #4]
   d8f88:	f7fd bc62 	b.w	d6850 <network_listen>

000d8f8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8f8c:	2200      	movs	r2, #0
   d8f8e:	6840      	ldr	r0, [r0, #4]
   d8f90:	f7fd bc6e 	b.w	d6870 <network_set_listen_timeout>

000d8f94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f94:	2200      	movs	r2, #0
   d8f96:	4611      	mov	r1, r2
   d8f98:	6840      	ldr	r0, [r0, #4]
   d8f9a:	f7fd bc71 	b.w	d6880 <network_get_listen_timeout>

000d8f9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8f9e:	2200      	movs	r2, #0
   d8fa0:	4611      	mov	r1, r2
   d8fa2:	6840      	ldr	r0, [r0, #4]
   d8fa4:	f7fd bc5c 	b.w	d6860 <network_listening>

000d8fa8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8fac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8fae:	b095      	sub	sp, #84	; 0x54
   d8fb0:	4616      	mov	r6, r2
   d8fb2:	460d      	mov	r5, r1
   d8fb4:	4607      	mov	r7, r0
    IPAddress addr;
   d8fb6:	f7fe ff9d 	bl	d7ef4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8fba:	4621      	mov	r1, r4
   d8fbc:	2220      	movs	r2, #32
   d8fbe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8fc0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8fc2:	f001 f9b9 	bl	da338 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8fc6:	2340      	movs	r3, #64	; 0x40
   d8fc8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8fca:	4621      	mov	r1, r4
   d8fcc:	466b      	mov	r3, sp
   d8fce:	aa0c      	add	r2, sp, #48	; 0x30
   d8fd0:	4630      	mov	r0, r6
   d8fd2:	f7fd f937 	bl	d6244 <netdb_getaddrinfo>
    if (!r) {
   d8fd6:	4604      	mov	r4, r0
   d8fd8:	2800      	cmp	r0, #0
   d8fda:	d144      	bne.n	d9066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8fdc:	4602      	mov	r2, r0
   d8fde:	2101      	movs	r1, #1
   d8fe0:	6868      	ldr	r0, [r5, #4]
   d8fe2:	f7fd fc1d 	bl	d6820 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fe6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8fe8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fea:	4622      	mov	r2, r4
   d8fec:	6868      	ldr	r0, [r5, #4]
   d8fee:	f7fd fc17 	bl	d6820 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ff2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ff4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8ff6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ff8:	2e00      	cmp	r6, #0
   d8ffa:	d034      	beq.n	d9066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8ffc:	2900      	cmp	r1, #0
   d8ffe:	d132      	bne.n	d9066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9000:	6873      	ldr	r3, [r6, #4]
   d9002:	2b02      	cmp	r3, #2
   d9004:	d002      	beq.n	d900c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d9006:	2b0a      	cmp	r3, #10
   d9008:	d009      	beq.n	d901e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d900a:	e02a      	b.n	d9062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d900c:	f1b8 0f00 	cmp.w	r8, #0
   d9010:	d027      	beq.n	d9062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9012:	6971      	ldr	r1, [r6, #20]
   d9014:	4638      	mov	r0, r7
   d9016:	3104      	adds	r1, #4
   d9018:	f7fe ffaf 	bl	d7f7a <_ZN9IPAddressaSEPKh>
   d901c:	e020      	b.n	d9060 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d901e:	f1b9 0f00 	cmp.w	r9, #0
   d9022:	d01e      	beq.n	d9062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9024:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9026:	2211      	movs	r2, #17
   d9028:	a801      	add	r0, sp, #4
   d902a:	f001 f985 	bl	da338 <memset>
                    a.v = 6;
   d902e:	2306      	movs	r3, #6
   d9030:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9034:	ad01      	add	r5, sp, #4
   d9036:	f104 0308 	add.w	r3, r4, #8
   d903a:	3418      	adds	r4, #24
   d903c:	6818      	ldr	r0, [r3, #0]
   d903e:	6859      	ldr	r1, [r3, #4]
   d9040:	462a      	mov	r2, r5
   d9042:	c203      	stmia	r2!, {r0, r1}
   d9044:	3308      	adds	r3, #8
   d9046:	42a3      	cmp	r3, r4
   d9048:	4615      	mov	r5, r2
   d904a:	d1f7      	bne.n	d903c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d904c:	a901      	add	r1, sp, #4
   d904e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9050:	ad07      	add	r5, sp, #28
   d9052:	f7fe ff5d 	bl	d7f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9058:	1d3c      	adds	r4, r7, #4
   d905a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d905c:	682b      	ldr	r3, [r5, #0]
   d905e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9060:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9062:	69f6      	ldr	r6, [r6, #28]
   d9064:	e7c8      	b.n	d8ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9066:	9800      	ldr	r0, [sp, #0]
   d9068:	f7fd f8e4 	bl	d6234 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d906c:	4638      	mov	r0, r7
   d906e:	b015      	add	sp, #84	; 0x54
   d9070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9074 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9074:	4b02      	ldr	r3, [pc, #8]	; (d9080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9076:	4a03      	ldr	r2, [pc, #12]	; (d9084 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9078:	601a      	str	r2, [r3, #0]
   d907a:	2200      	movs	r2, #0
   d907c:	605a      	str	r2, [r3, #4]
   d907e:	4770      	bx	lr
   d9080:	2003e5e0 	.word	0x2003e5e0
   d9084:	000ddea8 	.word	0x000ddea8

000d9088 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9088:	b510      	push	{r4, lr}
   d908a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d908c:	480f      	ldr	r0, [pc, #60]	; (d90cc <pinAvailable+0x44>)
   d908e:	f7fd fd5d 	bl	d6b4c <_ZN8SPIClass9isEnabledEv>
   d9092:	b128      	cbz	r0, d90a0 <pinAvailable+0x18>
   d9094:	f1a4 030b 	sub.w	r3, r4, #11
   d9098:	2b02      	cmp	r3, #2
   d909a:	d801      	bhi.n	d90a0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d909c:	2000      	movs	r0, #0
   d909e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d90a0:	f000 f8b0 	bl	d9204 <_Z19__fetch_global_Wirev>
   d90a4:	f7ff f8e4 	bl	d8270 <_ZN7TwoWire9isEnabledEv>
   d90a8:	b108      	cbz	r0, d90ae <pinAvailable+0x26>
   d90aa:	2c01      	cmp	r4, #1
   d90ac:	d9f6      	bls.n	d909c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d90ae:	f7ff f853 	bl	d8158 <_Z22__fetch_global_Serial1v>
   d90b2:	f7ff f84d 	bl	d8150 <_ZN11USARTSerial9isEnabledEv>
   d90b6:	b118      	cbz	r0, d90c0 <pinAvailable+0x38>
   d90b8:	f1a4 0309 	sub.w	r3, r4, #9
   d90bc:	2b01      	cmp	r3, #1
   d90be:	d9ed      	bls.n	d909c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d90c0:	2c23      	cmp	r4, #35	; 0x23
   d90c2:	bf8c      	ite	hi
   d90c4:	2000      	movhi	r0, #0
   d90c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d90c8:	bd10      	pop	{r4, pc}
   d90ca:	bf00      	nop
   d90cc:	2003e5e8 	.word	0x2003e5e8

000d90d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90d0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d90d2:	b538      	push	{r3, r4, r5, lr}
   d90d4:	4604      	mov	r4, r0
   d90d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d90d8:	d80a      	bhi.n	d90f0 <pinMode+0x20>
   d90da:	29ff      	cmp	r1, #255	; 0xff
   d90dc:	d008      	beq.n	d90f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d90de:	f7ff ffd3 	bl	d9088 <pinAvailable>
   d90e2:	b128      	cbz	r0, d90f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d90e4:	4629      	mov	r1, r5
   d90e6:	4620      	mov	r0, r4
}
   d90e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d90ec:	f7fd b8c2 	b.w	d6274 <HAL_Pin_Mode>
   d90f0:	bd38      	pop	{r3, r4, r5, pc}

000d90f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d90f2:	b538      	push	{r3, r4, r5, lr}
   d90f4:	4604      	mov	r4, r0
   d90f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d90f8:	f7fd f8c4 	bl	d6284 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d90fc:	28ff      	cmp	r0, #255	; 0xff
   d90fe:	d010      	beq.n	d9122 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9100:	2806      	cmp	r0, #6
   d9102:	d804      	bhi.n	d910e <digitalWrite+0x1c>
   d9104:	234d      	movs	r3, #77	; 0x4d
   d9106:	fa23 f000 	lsr.w	r0, r3, r0
   d910a:	07c3      	lsls	r3, r0, #31
   d910c:	d409      	bmi.n	d9122 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d910e:	4620      	mov	r0, r4
   d9110:	f7ff ffba 	bl	d9088 <pinAvailable>
   d9114:	b128      	cbz	r0, d9122 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9116:	4629      	mov	r1, r5
   d9118:	4620      	mov	r0, r4
}
   d911a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d911e:	f7fd b8b9 	b.w	d6294 <HAL_GPIO_Write>
   d9122:	bd38      	pop	{r3, r4, r5, pc}

000d9124 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9124:	b510      	push	{r4, lr}
   d9126:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9128:	f7fd f8ac 	bl	d6284 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d912c:	3804      	subs	r0, #4
   d912e:	b2c0      	uxtb	r0, r0
   d9130:	2801      	cmp	r0, #1
   d9132:	d908      	bls.n	d9146 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9134:	4620      	mov	r0, r4
   d9136:	f7ff ffa7 	bl	d9088 <pinAvailable>
   d913a:	b120      	cbz	r0, d9146 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d913c:	4620      	mov	r0, r4
}
   d913e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9142:	f7fd b8af 	b.w	d62a4 <HAL_GPIO_Read>
}
   d9146:	2000      	movs	r0, #0
   d9148:	bd10      	pop	{r4, pc}

000d914a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d914a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d914c:	b510      	push	{r4, lr}
   d914e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9150:	bf9c      	itt	ls
   d9152:	340e      	addls	r4, #14
   d9154:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9156:	4620      	mov	r0, r4
   d9158:	f7ff ff96 	bl	d9088 <pinAvailable>
   d915c:	b150      	cbz	r0, d9174 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d915e:	2103      	movs	r1, #3
   d9160:	4620      	mov	r0, r4
   d9162:	f7fd f87f 	bl	d6264 <HAL_Validate_Pin_Function>
   d9166:	2803      	cmp	r0, #3
   d9168:	d104      	bne.n	d9174 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d916a:	4620      	mov	r0, r4
}
   d916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9170:	f7fd b8a0 	b.w	d62b4 <HAL_ADC_Read>
}
   d9174:	2000      	movs	r0, #0
   d9176:	bd10      	pop	{r4, pc}

000d9178 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d9178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d917c:	4690      	mov	r8, r2
   d917e:	461e      	mov	r6, r3
   d9180:	2407      	movs	r4, #7
   d9182:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d9184:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d9186:	f1b8 0f00 	cmp.w	r8, #0
   d918a:	d104      	bne.n	d9196 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d918c:	f1c4 0107 	rsb	r1, r4, #7
   d9190:	fa46 f101 	asr.w	r1, r6, r1
   d9194:	e001      	b.n	d919a <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d9196:	fa46 f104 	asr.w	r1, r6, r4
   d919a:	f001 0101 	and.w	r1, r1, #1
   d919e:	4638      	mov	r0, r7
   d91a0:	f7ff ffa7 	bl	d90f2 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d91a4:	2101      	movs	r1, #1
   d91a6:	4628      	mov	r0, r5
   d91a8:	f7ff ffa3 	bl	d90f2 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d91ac:	2100      	movs	r1, #0
   d91ae:	4628      	mov	r0, r5
   d91b0:	f7ff ff9f 	bl	d90f2 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d91b4:	f114 34ff 	adds.w	r4, r4, #4294967295
   d91b8:	d2e5      	bcs.n	d9186 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d91ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d91c0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d91c0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d91c2:	4c0c      	ldr	r4, [pc, #48]	; (d91f4 <_GLOBAL__sub_I_SPI+0x34>)
   d91c4:	4e0c      	ldr	r6, [pc, #48]	; (d91f8 <_GLOBAL__sub_I_SPI+0x38>)
   d91c6:	4d0d      	ldr	r5, [pc, #52]	; (d91fc <_GLOBAL__sub_I_SPI+0x3c>)
   d91c8:	2100      	movs	r1, #0
   d91ca:	4620      	mov	r0, r4
   d91cc:	f7fd fc3e 	bl	d6a4c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d91d0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d91d2:	4c0b      	ldr	r4, [pc, #44]	; (d9200 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d91d4:	4632      	mov	r2, r6
   d91d6:	4629      	mov	r1, r5
   d91d8:	f000 f834 	bl	d9244 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d91dc:	2101      	movs	r1, #1
   d91de:	4620      	mov	r0, r4
   d91e0:	f7fd fc34 	bl	d6a4c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d91e4:	4632      	mov	r2, r6
   d91e6:	4629      	mov	r1, r5
   d91e8:	4620      	mov	r0, r4
   d91ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d91ee:	f000 b829 	b.w	d9244 <__aeabi_atexit>
   d91f2:	bf00      	nop
   d91f4:	2003e5e8 	.word	0x2003e5e8
   d91f8:	2003d7d0 	.word	0x2003d7d0
   d91fc:	000d6a3d 	.word	0x000d6a3d
   d9200:	2003e5f8 	.word	0x2003e5f8

000d9204 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d9204:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d9206:	4d0b      	ldr	r5, [pc, #44]	; (d9234 <_Z19__fetch_global_Wirev+0x30>)
   d9208:	6829      	ldr	r1, [r5, #0]
   d920a:	f011 0401 	ands.w	r4, r1, #1
   d920e:	d10f      	bne.n	d9230 <_Z19__fetch_global_Wirev+0x2c>
   d9210:	4628      	mov	r0, r5
   d9212:	f7fa ff53 	bl	d40bc <__cxa_guard_acquire>
   d9216:	b158      	cbz	r0, d9230 <_Z19__fetch_global_Wirev+0x2c>
   d9218:	4621      	mov	r1, r4
   d921a:	4807      	ldr	r0, [pc, #28]	; (d9238 <_Z19__fetch_global_Wirev+0x34>)
   d921c:	f7ff f802 	bl	d8224 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d9220:	4628      	mov	r0, r5
   d9222:	f7fa ff50 	bl	d40c6 <__cxa_guard_release>
   d9226:	4a05      	ldr	r2, [pc, #20]	; (d923c <_Z19__fetch_global_Wirev+0x38>)
   d9228:	4905      	ldr	r1, [pc, #20]	; (d9240 <_Z19__fetch_global_Wirev+0x3c>)
   d922a:	4803      	ldr	r0, [pc, #12]	; (d9238 <_Z19__fetch_global_Wirev+0x34>)
   d922c:	f000 f80a 	bl	d9244 <__aeabi_atexit>
	return wire;
}
   d9230:	4801      	ldr	r0, [pc, #4]	; (d9238 <_Z19__fetch_global_Wirev+0x34>)
   d9232:	bd38      	pop	{r3, r4, r5, pc}
   d9234:	2003e60c 	.word	0x2003e60c
   d9238:	2003e610 	.word	0x2003e610
   d923c:	2003d7d0 	.word	0x2003d7d0
   d9240:	000d81cd 	.word	0x000d81cd

000d9244 <__aeabi_atexit>:
   d9244:	460b      	mov	r3, r1
   d9246:	4601      	mov	r1, r0
   d9248:	4618      	mov	r0, r3
   d924a:	f000 bf47 	b.w	da0dc <__cxa_atexit>
	...

000d9250 <_ZSt15get_new_handlerv>:
   d9250:	4b02      	ldr	r3, [pc, #8]	; (d925c <_ZSt15get_new_handlerv+0xc>)
   d9252:	6818      	ldr	r0, [r3, #0]
   d9254:	f3bf 8f5f 	dmb	sy
   d9258:	4770      	bx	lr
   d925a:	bf00      	nop
   d925c:	2003e624 	.word	0x2003e624

000d9260 <_ZdlPvj>:
   d9260:	f7fa bf1d 	b.w	d409e <_ZdlPv>

000d9264 <_ZnajRKSt9nothrow_t>:
   d9264:	f000 b800 	b.w	d9268 <_ZnwjRKSt9nothrow_t>

000d9268 <_ZnwjRKSt9nothrow_t>:
   d9268:	b510      	push	{r4, lr}
   d926a:	2800      	cmp	r0, #0
   d926c:	bf14      	ite	ne
   d926e:	4604      	movne	r4, r0
   d9270:	2401      	moveq	r4, #1
   d9272:	4620      	mov	r0, r4
   d9274:	f7fd fb44 	bl	d6900 <malloc>
   d9278:	b920      	cbnz	r0, d9284 <_ZnwjRKSt9nothrow_t+0x1c>
   d927a:	f7ff ffe9 	bl	d9250 <_ZSt15get_new_handlerv>
   d927e:	b108      	cbz	r0, d9284 <_ZnwjRKSt9nothrow_t+0x1c>
   d9280:	4780      	blx	r0
   d9282:	e7f6      	b.n	d9272 <_ZnwjRKSt9nothrow_t+0xa>
   d9284:	bd10      	pop	{r4, pc}

000d9286 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d9286:	68c3      	ldr	r3, [r0, #12]
   d9288:	689a      	ldr	r2, [r3, #8]
   d928a:	60c2      	str	r2, [r0, #12]
   d928c:	b102      	cbz	r2, d9290 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   d928e:	6050      	str	r0, [r2, #4]
   d9290:	6842      	ldr	r2, [r0, #4]
   d9292:	605a      	str	r2, [r3, #4]
   d9294:	680a      	ldr	r2, [r1, #0]
   d9296:	4290      	cmp	r0, r2
   d9298:	d101      	bne.n	d929e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   d929a:	600b      	str	r3, [r1, #0]
   d929c:	e005      	b.n	d92aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   d929e:	6842      	ldr	r2, [r0, #4]
   d92a0:	6891      	ldr	r1, [r2, #8]
   d92a2:	4288      	cmp	r0, r1
   d92a4:	bf0c      	ite	eq
   d92a6:	6093      	streq	r3, [r2, #8]
   d92a8:	60d3      	strne	r3, [r2, #12]
   d92aa:	6098      	str	r0, [r3, #8]
   d92ac:	6043      	str	r3, [r0, #4]
   d92ae:	4770      	bx	lr

000d92b0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d92b0:	6883      	ldr	r3, [r0, #8]
   d92b2:	68da      	ldr	r2, [r3, #12]
   d92b4:	6082      	str	r2, [r0, #8]
   d92b6:	b102      	cbz	r2, d92ba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   d92b8:	6050      	str	r0, [r2, #4]
   d92ba:	6842      	ldr	r2, [r0, #4]
   d92bc:	605a      	str	r2, [r3, #4]
   d92be:	680a      	ldr	r2, [r1, #0]
   d92c0:	4290      	cmp	r0, r2
   d92c2:	d101      	bne.n	d92c8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   d92c4:	600b      	str	r3, [r1, #0]
   d92c6:	e005      	b.n	d92d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   d92c8:	6842      	ldr	r2, [r0, #4]
   d92ca:	68d1      	ldr	r1, [r2, #12]
   d92cc:	4288      	cmp	r0, r1
   d92ce:	bf0c      	ite	eq
   d92d0:	60d3      	streq	r3, [r2, #12]
   d92d2:	6093      	strne	r3, [r2, #8]
   d92d4:	60d8      	str	r0, [r3, #12]
   d92d6:	6043      	str	r3, [r0, #4]
   d92d8:	4770      	bx	lr

000d92da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d92da:	7803      	ldrb	r3, [r0, #0]
   d92dc:	b92b      	cbnz	r3, d92ea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d92de:	6843      	ldr	r3, [r0, #4]
   d92e0:	685b      	ldr	r3, [r3, #4]
   d92e2:	4298      	cmp	r0, r3
   d92e4:	d101      	bne.n	d92ea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d92e6:	68c3      	ldr	r3, [r0, #12]
   d92e8:	e00c      	b.n	d9304 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d92ea:	6883      	ldr	r3, [r0, #8]
   d92ec:	b11b      	cbz	r3, d92f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   d92ee:	68da      	ldr	r2, [r3, #12]
   d92f0:	b142      	cbz	r2, d9304 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d92f2:	4613      	mov	r3, r2
   d92f4:	e7fb      	b.n	d92ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   d92f6:	6843      	ldr	r3, [r0, #4]
   d92f8:	689a      	ldr	r2, [r3, #8]
   d92fa:	4282      	cmp	r2, r0
   d92fc:	d102      	bne.n	d9304 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d92fe:	4618      	mov	r0, r3
   d9300:	685b      	ldr	r3, [r3, #4]
   d9302:	e7f9      	b.n	d92f8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   d9304:	4618      	mov	r0, r3
   d9306:	4770      	bx	lr

000d9308 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d9308:	68c3      	ldr	r3, [r0, #12]
   d930a:	b123      	cbz	r3, d9316 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d930c:	4618      	mov	r0, r3
   d930e:	689b      	ldr	r3, [r3, #8]
   d9310:	2b00      	cmp	r3, #0
   d9312:	d1fb      	bne.n	d930c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d9314:	e00a      	b.n	d932c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
   d9316:	6843      	ldr	r3, [r0, #4]
   d9318:	68da      	ldr	r2, [r3, #12]
   d931a:	4282      	cmp	r2, r0
   d931c:	d102      	bne.n	d9324 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d931e:	4618      	mov	r0, r3
   d9320:	685b      	ldr	r3, [r3, #4]
   d9322:	e7f9      	b.n	d9318 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d9324:	68c2      	ldr	r2, [r0, #12]
   d9326:	4293      	cmp	r3, r2
   d9328:	bf18      	it	ne
   d932a:	4618      	movne	r0, r3
   d932c:	4770      	bx	lr

000d932e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d932e:	f7ff bfd4 	b.w	d92da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d9332 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d9332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9336:	461f      	mov	r7, r3
   d9338:	f103 0904 	add.w	r9, r3, #4
   d933c:	2300      	movs	r3, #0
   d933e:	460c      	mov	r4, r1
   d9340:	604a      	str	r2, [r1, #4]
   d9342:	608b      	str	r3, [r1, #8]
   d9344:	60cb      	str	r3, [r1, #12]
   d9346:	700b      	strb	r3, [r1, #0]
   d9348:	b168      	cbz	r0, d9366 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   d934a:	4297      	cmp	r7, r2
   d934c:	6091      	str	r1, [r2, #8]
   d934e:	d101      	bne.n	d9354 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9350:	6079      	str	r1, [r7, #4]
   d9352:	e00c      	b.n	d936e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   d9354:	68bb      	ldr	r3, [r7, #8]
   d9356:	429a      	cmp	r2, r3
   d9358:	bf08      	it	eq
   d935a:	60b9      	streq	r1, [r7, #8]
   d935c:	f04f 0801 	mov.w	r8, #1
   d9360:	f04f 0a00 	mov.w	sl, #0
   d9364:	e017      	b.n	d9396 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d9366:	60d1      	str	r1, [r2, #12]
   d9368:	68fb      	ldr	r3, [r7, #12]
   d936a:	429a      	cmp	r2, r3
   d936c:	d1f6      	bne.n	d935c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d936e:	60fc      	str	r4, [r7, #12]
   d9370:	e7f4      	b.n	d935c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d9372:	6866      	ldr	r6, [r4, #4]
   d9374:	7832      	ldrb	r2, [r6, #0]
   d9376:	2a00      	cmp	r2, #0
   d9378:	d13a      	bne.n	d93f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d937a:	6875      	ldr	r5, [r6, #4]
   d937c:	68ab      	ldr	r3, [r5, #8]
   d937e:	429e      	cmp	r6, r3
   d9380:	d11f      	bne.n	d93c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   d9382:	68eb      	ldr	r3, [r5, #12]
   d9384:	b15b      	cbz	r3, d939e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d9386:	781a      	ldrb	r2, [r3, #0]
   d9388:	b94a      	cbnz	r2, d939e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d938a:	f886 8000 	strb.w	r8, [r6]
   d938e:	f883 8000 	strb.w	r8, [r3]
   d9392:	702a      	strb	r2, [r5, #0]
   d9394:	462c      	mov	r4, r5
   d9396:	687b      	ldr	r3, [r7, #4]
   d9398:	429c      	cmp	r4, r3
   d939a:	d1ea      	bne.n	d9372 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   d939c:	e028      	b.n	d93f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d939e:	68f3      	ldr	r3, [r6, #12]
   d93a0:	429c      	cmp	r4, r3
   d93a2:	d104      	bne.n	d93ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   d93a4:	4649      	mov	r1, r9
   d93a6:	4630      	mov	r0, r6
   d93a8:	f7ff ff6d 	bl	d9286 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d93ac:	4634      	mov	r4, r6
   d93ae:	6863      	ldr	r3, [r4, #4]
   d93b0:	4649      	mov	r1, r9
   d93b2:	f883 8000 	strb.w	r8, [r3]
   d93b6:	4628      	mov	r0, r5
   d93b8:	f885 a000 	strb.w	sl, [r5]
   d93bc:	f7ff ff78 	bl	d92b0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d93c0:	e014      	b.n	d93ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   d93c2:	b113      	cbz	r3, d93ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   d93c4:	781a      	ldrb	r2, [r3, #0]
   d93c6:	2a00      	cmp	r2, #0
   d93c8:	d0df      	beq.n	d938a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   d93ca:	68b3      	ldr	r3, [r6, #8]
   d93cc:	429c      	cmp	r4, r3
   d93ce:	d104      	bne.n	d93da <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   d93d0:	4649      	mov	r1, r9
   d93d2:	4630      	mov	r0, r6
   d93d4:	f7ff ff6c 	bl	d92b0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d93d8:	4634      	mov	r4, r6
   d93da:	6863      	ldr	r3, [r4, #4]
   d93dc:	4649      	mov	r1, r9
   d93de:	f883 8000 	strb.w	r8, [r3]
   d93e2:	4628      	mov	r0, r5
   d93e4:	f885 a000 	strb.w	sl, [r5]
   d93e8:	f7ff ff4d 	bl	d9286 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d93ec:	4625      	mov	r5, r4
   d93ee:	e7d1      	b.n	d9394 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   d93f0:	2201      	movs	r2, #1
   d93f2:	701a      	strb	r2, [r3, #0]
   d93f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d93f8 <_ZSt25__throw_bad_function_callv>:
   d93f8:	b508      	push	{r3, lr}
   d93fa:	f7fd fac9 	bl	d6990 <abort>
	...

000d9400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9400:	4b18      	ldr	r3, [pc, #96]	; (d9464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9402:	681a      	ldr	r2, [r3, #0]
   d9404:	07d1      	lsls	r1, r2, #31
   d9406:	bf5c      	itt	pl
   d9408:	2201      	movpl	r2, #1
   d940a:	601a      	strpl	r2, [r3, #0]
   d940c:	4b16      	ldr	r3, [pc, #88]	; (d9468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d940e:	681a      	ldr	r2, [r3, #0]
   d9410:	07d2      	lsls	r2, r2, #31
   d9412:	bf5c      	itt	pl
   d9414:	2201      	movpl	r2, #1
   d9416:	601a      	strpl	r2, [r3, #0]
   d9418:	4b14      	ldr	r3, [pc, #80]	; (d946c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d941a:	681a      	ldr	r2, [r3, #0]
   d941c:	07d0      	lsls	r0, r2, #31
   d941e:	bf5c      	itt	pl
   d9420:	2201      	movpl	r2, #1
   d9422:	601a      	strpl	r2, [r3, #0]
   d9424:	4b12      	ldr	r3, [pc, #72]	; (d9470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9426:	681a      	ldr	r2, [r3, #0]
   d9428:	07d1      	lsls	r1, r2, #31
   d942a:	bf5c      	itt	pl
   d942c:	2201      	movpl	r2, #1
   d942e:	601a      	strpl	r2, [r3, #0]
   d9430:	4b10      	ldr	r3, [pc, #64]	; (d9474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9432:	681a      	ldr	r2, [r3, #0]
   d9434:	07d2      	lsls	r2, r2, #31
   d9436:	bf5c      	itt	pl
   d9438:	2201      	movpl	r2, #1
   d943a:	601a      	strpl	r2, [r3, #0]
   d943c:	4b0e      	ldr	r3, [pc, #56]	; (d9478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d943e:	681a      	ldr	r2, [r3, #0]
   d9440:	07d0      	lsls	r0, r2, #31
   d9442:	bf5c      	itt	pl
   d9444:	2201      	movpl	r2, #1
   d9446:	601a      	strpl	r2, [r3, #0]
   d9448:	4b0c      	ldr	r3, [pc, #48]	; (d947c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d944a:	681a      	ldr	r2, [r3, #0]
   d944c:	07d1      	lsls	r1, r2, #31
   d944e:	bf5c      	itt	pl
   d9450:	2201      	movpl	r2, #1
   d9452:	601a      	strpl	r2, [r3, #0]
   d9454:	4b0a      	ldr	r3, [pc, #40]	; (d9480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9456:	681a      	ldr	r2, [r3, #0]
   d9458:	07d2      	lsls	r2, r2, #31
   d945a:	bf5c      	itt	pl
   d945c:	2201      	movpl	r2, #1
   d945e:	601a      	strpl	r2, [r3, #0]
   d9460:	4770      	bx	lr
   d9462:	bf00      	nop
   d9464:	2003e644 	.word	0x2003e644
   d9468:	2003e640 	.word	0x2003e640
   d946c:	2003e63c 	.word	0x2003e63c
   d9470:	2003e638 	.word	0x2003e638
   d9474:	2003e634 	.word	0x2003e634
   d9478:	2003e630 	.word	0x2003e630
   d947c:	2003e62c 	.word	0x2003e62c
   d9480:	2003e628 	.word	0x2003e628

000d9484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9484:	4b24      	ldr	r3, [pc, #144]	; (d9518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d9486:	681a      	ldr	r2, [r3, #0]
   d9488:	07d0      	lsls	r0, r2, #31
   d948a:	bf5c      	itt	pl
   d948c:	2201      	movpl	r2, #1
   d948e:	601a      	strpl	r2, [r3, #0]
   d9490:	4b22      	ldr	r3, [pc, #136]	; (d951c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d9492:	681a      	ldr	r2, [r3, #0]
   d9494:	07d1      	lsls	r1, r2, #31
   d9496:	bf5c      	itt	pl
   d9498:	2201      	movpl	r2, #1
   d949a:	601a      	strpl	r2, [r3, #0]
   d949c:	4b20      	ldr	r3, [pc, #128]	; (d9520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d949e:	681a      	ldr	r2, [r3, #0]
   d94a0:	07d2      	lsls	r2, r2, #31
   d94a2:	bf5c      	itt	pl
   d94a4:	2201      	movpl	r2, #1
   d94a6:	601a      	strpl	r2, [r3, #0]
   d94a8:	4b1e      	ldr	r3, [pc, #120]	; (d9524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d94aa:	681a      	ldr	r2, [r3, #0]
   d94ac:	07d0      	lsls	r0, r2, #31
   d94ae:	bf5c      	itt	pl
   d94b0:	2201      	movpl	r2, #1
   d94b2:	601a      	strpl	r2, [r3, #0]
   d94b4:	4b1c      	ldr	r3, [pc, #112]	; (d9528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d94b6:	681a      	ldr	r2, [r3, #0]
   d94b8:	07d1      	lsls	r1, r2, #31
   d94ba:	bf5c      	itt	pl
   d94bc:	2201      	movpl	r2, #1
   d94be:	601a      	strpl	r2, [r3, #0]
   d94c0:	4b1a      	ldr	r3, [pc, #104]	; (d952c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d94c2:	681a      	ldr	r2, [r3, #0]
   d94c4:	07d2      	lsls	r2, r2, #31
   d94c6:	bf5c      	itt	pl
   d94c8:	2201      	movpl	r2, #1
   d94ca:	601a      	strpl	r2, [r3, #0]
   d94cc:	4b18      	ldr	r3, [pc, #96]	; (d9530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d94ce:	681a      	ldr	r2, [r3, #0]
   d94d0:	07d0      	lsls	r0, r2, #31
   d94d2:	bf5c      	itt	pl
   d94d4:	2201      	movpl	r2, #1
   d94d6:	601a      	strpl	r2, [r3, #0]
   d94d8:	4b16      	ldr	r3, [pc, #88]	; (d9534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d94da:	681a      	ldr	r2, [r3, #0]
   d94dc:	07d1      	lsls	r1, r2, #31
   d94de:	bf5c      	itt	pl
   d94e0:	2201      	movpl	r2, #1
   d94e2:	601a      	strpl	r2, [r3, #0]
   d94e4:	4b14      	ldr	r3, [pc, #80]	; (d9538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d94e6:	681a      	ldr	r2, [r3, #0]
   d94e8:	07d2      	lsls	r2, r2, #31
   d94ea:	bf5c      	itt	pl
   d94ec:	2201      	movpl	r2, #1
   d94ee:	601a      	strpl	r2, [r3, #0]
   d94f0:	4b12      	ldr	r3, [pc, #72]	; (d953c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d94f2:	681a      	ldr	r2, [r3, #0]
   d94f4:	07d0      	lsls	r0, r2, #31
   d94f6:	bf5c      	itt	pl
   d94f8:	2201      	movpl	r2, #1
   d94fa:	601a      	strpl	r2, [r3, #0]
   d94fc:	4b10      	ldr	r3, [pc, #64]	; (d9540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d94fe:	681a      	ldr	r2, [r3, #0]
   d9500:	07d1      	lsls	r1, r2, #31
   d9502:	bf5c      	itt	pl
   d9504:	2201      	movpl	r2, #1
   d9506:	601a      	strpl	r2, [r3, #0]
   d9508:	4b0e      	ldr	r3, [pc, #56]	; (d9544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d950a:	681a      	ldr	r2, [r3, #0]
   d950c:	07d2      	lsls	r2, r2, #31
   d950e:	bf5c      	itt	pl
   d9510:	2201      	movpl	r2, #1
   d9512:	601a      	strpl	r2, [r3, #0]
   d9514:	4770      	bx	lr
   d9516:	bf00      	nop
   d9518:	2003e674 	.word	0x2003e674
   d951c:	2003e670 	.word	0x2003e670
   d9520:	2003e66c 	.word	0x2003e66c
   d9524:	2003e668 	.word	0x2003e668
   d9528:	2003e664 	.word	0x2003e664
   d952c:	2003e660 	.word	0x2003e660
   d9530:	2003e65c 	.word	0x2003e65c
   d9534:	2003e658 	.word	0x2003e658
   d9538:	2003e654 	.word	0x2003e654
   d953c:	2003e650 	.word	0x2003e650
   d9540:	2003e64c 	.word	0x2003e64c
   d9544:	2003e648 	.word	0x2003e648

000d9548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9548:	4b24      	ldr	r3, [pc, #144]	; (d95dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d954a:	681a      	ldr	r2, [r3, #0]
   d954c:	07d0      	lsls	r0, r2, #31
   d954e:	bf5c      	itt	pl
   d9550:	2201      	movpl	r2, #1
   d9552:	601a      	strpl	r2, [r3, #0]
   d9554:	4b22      	ldr	r3, [pc, #136]	; (d95e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9556:	681a      	ldr	r2, [r3, #0]
   d9558:	07d1      	lsls	r1, r2, #31
   d955a:	bf5c      	itt	pl
   d955c:	2201      	movpl	r2, #1
   d955e:	601a      	strpl	r2, [r3, #0]
   d9560:	4b20      	ldr	r3, [pc, #128]	; (d95e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9562:	681a      	ldr	r2, [r3, #0]
   d9564:	07d2      	lsls	r2, r2, #31
   d9566:	bf5c      	itt	pl
   d9568:	2201      	movpl	r2, #1
   d956a:	601a      	strpl	r2, [r3, #0]
   d956c:	4b1e      	ldr	r3, [pc, #120]	; (d95e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d956e:	681a      	ldr	r2, [r3, #0]
   d9570:	07d0      	lsls	r0, r2, #31
   d9572:	bf5c      	itt	pl
   d9574:	2201      	movpl	r2, #1
   d9576:	601a      	strpl	r2, [r3, #0]
   d9578:	4b1c      	ldr	r3, [pc, #112]	; (d95ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d957a:	681a      	ldr	r2, [r3, #0]
   d957c:	07d1      	lsls	r1, r2, #31
   d957e:	bf5c      	itt	pl
   d9580:	2201      	movpl	r2, #1
   d9582:	601a      	strpl	r2, [r3, #0]
   d9584:	4b1a      	ldr	r3, [pc, #104]	; (d95f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9586:	681a      	ldr	r2, [r3, #0]
   d9588:	07d2      	lsls	r2, r2, #31
   d958a:	bf5c      	itt	pl
   d958c:	2201      	movpl	r2, #1
   d958e:	601a      	strpl	r2, [r3, #0]
   d9590:	4b18      	ldr	r3, [pc, #96]	; (d95f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9592:	681a      	ldr	r2, [r3, #0]
   d9594:	07d0      	lsls	r0, r2, #31
   d9596:	bf5c      	itt	pl
   d9598:	2201      	movpl	r2, #1
   d959a:	601a      	strpl	r2, [r3, #0]
   d959c:	4b16      	ldr	r3, [pc, #88]	; (d95f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d959e:	681a      	ldr	r2, [r3, #0]
   d95a0:	07d1      	lsls	r1, r2, #31
   d95a2:	bf5c      	itt	pl
   d95a4:	2201      	movpl	r2, #1
   d95a6:	601a      	strpl	r2, [r3, #0]
   d95a8:	4b14      	ldr	r3, [pc, #80]	; (d95fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d95aa:	681a      	ldr	r2, [r3, #0]
   d95ac:	07d2      	lsls	r2, r2, #31
   d95ae:	bf5c      	itt	pl
   d95b0:	2201      	movpl	r2, #1
   d95b2:	601a      	strpl	r2, [r3, #0]
   d95b4:	4b12      	ldr	r3, [pc, #72]	; (d9600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d95b6:	681a      	ldr	r2, [r3, #0]
   d95b8:	07d0      	lsls	r0, r2, #31
   d95ba:	bf5c      	itt	pl
   d95bc:	2201      	movpl	r2, #1
   d95be:	601a      	strpl	r2, [r3, #0]
   d95c0:	4b10      	ldr	r3, [pc, #64]	; (d9604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d95c2:	681a      	ldr	r2, [r3, #0]
   d95c4:	07d1      	lsls	r1, r2, #31
   d95c6:	bf5c      	itt	pl
   d95c8:	2201      	movpl	r2, #1
   d95ca:	601a      	strpl	r2, [r3, #0]
   d95cc:	4b0e      	ldr	r3, [pc, #56]	; (d9608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d95ce:	681a      	ldr	r2, [r3, #0]
   d95d0:	07d2      	lsls	r2, r2, #31
   d95d2:	bf5c      	itt	pl
   d95d4:	2201      	movpl	r2, #1
   d95d6:	601a      	strpl	r2, [r3, #0]
   d95d8:	4770      	bx	lr
   d95da:	bf00      	nop
   d95dc:	2003e6a4 	.word	0x2003e6a4
   d95e0:	2003e6a0 	.word	0x2003e6a0
   d95e4:	2003e69c 	.word	0x2003e69c
   d95e8:	2003e698 	.word	0x2003e698
   d95ec:	2003e694 	.word	0x2003e694
   d95f0:	2003e690 	.word	0x2003e690
   d95f4:	2003e68c 	.word	0x2003e68c
   d95f8:	2003e688 	.word	0x2003e688
   d95fc:	2003e684 	.word	0x2003e684
   d9600:	2003e680 	.word	0x2003e680
   d9604:	2003e67c 	.word	0x2003e67c
   d9608:	2003e678 	.word	0x2003e678

000d960c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d960c:	4b18      	ldr	r3, [pc, #96]	; (d9670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d960e:	681a      	ldr	r2, [r3, #0]
   d9610:	07d1      	lsls	r1, r2, #31
   d9612:	bf5c      	itt	pl
   d9614:	2201      	movpl	r2, #1
   d9616:	601a      	strpl	r2, [r3, #0]
   d9618:	4b16      	ldr	r3, [pc, #88]	; (d9674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d961a:	681a      	ldr	r2, [r3, #0]
   d961c:	07d2      	lsls	r2, r2, #31
   d961e:	bf5c      	itt	pl
   d9620:	2201      	movpl	r2, #1
   d9622:	601a      	strpl	r2, [r3, #0]
   d9624:	4b14      	ldr	r3, [pc, #80]	; (d9678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9626:	681a      	ldr	r2, [r3, #0]
   d9628:	07d0      	lsls	r0, r2, #31
   d962a:	bf5c      	itt	pl
   d962c:	2201      	movpl	r2, #1
   d962e:	601a      	strpl	r2, [r3, #0]
   d9630:	4b12      	ldr	r3, [pc, #72]	; (d967c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9632:	681a      	ldr	r2, [r3, #0]
   d9634:	07d1      	lsls	r1, r2, #31
   d9636:	bf5c      	itt	pl
   d9638:	2201      	movpl	r2, #1
   d963a:	601a      	strpl	r2, [r3, #0]
   d963c:	4b10      	ldr	r3, [pc, #64]	; (d9680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d963e:	681a      	ldr	r2, [r3, #0]
   d9640:	07d2      	lsls	r2, r2, #31
   d9642:	bf5c      	itt	pl
   d9644:	2201      	movpl	r2, #1
   d9646:	601a      	strpl	r2, [r3, #0]
   d9648:	4b0e      	ldr	r3, [pc, #56]	; (d9684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d964a:	681a      	ldr	r2, [r3, #0]
   d964c:	07d0      	lsls	r0, r2, #31
   d964e:	bf5c      	itt	pl
   d9650:	2201      	movpl	r2, #1
   d9652:	601a      	strpl	r2, [r3, #0]
   d9654:	4b0c      	ldr	r3, [pc, #48]	; (d9688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9656:	681a      	ldr	r2, [r3, #0]
   d9658:	07d1      	lsls	r1, r2, #31
   d965a:	bf5c      	itt	pl
   d965c:	2201      	movpl	r2, #1
   d965e:	601a      	strpl	r2, [r3, #0]
   d9660:	4b0a      	ldr	r3, [pc, #40]	; (d968c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9662:	681a      	ldr	r2, [r3, #0]
   d9664:	07d2      	lsls	r2, r2, #31
   d9666:	bf5c      	itt	pl
   d9668:	2201      	movpl	r2, #1
   d966a:	601a      	strpl	r2, [r3, #0]
   d966c:	4770      	bx	lr
   d966e:	bf00      	nop
   d9670:	2003e6c4 	.word	0x2003e6c4
   d9674:	2003e6c0 	.word	0x2003e6c0
   d9678:	2003e6bc 	.word	0x2003e6bc
   d967c:	2003e6b8 	.word	0x2003e6b8
   d9680:	2003e6b4 	.word	0x2003e6b4
   d9684:	2003e6b0 	.word	0x2003e6b0
   d9688:	2003e6ac 	.word	0x2003e6ac
   d968c:	2003e6a8 	.word	0x2003e6a8

000d9690 <__aeabi_drsub>:
   d9690:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9694:	e002      	b.n	d969c <__adddf3>
   d9696:	bf00      	nop

000d9698 <__aeabi_dsub>:
   d9698:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d969c <__adddf3>:
   d969c:	b530      	push	{r4, r5, lr}
   d969e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d96a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d96a6:	ea94 0f05 	teq	r4, r5
   d96aa:	bf08      	it	eq
   d96ac:	ea90 0f02 	teqeq	r0, r2
   d96b0:	bf1f      	itttt	ne
   d96b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d96b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d96ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d96be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d96c2:	f000 80e2 	beq.w	d988a <__adddf3+0x1ee>
   d96c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d96ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d96ce:	bfb8      	it	lt
   d96d0:	426d      	neglt	r5, r5
   d96d2:	dd0c      	ble.n	d96ee <__adddf3+0x52>
   d96d4:	442c      	add	r4, r5
   d96d6:	ea80 0202 	eor.w	r2, r0, r2
   d96da:	ea81 0303 	eor.w	r3, r1, r3
   d96de:	ea82 0000 	eor.w	r0, r2, r0
   d96e2:	ea83 0101 	eor.w	r1, r3, r1
   d96e6:	ea80 0202 	eor.w	r2, r0, r2
   d96ea:	ea81 0303 	eor.w	r3, r1, r3
   d96ee:	2d36      	cmp	r5, #54	; 0x36
   d96f0:	bf88      	it	hi
   d96f2:	bd30      	pophi	{r4, r5, pc}
   d96f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d96f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d96fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9700:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9704:	d002      	beq.n	d970c <__adddf3+0x70>
   d9706:	4240      	negs	r0, r0
   d9708:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d970c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9710:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9714:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9718:	d002      	beq.n	d9720 <__adddf3+0x84>
   d971a:	4252      	negs	r2, r2
   d971c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9720:	ea94 0f05 	teq	r4, r5
   d9724:	f000 80a7 	beq.w	d9876 <__adddf3+0x1da>
   d9728:	f1a4 0401 	sub.w	r4, r4, #1
   d972c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9730:	db0d      	blt.n	d974e <__adddf3+0xb2>
   d9732:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9736:	fa22 f205 	lsr.w	r2, r2, r5
   d973a:	1880      	adds	r0, r0, r2
   d973c:	f141 0100 	adc.w	r1, r1, #0
   d9740:	fa03 f20e 	lsl.w	r2, r3, lr
   d9744:	1880      	adds	r0, r0, r2
   d9746:	fa43 f305 	asr.w	r3, r3, r5
   d974a:	4159      	adcs	r1, r3
   d974c:	e00e      	b.n	d976c <__adddf3+0xd0>
   d974e:	f1a5 0520 	sub.w	r5, r5, #32
   d9752:	f10e 0e20 	add.w	lr, lr, #32
   d9756:	2a01      	cmp	r2, #1
   d9758:	fa03 fc0e 	lsl.w	ip, r3, lr
   d975c:	bf28      	it	cs
   d975e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9762:	fa43 f305 	asr.w	r3, r3, r5
   d9766:	18c0      	adds	r0, r0, r3
   d9768:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d976c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9770:	d507      	bpl.n	d9782 <__adddf3+0xe6>
   d9772:	f04f 0e00 	mov.w	lr, #0
   d9776:	f1dc 0c00 	rsbs	ip, ip, #0
   d977a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d977e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9782:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9786:	d31b      	bcc.n	d97c0 <__adddf3+0x124>
   d9788:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d978c:	d30c      	bcc.n	d97a8 <__adddf3+0x10c>
   d978e:	0849      	lsrs	r1, r1, #1
   d9790:	ea5f 0030 	movs.w	r0, r0, rrx
   d9794:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9798:	f104 0401 	add.w	r4, r4, #1
   d979c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d97a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d97a4:	f080 809a 	bcs.w	d98dc <__adddf3+0x240>
   d97a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d97ac:	bf08      	it	eq
   d97ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d97b2:	f150 0000 	adcs.w	r0, r0, #0
   d97b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d97ba:	ea41 0105 	orr.w	r1, r1, r5
   d97be:	bd30      	pop	{r4, r5, pc}
   d97c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d97c4:	4140      	adcs	r0, r0
   d97c6:	eb41 0101 	adc.w	r1, r1, r1
   d97ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d97ce:	f1a4 0401 	sub.w	r4, r4, #1
   d97d2:	d1e9      	bne.n	d97a8 <__adddf3+0x10c>
   d97d4:	f091 0f00 	teq	r1, #0
   d97d8:	bf04      	itt	eq
   d97da:	4601      	moveq	r1, r0
   d97dc:	2000      	moveq	r0, #0
   d97de:	fab1 f381 	clz	r3, r1
   d97e2:	bf08      	it	eq
   d97e4:	3320      	addeq	r3, #32
   d97e6:	f1a3 030b 	sub.w	r3, r3, #11
   d97ea:	f1b3 0220 	subs.w	r2, r3, #32
   d97ee:	da0c      	bge.n	d980a <__adddf3+0x16e>
   d97f0:	320c      	adds	r2, #12
   d97f2:	dd08      	ble.n	d9806 <__adddf3+0x16a>
   d97f4:	f102 0c14 	add.w	ip, r2, #20
   d97f8:	f1c2 020c 	rsb	r2, r2, #12
   d97fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d9800:	fa21 f102 	lsr.w	r1, r1, r2
   d9804:	e00c      	b.n	d9820 <__adddf3+0x184>
   d9806:	f102 0214 	add.w	r2, r2, #20
   d980a:	bfd8      	it	le
   d980c:	f1c2 0c20 	rsble	ip, r2, #32
   d9810:	fa01 f102 	lsl.w	r1, r1, r2
   d9814:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9818:	bfdc      	itt	le
   d981a:	ea41 010c 	orrle.w	r1, r1, ip
   d981e:	4090      	lslle	r0, r2
   d9820:	1ae4      	subs	r4, r4, r3
   d9822:	bfa2      	ittt	ge
   d9824:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9828:	4329      	orrge	r1, r5
   d982a:	bd30      	popge	{r4, r5, pc}
   d982c:	ea6f 0404 	mvn.w	r4, r4
   d9830:	3c1f      	subs	r4, #31
   d9832:	da1c      	bge.n	d986e <__adddf3+0x1d2>
   d9834:	340c      	adds	r4, #12
   d9836:	dc0e      	bgt.n	d9856 <__adddf3+0x1ba>
   d9838:	f104 0414 	add.w	r4, r4, #20
   d983c:	f1c4 0220 	rsb	r2, r4, #32
   d9840:	fa20 f004 	lsr.w	r0, r0, r4
   d9844:	fa01 f302 	lsl.w	r3, r1, r2
   d9848:	ea40 0003 	orr.w	r0, r0, r3
   d984c:	fa21 f304 	lsr.w	r3, r1, r4
   d9850:	ea45 0103 	orr.w	r1, r5, r3
   d9854:	bd30      	pop	{r4, r5, pc}
   d9856:	f1c4 040c 	rsb	r4, r4, #12
   d985a:	f1c4 0220 	rsb	r2, r4, #32
   d985e:	fa20 f002 	lsr.w	r0, r0, r2
   d9862:	fa01 f304 	lsl.w	r3, r1, r4
   d9866:	ea40 0003 	orr.w	r0, r0, r3
   d986a:	4629      	mov	r1, r5
   d986c:	bd30      	pop	{r4, r5, pc}
   d986e:	fa21 f004 	lsr.w	r0, r1, r4
   d9872:	4629      	mov	r1, r5
   d9874:	bd30      	pop	{r4, r5, pc}
   d9876:	f094 0f00 	teq	r4, #0
   d987a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d987e:	bf06      	itte	eq
   d9880:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9884:	3401      	addeq	r4, #1
   d9886:	3d01      	subne	r5, #1
   d9888:	e74e      	b.n	d9728 <__adddf3+0x8c>
   d988a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d988e:	bf18      	it	ne
   d9890:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9894:	d029      	beq.n	d98ea <__adddf3+0x24e>
   d9896:	ea94 0f05 	teq	r4, r5
   d989a:	bf08      	it	eq
   d989c:	ea90 0f02 	teqeq	r0, r2
   d98a0:	d005      	beq.n	d98ae <__adddf3+0x212>
   d98a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d98a6:	bf04      	itt	eq
   d98a8:	4619      	moveq	r1, r3
   d98aa:	4610      	moveq	r0, r2
   d98ac:	bd30      	pop	{r4, r5, pc}
   d98ae:	ea91 0f03 	teq	r1, r3
   d98b2:	bf1e      	ittt	ne
   d98b4:	2100      	movne	r1, #0
   d98b6:	2000      	movne	r0, #0
   d98b8:	bd30      	popne	{r4, r5, pc}
   d98ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d98be:	d105      	bne.n	d98cc <__adddf3+0x230>
   d98c0:	0040      	lsls	r0, r0, #1
   d98c2:	4149      	adcs	r1, r1
   d98c4:	bf28      	it	cs
   d98c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d98ca:	bd30      	pop	{r4, r5, pc}
   d98cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d98d0:	bf3c      	itt	cc
   d98d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d98d6:	bd30      	popcc	{r4, r5, pc}
   d98d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d98e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d98e4:	f04f 0000 	mov.w	r0, #0
   d98e8:	bd30      	pop	{r4, r5, pc}
   d98ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d98ee:	bf1a      	itte	ne
   d98f0:	4619      	movne	r1, r3
   d98f2:	4610      	movne	r0, r2
   d98f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d98f8:	bf1c      	itt	ne
   d98fa:	460b      	movne	r3, r1
   d98fc:	4602      	movne	r2, r0
   d98fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9902:	bf06      	itte	eq
   d9904:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9908:	ea91 0f03 	teqeq	r1, r3
   d990c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9910:	bd30      	pop	{r4, r5, pc}
   d9912:	bf00      	nop

000d9914 <__aeabi_ui2d>:
   d9914:	f090 0f00 	teq	r0, #0
   d9918:	bf04      	itt	eq
   d991a:	2100      	moveq	r1, #0
   d991c:	4770      	bxeq	lr
   d991e:	b530      	push	{r4, r5, lr}
   d9920:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9924:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9928:	f04f 0500 	mov.w	r5, #0
   d992c:	f04f 0100 	mov.w	r1, #0
   d9930:	e750      	b.n	d97d4 <__adddf3+0x138>
   d9932:	bf00      	nop

000d9934 <__aeabi_i2d>:
   d9934:	f090 0f00 	teq	r0, #0
   d9938:	bf04      	itt	eq
   d993a:	2100      	moveq	r1, #0
   d993c:	4770      	bxeq	lr
   d993e:	b530      	push	{r4, r5, lr}
   d9940:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9944:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9948:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d994c:	bf48      	it	mi
   d994e:	4240      	negmi	r0, r0
   d9950:	f04f 0100 	mov.w	r1, #0
   d9954:	e73e      	b.n	d97d4 <__adddf3+0x138>
   d9956:	bf00      	nop

000d9958 <__aeabi_f2d>:
   d9958:	0042      	lsls	r2, r0, #1
   d995a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d995e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9962:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9966:	bf1f      	itttt	ne
   d9968:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d996c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9970:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9974:	4770      	bxne	lr
   d9976:	f092 0f00 	teq	r2, #0
   d997a:	bf14      	ite	ne
   d997c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9980:	4770      	bxeq	lr
   d9982:	b530      	push	{r4, r5, lr}
   d9984:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9988:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d998c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9990:	e720      	b.n	d97d4 <__adddf3+0x138>
   d9992:	bf00      	nop

000d9994 <__aeabi_ul2d>:
   d9994:	ea50 0201 	orrs.w	r2, r0, r1
   d9998:	bf08      	it	eq
   d999a:	4770      	bxeq	lr
   d999c:	b530      	push	{r4, r5, lr}
   d999e:	f04f 0500 	mov.w	r5, #0
   d99a2:	e00a      	b.n	d99ba <__aeabi_l2d+0x16>

000d99a4 <__aeabi_l2d>:
   d99a4:	ea50 0201 	orrs.w	r2, r0, r1
   d99a8:	bf08      	it	eq
   d99aa:	4770      	bxeq	lr
   d99ac:	b530      	push	{r4, r5, lr}
   d99ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d99b2:	d502      	bpl.n	d99ba <__aeabi_l2d+0x16>
   d99b4:	4240      	negs	r0, r0
   d99b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d99ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d99be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d99c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d99c6:	f43f aedc 	beq.w	d9782 <__adddf3+0xe6>
   d99ca:	f04f 0203 	mov.w	r2, #3
   d99ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99d2:	bf18      	it	ne
   d99d4:	3203      	addne	r2, #3
   d99d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99da:	bf18      	it	ne
   d99dc:	3203      	addne	r2, #3
   d99de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d99e2:	f1c2 0320 	rsb	r3, r2, #32
   d99e6:	fa00 fc03 	lsl.w	ip, r0, r3
   d99ea:	fa20 f002 	lsr.w	r0, r0, r2
   d99ee:	fa01 fe03 	lsl.w	lr, r1, r3
   d99f2:	ea40 000e 	orr.w	r0, r0, lr
   d99f6:	fa21 f102 	lsr.w	r1, r1, r2
   d99fa:	4414      	add	r4, r2
   d99fc:	e6c1      	b.n	d9782 <__adddf3+0xe6>
   d99fe:	bf00      	nop

000d9a00 <__aeabi_dmul>:
   d9a00:	b570      	push	{r4, r5, r6, lr}
   d9a02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9a06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9a0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9a0e:	bf1d      	ittte	ne
   d9a10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9a14:	ea94 0f0c 	teqne	r4, ip
   d9a18:	ea95 0f0c 	teqne	r5, ip
   d9a1c:	f000 f8de 	bleq	d9bdc <__aeabi_dmul+0x1dc>
   d9a20:	442c      	add	r4, r5
   d9a22:	ea81 0603 	eor.w	r6, r1, r3
   d9a26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9a2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9a2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9a32:	bf18      	it	ne
   d9a34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a40:	d038      	beq.n	d9ab4 <__aeabi_dmul+0xb4>
   d9a42:	fba0 ce02 	umull	ip, lr, r0, r2
   d9a46:	f04f 0500 	mov.w	r5, #0
   d9a4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9a4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9a52:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9a56:	f04f 0600 	mov.w	r6, #0
   d9a5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9a5e:	f09c 0f00 	teq	ip, #0
   d9a62:	bf18      	it	ne
   d9a64:	f04e 0e01 	orrne.w	lr, lr, #1
   d9a68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9a6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9a70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9a74:	d204      	bcs.n	d9a80 <__aeabi_dmul+0x80>
   d9a76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9a7a:	416d      	adcs	r5, r5
   d9a7c:	eb46 0606 	adc.w	r6, r6, r6
   d9a80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9a84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9a88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9a8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9a90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9a94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9a98:	bf88      	it	hi
   d9a9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9a9e:	d81e      	bhi.n	d9ade <__aeabi_dmul+0xde>
   d9aa0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9aa4:	bf08      	it	eq
   d9aa6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9aaa:	f150 0000 	adcs.w	r0, r0, #0
   d9aae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9ab2:	bd70      	pop	{r4, r5, r6, pc}
   d9ab4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9ab8:	ea46 0101 	orr.w	r1, r6, r1
   d9abc:	ea40 0002 	orr.w	r0, r0, r2
   d9ac0:	ea81 0103 	eor.w	r1, r1, r3
   d9ac4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9ac8:	bfc2      	ittt	gt
   d9aca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9ace:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9ad2:	bd70      	popgt	{r4, r5, r6, pc}
   d9ad4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ad8:	f04f 0e00 	mov.w	lr, #0
   d9adc:	3c01      	subs	r4, #1
   d9ade:	f300 80ab 	bgt.w	d9c38 <__aeabi_dmul+0x238>
   d9ae2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9ae6:	bfde      	ittt	le
   d9ae8:	2000      	movle	r0, #0
   d9aea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9aee:	bd70      	pople	{r4, r5, r6, pc}
   d9af0:	f1c4 0400 	rsb	r4, r4, #0
   d9af4:	3c20      	subs	r4, #32
   d9af6:	da35      	bge.n	d9b64 <__aeabi_dmul+0x164>
   d9af8:	340c      	adds	r4, #12
   d9afa:	dc1b      	bgt.n	d9b34 <__aeabi_dmul+0x134>
   d9afc:	f104 0414 	add.w	r4, r4, #20
   d9b00:	f1c4 0520 	rsb	r5, r4, #32
   d9b04:	fa00 f305 	lsl.w	r3, r0, r5
   d9b08:	fa20 f004 	lsr.w	r0, r0, r4
   d9b0c:	fa01 f205 	lsl.w	r2, r1, r5
   d9b10:	ea40 0002 	orr.w	r0, r0, r2
   d9b14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9b18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b20:	fa21 f604 	lsr.w	r6, r1, r4
   d9b24:	eb42 0106 	adc.w	r1, r2, r6
   d9b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b2c:	bf08      	it	eq
   d9b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b32:	bd70      	pop	{r4, r5, r6, pc}
   d9b34:	f1c4 040c 	rsb	r4, r4, #12
   d9b38:	f1c4 0520 	rsb	r5, r4, #32
   d9b3c:	fa00 f304 	lsl.w	r3, r0, r4
   d9b40:	fa20 f005 	lsr.w	r0, r0, r5
   d9b44:	fa01 f204 	lsl.w	r2, r1, r4
   d9b48:	ea40 0002 	orr.w	r0, r0, r2
   d9b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b54:	f141 0100 	adc.w	r1, r1, #0
   d9b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b5c:	bf08      	it	eq
   d9b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b62:	bd70      	pop	{r4, r5, r6, pc}
   d9b64:	f1c4 0520 	rsb	r5, r4, #32
   d9b68:	fa00 f205 	lsl.w	r2, r0, r5
   d9b6c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9b70:	fa20 f304 	lsr.w	r3, r0, r4
   d9b74:	fa01 f205 	lsl.w	r2, r1, r5
   d9b78:	ea43 0302 	orr.w	r3, r3, r2
   d9b7c:	fa21 f004 	lsr.w	r0, r1, r4
   d9b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b84:	fa21 f204 	lsr.w	r2, r1, r4
   d9b88:	ea20 0002 	bic.w	r0, r0, r2
   d9b8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9b90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b94:	bf08      	it	eq
   d9b96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b9a:	bd70      	pop	{r4, r5, r6, pc}
   d9b9c:	f094 0f00 	teq	r4, #0
   d9ba0:	d10f      	bne.n	d9bc2 <__aeabi_dmul+0x1c2>
   d9ba2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9ba6:	0040      	lsls	r0, r0, #1
   d9ba8:	eb41 0101 	adc.w	r1, r1, r1
   d9bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9bb0:	bf08      	it	eq
   d9bb2:	3c01      	subeq	r4, #1
   d9bb4:	d0f7      	beq.n	d9ba6 <__aeabi_dmul+0x1a6>
   d9bb6:	ea41 0106 	orr.w	r1, r1, r6
   d9bba:	f095 0f00 	teq	r5, #0
   d9bbe:	bf18      	it	ne
   d9bc0:	4770      	bxne	lr
   d9bc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9bc6:	0052      	lsls	r2, r2, #1
   d9bc8:	eb43 0303 	adc.w	r3, r3, r3
   d9bcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9bd0:	bf08      	it	eq
   d9bd2:	3d01      	subeq	r5, #1
   d9bd4:	d0f7      	beq.n	d9bc6 <__aeabi_dmul+0x1c6>
   d9bd6:	ea43 0306 	orr.w	r3, r3, r6
   d9bda:	4770      	bx	lr
   d9bdc:	ea94 0f0c 	teq	r4, ip
   d9be0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9be4:	bf18      	it	ne
   d9be6:	ea95 0f0c 	teqne	r5, ip
   d9bea:	d00c      	beq.n	d9c06 <__aeabi_dmul+0x206>
   d9bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9bf0:	bf18      	it	ne
   d9bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9bf6:	d1d1      	bne.n	d9b9c <__aeabi_dmul+0x19c>
   d9bf8:	ea81 0103 	eor.w	r1, r1, r3
   d9bfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c00:	f04f 0000 	mov.w	r0, #0
   d9c04:	bd70      	pop	{r4, r5, r6, pc}
   d9c06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9c0a:	bf06      	itte	eq
   d9c0c:	4610      	moveq	r0, r2
   d9c0e:	4619      	moveq	r1, r3
   d9c10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9c14:	d019      	beq.n	d9c4a <__aeabi_dmul+0x24a>
   d9c16:	ea94 0f0c 	teq	r4, ip
   d9c1a:	d102      	bne.n	d9c22 <__aeabi_dmul+0x222>
   d9c1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9c20:	d113      	bne.n	d9c4a <__aeabi_dmul+0x24a>
   d9c22:	ea95 0f0c 	teq	r5, ip
   d9c26:	d105      	bne.n	d9c34 <__aeabi_dmul+0x234>
   d9c28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9c2c:	bf1c      	itt	ne
   d9c2e:	4610      	movne	r0, r2
   d9c30:	4619      	movne	r1, r3
   d9c32:	d10a      	bne.n	d9c4a <__aeabi_dmul+0x24a>
   d9c34:	ea81 0103 	eor.w	r1, r1, r3
   d9c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c44:	f04f 0000 	mov.w	r0, #0
   d9c48:	bd70      	pop	{r4, r5, r6, pc}
   d9c4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9c52:	bd70      	pop	{r4, r5, r6, pc}

000d9c54 <__aeabi_ddiv>:
   d9c54:	b570      	push	{r4, r5, r6, lr}
   d9c56:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9c5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9c5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9c62:	bf1d      	ittte	ne
   d9c64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9c68:	ea94 0f0c 	teqne	r4, ip
   d9c6c:	ea95 0f0c 	teqne	r5, ip
   d9c70:	f000 f8a7 	bleq	d9dc2 <__aeabi_ddiv+0x16e>
   d9c74:	eba4 0405 	sub.w	r4, r4, r5
   d9c78:	ea81 0e03 	eor.w	lr, r1, r3
   d9c7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9c80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9c84:	f000 8088 	beq.w	d9d98 <__aeabi_ddiv+0x144>
   d9c88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9c8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9c90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9c94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9c98:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9c9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9ca0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9ca4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9ca8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9cac:	429d      	cmp	r5, r3
   d9cae:	bf08      	it	eq
   d9cb0:	4296      	cmpeq	r6, r2
   d9cb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9cb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9cba:	d202      	bcs.n	d9cc2 <__aeabi_ddiv+0x6e>
   d9cbc:	085b      	lsrs	r3, r3, #1
   d9cbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cc2:	1ab6      	subs	r6, r6, r2
   d9cc4:	eb65 0503 	sbc.w	r5, r5, r3
   d9cc8:	085b      	lsrs	r3, r3, #1
   d9cca:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9cd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9cde:	bf22      	ittt	cs
   d9ce0:	1ab6      	subcs	r6, r6, r2
   d9ce2:	4675      	movcs	r5, lr
   d9ce4:	ea40 000c 	orrcs.w	r0, r0, ip
   d9ce8:	085b      	lsrs	r3, r3, #1
   d9cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cee:	ebb6 0e02 	subs.w	lr, r6, r2
   d9cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9cf6:	bf22      	ittt	cs
   d9cf8:	1ab6      	subcs	r6, r6, r2
   d9cfa:	4675      	movcs	r5, lr
   d9cfc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9d00:	085b      	lsrs	r3, r3, #1
   d9d02:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d06:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d0e:	bf22      	ittt	cs
   d9d10:	1ab6      	subcs	r6, r6, r2
   d9d12:	4675      	movcs	r5, lr
   d9d14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9d18:	085b      	lsrs	r3, r3, #1
   d9d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d26:	bf22      	ittt	cs
   d9d28:	1ab6      	subcs	r6, r6, r2
   d9d2a:	4675      	movcs	r5, lr
   d9d2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9d30:	ea55 0e06 	orrs.w	lr, r5, r6
   d9d34:	d018      	beq.n	d9d68 <__aeabi_ddiv+0x114>
   d9d36:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9d3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9d3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9d42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9d46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9d4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9d4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9d52:	d1c0      	bne.n	d9cd6 <__aeabi_ddiv+0x82>
   d9d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d58:	d10b      	bne.n	d9d72 <__aeabi_ddiv+0x11e>
   d9d5a:	ea41 0100 	orr.w	r1, r1, r0
   d9d5e:	f04f 0000 	mov.w	r0, #0
   d9d62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9d66:	e7b6      	b.n	d9cd6 <__aeabi_ddiv+0x82>
   d9d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d6c:	bf04      	itt	eq
   d9d6e:	4301      	orreq	r1, r0
   d9d70:	2000      	moveq	r0, #0
   d9d72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9d76:	bf88      	it	hi
   d9d78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9d7c:	f63f aeaf 	bhi.w	d9ade <__aeabi_dmul+0xde>
   d9d80:	ebb5 0c03 	subs.w	ip, r5, r3
   d9d84:	bf04      	itt	eq
   d9d86:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9d8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9d8e:	f150 0000 	adcs.w	r0, r0, #0
   d9d92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9d96:	bd70      	pop	{r4, r5, r6, pc}
   d9d98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9d9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9da0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9da4:	bfc2      	ittt	gt
   d9da6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9daa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9dae:	bd70      	popgt	{r4, r5, r6, pc}
   d9db0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9db4:	f04f 0e00 	mov.w	lr, #0
   d9db8:	3c01      	subs	r4, #1
   d9dba:	e690      	b.n	d9ade <__aeabi_dmul+0xde>
   d9dbc:	ea45 0e06 	orr.w	lr, r5, r6
   d9dc0:	e68d      	b.n	d9ade <__aeabi_dmul+0xde>
   d9dc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9dc6:	ea94 0f0c 	teq	r4, ip
   d9dca:	bf08      	it	eq
   d9dcc:	ea95 0f0c 	teqeq	r5, ip
   d9dd0:	f43f af3b 	beq.w	d9c4a <__aeabi_dmul+0x24a>
   d9dd4:	ea94 0f0c 	teq	r4, ip
   d9dd8:	d10a      	bne.n	d9df0 <__aeabi_ddiv+0x19c>
   d9dda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9dde:	f47f af34 	bne.w	d9c4a <__aeabi_dmul+0x24a>
   d9de2:	ea95 0f0c 	teq	r5, ip
   d9de6:	f47f af25 	bne.w	d9c34 <__aeabi_dmul+0x234>
   d9dea:	4610      	mov	r0, r2
   d9dec:	4619      	mov	r1, r3
   d9dee:	e72c      	b.n	d9c4a <__aeabi_dmul+0x24a>
   d9df0:	ea95 0f0c 	teq	r5, ip
   d9df4:	d106      	bne.n	d9e04 <__aeabi_ddiv+0x1b0>
   d9df6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9dfa:	f43f aefd 	beq.w	d9bf8 <__aeabi_dmul+0x1f8>
   d9dfe:	4610      	mov	r0, r2
   d9e00:	4619      	mov	r1, r3
   d9e02:	e722      	b.n	d9c4a <__aeabi_dmul+0x24a>
   d9e04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9e08:	bf18      	it	ne
   d9e0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9e0e:	f47f aec5 	bne.w	d9b9c <__aeabi_dmul+0x19c>
   d9e12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9e16:	f47f af0d 	bne.w	d9c34 <__aeabi_dmul+0x234>
   d9e1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9e1e:	f47f aeeb 	bne.w	d9bf8 <__aeabi_dmul+0x1f8>
   d9e22:	e712      	b.n	d9c4a <__aeabi_dmul+0x24a>

000d9e24 <__gedf2>:
   d9e24:	f04f 3cff 	mov.w	ip, #4294967295
   d9e28:	e006      	b.n	d9e38 <__cmpdf2+0x4>
   d9e2a:	bf00      	nop

000d9e2c <__ledf2>:
   d9e2c:	f04f 0c01 	mov.w	ip, #1
   d9e30:	e002      	b.n	d9e38 <__cmpdf2+0x4>
   d9e32:	bf00      	nop

000d9e34 <__cmpdf2>:
   d9e34:	f04f 0c01 	mov.w	ip, #1
   d9e38:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9e3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e48:	bf18      	it	ne
   d9e4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9e4e:	d01b      	beq.n	d9e88 <__cmpdf2+0x54>
   d9e50:	b001      	add	sp, #4
   d9e52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9e56:	bf0c      	ite	eq
   d9e58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9e5c:	ea91 0f03 	teqne	r1, r3
   d9e60:	bf02      	ittt	eq
   d9e62:	ea90 0f02 	teqeq	r0, r2
   d9e66:	2000      	moveq	r0, #0
   d9e68:	4770      	bxeq	lr
   d9e6a:	f110 0f00 	cmn.w	r0, #0
   d9e6e:	ea91 0f03 	teq	r1, r3
   d9e72:	bf58      	it	pl
   d9e74:	4299      	cmppl	r1, r3
   d9e76:	bf08      	it	eq
   d9e78:	4290      	cmpeq	r0, r2
   d9e7a:	bf2c      	ite	cs
   d9e7c:	17d8      	asrcs	r0, r3, #31
   d9e7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9e82:	f040 0001 	orr.w	r0, r0, #1
   d9e86:	4770      	bx	lr
   d9e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e90:	d102      	bne.n	d9e98 <__cmpdf2+0x64>
   d9e92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9e96:	d107      	bne.n	d9ea8 <__cmpdf2+0x74>
   d9e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9ea0:	d1d6      	bne.n	d9e50 <__cmpdf2+0x1c>
   d9ea2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9ea6:	d0d3      	beq.n	d9e50 <__cmpdf2+0x1c>
   d9ea8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9eac:	4770      	bx	lr
   d9eae:	bf00      	nop

000d9eb0 <__aeabi_cdrcmple>:
   d9eb0:	4684      	mov	ip, r0
   d9eb2:	4610      	mov	r0, r2
   d9eb4:	4662      	mov	r2, ip
   d9eb6:	468c      	mov	ip, r1
   d9eb8:	4619      	mov	r1, r3
   d9eba:	4663      	mov	r3, ip
   d9ebc:	e000      	b.n	d9ec0 <__aeabi_cdcmpeq>
   d9ebe:	bf00      	nop

000d9ec0 <__aeabi_cdcmpeq>:
   d9ec0:	b501      	push	{r0, lr}
   d9ec2:	f7ff ffb7 	bl	d9e34 <__cmpdf2>
   d9ec6:	2800      	cmp	r0, #0
   d9ec8:	bf48      	it	mi
   d9eca:	f110 0f00 	cmnmi.w	r0, #0
   d9ece:	bd01      	pop	{r0, pc}

000d9ed0 <__aeabi_dcmpeq>:
   d9ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ed4:	f7ff fff4 	bl	d9ec0 <__aeabi_cdcmpeq>
   d9ed8:	bf0c      	ite	eq
   d9eda:	2001      	moveq	r0, #1
   d9edc:	2000      	movne	r0, #0
   d9ede:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ee2:	bf00      	nop

000d9ee4 <__aeabi_dcmplt>:
   d9ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ee8:	f7ff ffea 	bl	d9ec0 <__aeabi_cdcmpeq>
   d9eec:	bf34      	ite	cc
   d9eee:	2001      	movcc	r0, #1
   d9ef0:	2000      	movcs	r0, #0
   d9ef2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ef6:	bf00      	nop

000d9ef8 <__aeabi_dcmple>:
   d9ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9efc:	f7ff ffe0 	bl	d9ec0 <__aeabi_cdcmpeq>
   d9f00:	bf94      	ite	ls
   d9f02:	2001      	movls	r0, #1
   d9f04:	2000      	movhi	r0, #0
   d9f06:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f0a:	bf00      	nop

000d9f0c <__aeabi_dcmpge>:
   d9f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f10:	f7ff ffce 	bl	d9eb0 <__aeabi_cdrcmple>
   d9f14:	bf94      	ite	ls
   d9f16:	2001      	movls	r0, #1
   d9f18:	2000      	movhi	r0, #0
   d9f1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f1e:	bf00      	nop

000d9f20 <__aeabi_dcmpgt>:
   d9f20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f24:	f7ff ffc4 	bl	d9eb0 <__aeabi_cdrcmple>
   d9f28:	bf34      	ite	cc
   d9f2a:	2001      	movcc	r0, #1
   d9f2c:	2000      	movcs	r0, #0
   d9f2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f32:	bf00      	nop

000d9f34 <__aeabi_d2iz>:
   d9f34:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9f38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9f3c:	d215      	bcs.n	d9f6a <__aeabi_d2iz+0x36>
   d9f3e:	d511      	bpl.n	d9f64 <__aeabi_d2iz+0x30>
   d9f40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9f44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9f48:	d912      	bls.n	d9f70 <__aeabi_d2iz+0x3c>
   d9f4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9f52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9f56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9f5a:	fa23 f002 	lsr.w	r0, r3, r2
   d9f5e:	bf18      	it	ne
   d9f60:	4240      	negne	r0, r0
   d9f62:	4770      	bx	lr
   d9f64:	f04f 0000 	mov.w	r0, #0
   d9f68:	4770      	bx	lr
   d9f6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9f6e:	d105      	bne.n	d9f7c <__aeabi_d2iz+0x48>
   d9f70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9f74:	bf08      	it	eq
   d9f76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9f7a:	4770      	bx	lr
   d9f7c:	f04f 0000 	mov.w	r0, #0
   d9f80:	4770      	bx	lr
   d9f82:	bf00      	nop

000d9f84 <__aeabi_d2uiz>:
   d9f84:	004a      	lsls	r2, r1, #1
   d9f86:	d211      	bcs.n	d9fac <__aeabi_d2uiz+0x28>
   d9f88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9f8c:	d211      	bcs.n	d9fb2 <__aeabi_d2uiz+0x2e>
   d9f8e:	d50d      	bpl.n	d9fac <__aeabi_d2uiz+0x28>
   d9f90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9f94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9f98:	d40e      	bmi.n	d9fb8 <__aeabi_d2uiz+0x34>
   d9f9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9fa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9fa6:	fa23 f002 	lsr.w	r0, r3, r2
   d9faa:	4770      	bx	lr
   d9fac:	f04f 0000 	mov.w	r0, #0
   d9fb0:	4770      	bx	lr
   d9fb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9fb6:	d102      	bne.n	d9fbe <__aeabi_d2uiz+0x3a>
   d9fb8:	f04f 30ff 	mov.w	r0, #4294967295
   d9fbc:	4770      	bx	lr
   d9fbe:	f04f 0000 	mov.w	r0, #0
   d9fc2:	4770      	bx	lr

000d9fc4 <__aeabi_d2f>:
   d9fc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9fc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9fcc:	bf24      	itt	cs
   d9fce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9fd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9fd6:	d90d      	bls.n	d9ff4 <__aeabi_d2f+0x30>
   d9fd8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9fdc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9fe0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9fe4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9fe8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9fec:	bf08      	it	eq
   d9fee:	f020 0001 	biceq.w	r0, r0, #1
   d9ff2:	4770      	bx	lr
   d9ff4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9ff8:	d121      	bne.n	da03e <__aeabi_d2f+0x7a>
   d9ffa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9ffe:	bfbc      	itt	lt
   da000:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da004:	4770      	bxlt	lr
   da006:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da00a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da00e:	f1c2 0218 	rsb	r2, r2, #24
   da012:	f1c2 0c20 	rsb	ip, r2, #32
   da016:	fa10 f30c 	lsls.w	r3, r0, ip
   da01a:	fa20 f002 	lsr.w	r0, r0, r2
   da01e:	bf18      	it	ne
   da020:	f040 0001 	orrne.w	r0, r0, #1
   da024:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da028:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da02c:	fa03 fc0c 	lsl.w	ip, r3, ip
   da030:	ea40 000c 	orr.w	r0, r0, ip
   da034:	fa23 f302 	lsr.w	r3, r3, r2
   da038:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da03c:	e7cc      	b.n	d9fd8 <__aeabi_d2f+0x14>
   da03e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da042:	d107      	bne.n	da054 <__aeabi_d2f+0x90>
   da044:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da048:	bf1e      	ittt	ne
   da04a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da04e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da052:	4770      	bxne	lr
   da054:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da058:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da05c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da060:	4770      	bx	lr
   da062:	bf00      	nop

000da064 <asctime>:
   da064:	4b09      	ldr	r3, [pc, #36]	; (da08c <asctime+0x28>)
   da066:	b570      	push	{r4, r5, r6, lr}
   da068:	681c      	ldr	r4, [r3, #0]
   da06a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   da06c:	4606      	mov	r6, r0
   da06e:	b93d      	cbnz	r5, da080 <asctime+0x1c>
   da070:	201a      	movs	r0, #26
   da072:	f7fc fc45 	bl	d6900 <malloc>
   da076:	221a      	movs	r2, #26
   da078:	6420      	str	r0, [r4, #64]	; 0x40
   da07a:	4629      	mov	r1, r5
   da07c:	f000 f95c 	bl	da338 <memset>
   da080:	6c21      	ldr	r1, [r4, #64]	; 0x40
   da082:	4630      	mov	r0, r6
   da084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da088:	f000 b802 	b.w	da090 <asctime_r>
   da08c:	2003d748 	.word	0x2003d748

000da090 <asctime_r>:
   da090:	b510      	push	{r4, lr}
   da092:	460c      	mov	r4, r1
   da094:	6941      	ldr	r1, [r0, #20]
   da096:	6903      	ldr	r3, [r0, #16]
   da098:	6982      	ldr	r2, [r0, #24]
   da09a:	b086      	sub	sp, #24
   da09c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da0a0:	9104      	str	r1, [sp, #16]
   da0a2:	6801      	ldr	r1, [r0, #0]
   da0a4:	9103      	str	r1, [sp, #12]
   da0a6:	6841      	ldr	r1, [r0, #4]
   da0a8:	9102      	str	r1, [sp, #8]
   da0aa:	6881      	ldr	r1, [r0, #8]
   da0ac:	9101      	str	r1, [sp, #4]
   da0ae:	68c1      	ldr	r1, [r0, #12]
   da0b0:	9100      	str	r1, [sp, #0]
   da0b2:	4907      	ldr	r1, [pc, #28]	; (da0d0 <asctime_r+0x40>)
   da0b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da0b8:	440b      	add	r3, r1
   da0ba:	4906      	ldr	r1, [pc, #24]	; (da0d4 <asctime_r+0x44>)
   da0bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   da0c0:	440a      	add	r2, r1
   da0c2:	4620      	mov	r0, r4
   da0c4:	4904      	ldr	r1, [pc, #16]	; (da0d8 <asctime_r+0x48>)
   da0c6:	f7fc fc3b 	bl	d6940 <siprintf>
   da0ca:	4620      	mov	r0, r4
   da0cc:	b006      	add	sp, #24
   da0ce:	bd10      	pop	{r4, pc}
   da0d0:	000ddeea 	.word	0x000ddeea
   da0d4:	000dded5 	.word	0x000dded5
   da0d8:	000ddf0e 	.word	0x000ddf0e

000da0dc <__cxa_atexit>:
   da0dc:	b510      	push	{r4, lr}
   da0de:	4c05      	ldr	r4, [pc, #20]	; (da0f4 <__cxa_atexit+0x18>)
   da0e0:	4613      	mov	r3, r2
   da0e2:	b12c      	cbz	r4, da0f0 <__cxa_atexit+0x14>
   da0e4:	460a      	mov	r2, r1
   da0e6:	4601      	mov	r1, r0
   da0e8:	2002      	movs	r0, #2
   da0ea:	f3af 8000 	nop.w
   da0ee:	bd10      	pop	{r4, pc}
   da0f0:	4620      	mov	r0, r4
   da0f2:	bd10      	pop	{r4, pc}
   da0f4:	00000000 	.word	0x00000000

000da0f8 <isspace>:
   da0f8:	4b03      	ldr	r3, [pc, #12]	; (da108 <isspace+0x10>)
   da0fa:	681b      	ldr	r3, [r3, #0]
   da0fc:	4418      	add	r0, r3
   da0fe:	7840      	ldrb	r0, [r0, #1]
   da100:	f000 0008 	and.w	r0, r0, #8
   da104:	4770      	bx	lr
   da106:	bf00      	nop
   da108:	2003d6e4 	.word	0x2003d6e4

000da10c <localtime>:
   da10c:	b538      	push	{r3, r4, r5, lr}
   da10e:	4b07      	ldr	r3, [pc, #28]	; (da12c <localtime+0x20>)
   da110:	681c      	ldr	r4, [r3, #0]
   da112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da114:	4605      	mov	r5, r0
   da116:	b91b      	cbnz	r3, da120 <localtime+0x14>
   da118:	2024      	movs	r0, #36	; 0x24
   da11a:	f7fc fbf1 	bl	d6900 <malloc>
   da11e:	63e0      	str	r0, [r4, #60]	; 0x3c
   da120:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da122:	4628      	mov	r0, r5
   da124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da128:	f000 b802 	b.w	da130 <localtime_r>
   da12c:	2003d748 	.word	0x2003d748

000da130 <localtime_r>:
   da130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da134:	460c      	mov	r4, r1
   da136:	4680      	mov	r8, r0
   da138:	f002 fb98 	bl	dc86c <__gettzinfo>
   da13c:	4621      	mov	r1, r4
   da13e:	4607      	mov	r7, r0
   da140:	4640      	mov	r0, r8
   da142:	f002 fb97 	bl	dc874 <gmtime_r>
   da146:	6946      	ldr	r6, [r0, #20]
   da148:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   da14c:	07b3      	lsls	r3, r6, #30
   da14e:	4604      	mov	r4, r0
   da150:	d105      	bne.n	da15e <localtime_r+0x2e>
   da152:	2264      	movs	r2, #100	; 0x64
   da154:	fb96 f3f2 	sdiv	r3, r6, r2
   da158:	fb02 6313 	mls	r3, r2, r3, r6
   da15c:	b94b      	cbnz	r3, da172 <localtime_r+0x42>
   da15e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da162:	fb96 f3f5 	sdiv	r3, r6, r5
   da166:	fb05 6513 	mls	r5, r5, r3, r6
   da16a:	fab5 f385 	clz	r3, r5
   da16e:	095b      	lsrs	r3, r3, #5
   da170:	e000      	b.n	da174 <localtime_r+0x44>
   da172:	2301      	movs	r3, #1
   da174:	4a5f      	ldr	r2, [pc, #380]	; (da2f4 <localtime_r+0x1c4>)
   da176:	2530      	movs	r5, #48	; 0x30
   da178:	fb05 2503 	mla	r5, r5, r3, r2
   da17c:	f001 fe88 	bl	dbe90 <__tz_lock>
   da180:	f001 fe88 	bl	dbe94 <_tzset_unlocked>
   da184:	4b5c      	ldr	r3, [pc, #368]	; (da2f8 <localtime_r+0x1c8>)
   da186:	681b      	ldr	r3, [r3, #0]
   da188:	b1f3      	cbz	r3, da1c8 <localtime_r+0x98>
   da18a:	687b      	ldr	r3, [r7, #4]
   da18c:	429e      	cmp	r6, r3
   da18e:	d105      	bne.n	da19c <localtime_r+0x6c>
   da190:	6839      	ldr	r1, [r7, #0]
   da192:	f8d8 3000 	ldr.w	r3, [r8]
   da196:	69fa      	ldr	r2, [r7, #28]
   da198:	b941      	cbnz	r1, da1ac <localtime_r+0x7c>
   da19a:	e00a      	b.n	da1b2 <localtime_r+0x82>
   da19c:	4630      	mov	r0, r6
   da19e:	f001 fdcf 	bl	dbd40 <__tzcalc_limits>
   da1a2:	2800      	cmp	r0, #0
   da1a4:	d1f4      	bne.n	da190 <localtime_r+0x60>
   da1a6:	f04f 33ff 	mov.w	r3, #4294967295
   da1aa:	e00d      	b.n	da1c8 <localtime_r+0x98>
   da1ac:	4293      	cmp	r3, r2
   da1ae:	db08      	blt.n	da1c2 <localtime_r+0x92>
   da1b0:	e001      	b.n	da1b6 <localtime_r+0x86>
   da1b2:	4293      	cmp	r3, r2
   da1b4:	da07      	bge.n	da1c6 <localtime_r+0x96>
   da1b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   da1b8:	4293      	cmp	r3, r2
   da1ba:	bfac      	ite	ge
   da1bc:	2300      	movge	r3, #0
   da1be:	2301      	movlt	r3, #1
   da1c0:	e002      	b.n	da1c8 <localtime_r+0x98>
   da1c2:	2300      	movs	r3, #0
   da1c4:	e000      	b.n	da1c8 <localtime_r+0x98>
   da1c6:	2301      	movs	r3, #1
   da1c8:	6223      	str	r3, [r4, #32]
   da1ca:	6a23      	ldr	r3, [r4, #32]
   da1cc:	2b01      	cmp	r3, #1
   da1ce:	bf0c      	ite	eq
   da1d0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   da1d2:	6a39      	ldrne	r1, [r7, #32]
   da1d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da1d8:	203c      	movs	r0, #60	; 0x3c
   da1da:	fb91 f6f3 	sdiv	r6, r1, r3
   da1de:	fb03 1316 	mls	r3, r3, r6, r1
   da1e2:	6861      	ldr	r1, [r4, #4]
   da1e4:	fb93 f2f0 	sdiv	r2, r3, r0
   da1e8:	fb00 3012 	mls	r0, r0, r2, r3
   da1ec:	6823      	ldr	r3, [r4, #0]
   da1ee:	1a89      	subs	r1, r1, r2
   da1f0:	68a2      	ldr	r2, [r4, #8]
   da1f2:	6061      	str	r1, [r4, #4]
   da1f4:	1a1b      	subs	r3, r3, r0
   da1f6:	1b92      	subs	r2, r2, r6
   da1f8:	2b3b      	cmp	r3, #59	; 0x3b
   da1fa:	6023      	str	r3, [r4, #0]
   da1fc:	60a2      	str	r2, [r4, #8]
   da1fe:	dd03      	ble.n	da208 <localtime_r+0xd8>
   da200:	3101      	adds	r1, #1
   da202:	6061      	str	r1, [r4, #4]
   da204:	3b3c      	subs	r3, #60	; 0x3c
   da206:	e004      	b.n	da212 <localtime_r+0xe2>
   da208:	2b00      	cmp	r3, #0
   da20a:	da03      	bge.n	da214 <localtime_r+0xe4>
   da20c:	3901      	subs	r1, #1
   da20e:	6061      	str	r1, [r4, #4]
   da210:	333c      	adds	r3, #60	; 0x3c
   da212:	6023      	str	r3, [r4, #0]
   da214:	6863      	ldr	r3, [r4, #4]
   da216:	2b3b      	cmp	r3, #59	; 0x3b
   da218:	dd03      	ble.n	da222 <localtime_r+0xf2>
   da21a:	3201      	adds	r2, #1
   da21c:	60a2      	str	r2, [r4, #8]
   da21e:	3b3c      	subs	r3, #60	; 0x3c
   da220:	e004      	b.n	da22c <localtime_r+0xfc>
   da222:	2b00      	cmp	r3, #0
   da224:	da03      	bge.n	da22e <localtime_r+0xfe>
   da226:	3a01      	subs	r2, #1
   da228:	60a2      	str	r2, [r4, #8]
   da22a:	333c      	adds	r3, #60	; 0x3c
   da22c:	6063      	str	r3, [r4, #4]
   da22e:	68a3      	ldr	r3, [r4, #8]
   da230:	2b17      	cmp	r3, #23
   da232:	dd22      	ble.n	da27a <localtime_r+0x14a>
   da234:	69e2      	ldr	r2, [r4, #28]
   da236:	3201      	adds	r2, #1
   da238:	61e2      	str	r2, [r4, #28]
   da23a:	69a2      	ldr	r2, [r4, #24]
   da23c:	3201      	adds	r2, #1
   da23e:	2a06      	cmp	r2, #6
   da240:	bfc8      	it	gt
   da242:	2200      	movgt	r2, #0
   da244:	61a2      	str	r2, [r4, #24]
   da246:	68e2      	ldr	r2, [r4, #12]
   da248:	3b18      	subs	r3, #24
   da24a:	3201      	adds	r2, #1
   da24c:	60a3      	str	r3, [r4, #8]
   da24e:	6923      	ldr	r3, [r4, #16]
   da250:	60e2      	str	r2, [r4, #12]
   da252:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   da256:	428a      	cmp	r2, r1
   da258:	dd46      	ble.n	da2e8 <localtime_r+0x1b8>
   da25a:	3301      	adds	r3, #1
   da25c:	2b0c      	cmp	r3, #12
   da25e:	bf0c      	ite	eq
   da260:	6963      	ldreq	r3, [r4, #20]
   da262:	6123      	strne	r3, [r4, #16]
   da264:	eba2 0201 	sub.w	r2, r2, r1
   da268:	60e2      	str	r2, [r4, #12]
   da26a:	bf01      	itttt	eq
   da26c:	3301      	addeq	r3, #1
   da26e:	2200      	moveq	r2, #0
   da270:	6122      	streq	r2, [r4, #16]
   da272:	6163      	streq	r3, [r4, #20]
   da274:	bf08      	it	eq
   da276:	61e2      	streq	r2, [r4, #28]
   da278:	e036      	b.n	da2e8 <localtime_r+0x1b8>
   da27a:	2b00      	cmp	r3, #0
   da27c:	da34      	bge.n	da2e8 <localtime_r+0x1b8>
   da27e:	69e2      	ldr	r2, [r4, #28]
   da280:	3a01      	subs	r2, #1
   da282:	61e2      	str	r2, [r4, #28]
   da284:	69a2      	ldr	r2, [r4, #24]
   da286:	3a01      	subs	r2, #1
   da288:	bf48      	it	mi
   da28a:	2206      	movmi	r2, #6
   da28c:	61a2      	str	r2, [r4, #24]
   da28e:	68e2      	ldr	r2, [r4, #12]
   da290:	3318      	adds	r3, #24
   da292:	3a01      	subs	r2, #1
   da294:	60e2      	str	r2, [r4, #12]
   da296:	60a3      	str	r3, [r4, #8]
   da298:	bb32      	cbnz	r2, da2e8 <localtime_r+0x1b8>
   da29a:	6923      	ldr	r3, [r4, #16]
   da29c:	3b01      	subs	r3, #1
   da29e:	d401      	bmi.n	da2a4 <localtime_r+0x174>
   da2a0:	6123      	str	r3, [r4, #16]
   da2a2:	e01d      	b.n	da2e0 <localtime_r+0x1b0>
   da2a4:	230b      	movs	r3, #11
   da2a6:	6123      	str	r3, [r4, #16]
   da2a8:	6963      	ldr	r3, [r4, #20]
   da2aa:	1e5a      	subs	r2, r3, #1
   da2ac:	f012 0f03 	tst.w	r2, #3
   da2b0:	6162      	str	r2, [r4, #20]
   da2b2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   da2b6:	d105      	bne.n	da2c4 <localtime_r+0x194>
   da2b8:	2164      	movs	r1, #100	; 0x64
   da2ba:	fb93 f2f1 	sdiv	r2, r3, r1
   da2be:	fb01 3212 	mls	r2, r1, r2, r3
   da2c2:	b94a      	cbnz	r2, da2d8 <localtime_r+0x1a8>
   da2c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da2c8:	fb93 f2f1 	sdiv	r2, r3, r1
   da2cc:	fb01 3312 	mls	r3, r1, r2, r3
   da2d0:	fab3 f383 	clz	r3, r3
   da2d4:	095b      	lsrs	r3, r3, #5
   da2d6:	e000      	b.n	da2da <localtime_r+0x1aa>
   da2d8:	2301      	movs	r3, #1
   da2da:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   da2de:	61e3      	str	r3, [r4, #28]
   da2e0:	6923      	ldr	r3, [r4, #16]
   da2e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   da2e6:	60e3      	str	r3, [r4, #12]
   da2e8:	f001 fdd3 	bl	dbe92 <__tz_unlock>
   da2ec:	4620      	mov	r0, r4
   da2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da2f2:	bf00      	nop
   da2f4:	000de098 	.word	0x000de098
   da2f8:	2003e7e4 	.word	0x2003e7e4

000da2fc <_localeconv_r>:
   da2fc:	4800      	ldr	r0, [pc, #0]	; (da300 <_localeconv_r+0x4>)
   da2fe:	4770      	bx	lr
   da300:	2003d74c 	.word	0x2003d74c

000da304 <memcmp>:
   da304:	b510      	push	{r4, lr}
   da306:	3901      	subs	r1, #1
   da308:	4402      	add	r2, r0
   da30a:	4290      	cmp	r0, r2
   da30c:	d007      	beq.n	da31e <memcmp+0x1a>
   da30e:	f810 3b01 	ldrb.w	r3, [r0], #1
   da312:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da316:	42a3      	cmp	r3, r4
   da318:	d0f7      	beq.n	da30a <memcmp+0x6>
   da31a:	1b18      	subs	r0, r3, r4
   da31c:	bd10      	pop	{r4, pc}
   da31e:	2000      	movs	r0, #0
   da320:	bd10      	pop	{r4, pc}

000da322 <memcpy>:
   da322:	b510      	push	{r4, lr}
   da324:	1e43      	subs	r3, r0, #1
   da326:	440a      	add	r2, r1
   da328:	4291      	cmp	r1, r2
   da32a:	d004      	beq.n	da336 <memcpy+0x14>
   da32c:	f811 4b01 	ldrb.w	r4, [r1], #1
   da330:	f803 4f01 	strb.w	r4, [r3, #1]!
   da334:	e7f8      	b.n	da328 <memcpy+0x6>
   da336:	bd10      	pop	{r4, pc}

000da338 <memset>:
   da338:	4402      	add	r2, r0
   da33a:	4603      	mov	r3, r0
   da33c:	4293      	cmp	r3, r2
   da33e:	d002      	beq.n	da346 <memset+0xe>
   da340:	f803 1b01 	strb.w	r1, [r3], #1
   da344:	e7fa      	b.n	da33c <memset+0x4>
   da346:	4770      	bx	lr

000da348 <_calloc_r>:
   da348:	b538      	push	{r3, r4, r5, lr}
   da34a:	fb02 f401 	mul.w	r4, r2, r1
   da34e:	4621      	mov	r1, r4
   da350:	f7fc fb26 	bl	d69a0 <_malloc_r>
   da354:	4605      	mov	r5, r0
   da356:	b118      	cbz	r0, da360 <_calloc_r+0x18>
   da358:	4622      	mov	r2, r4
   da35a:	2100      	movs	r1, #0
   da35c:	f7ff ffec 	bl	da338 <memset>
   da360:	4628      	mov	r0, r5
   da362:	bd38      	pop	{r3, r4, r5, pc}

000da364 <srand>:
   da364:	b538      	push	{r3, r4, r5, lr}
   da366:	4b12      	ldr	r3, [pc, #72]	; (da3b0 <srand+0x4c>)
   da368:	681c      	ldr	r4, [r3, #0]
   da36a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da36c:	4605      	mov	r5, r0
   da36e:	b9d3      	cbnz	r3, da3a6 <srand+0x42>
   da370:	2018      	movs	r0, #24
   da372:	f7fc fac5 	bl	d6900 <malloc>
   da376:	f243 330e 	movw	r3, #13070	; 0x330e
   da37a:	63a0      	str	r0, [r4, #56]	; 0x38
   da37c:	8003      	strh	r3, [r0, #0]
   da37e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da382:	8043      	strh	r3, [r0, #2]
   da384:	f241 2334 	movw	r3, #4660	; 0x1234
   da388:	8083      	strh	r3, [r0, #4]
   da38a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da38e:	80c3      	strh	r3, [r0, #6]
   da390:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da394:	8103      	strh	r3, [r0, #8]
   da396:	2305      	movs	r3, #5
   da398:	8143      	strh	r3, [r0, #10]
   da39a:	230b      	movs	r3, #11
   da39c:	8183      	strh	r3, [r0, #12]
   da39e:	2201      	movs	r2, #1
   da3a0:	2300      	movs	r3, #0
   da3a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da3a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da3a8:	2200      	movs	r2, #0
   da3aa:	611d      	str	r5, [r3, #16]
   da3ac:	615a      	str	r2, [r3, #20]
   da3ae:	bd38      	pop	{r3, r4, r5, pc}
   da3b0:	2003d748 	.word	0x2003d748

000da3b4 <strchr>:
   da3b4:	b2c9      	uxtb	r1, r1
   da3b6:	4603      	mov	r3, r0
   da3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   da3bc:	b11a      	cbz	r2, da3c6 <strchr+0x12>
   da3be:	4291      	cmp	r1, r2
   da3c0:	d1f9      	bne.n	da3b6 <strchr+0x2>
   da3c2:	4618      	mov	r0, r3
   da3c4:	4770      	bx	lr
   da3c6:	2900      	cmp	r1, #0
   da3c8:	bf0c      	ite	eq
   da3ca:	4618      	moveq	r0, r3
   da3cc:	2000      	movne	r0, #0
   da3ce:	4770      	bx	lr

000da3d0 <strcmp>:
   da3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   da3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   da3d8:	2a01      	cmp	r2, #1
   da3da:	bf28      	it	cs
   da3dc:	429a      	cmpcs	r2, r3
   da3de:	d0f7      	beq.n	da3d0 <strcmp>
   da3e0:	1ad0      	subs	r0, r2, r3
   da3e2:	4770      	bx	lr

000da3e4 <strcpy>:
   da3e4:	4603      	mov	r3, r0
   da3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   da3ea:	f803 2b01 	strb.w	r2, [r3], #1
   da3ee:	2a00      	cmp	r2, #0
   da3f0:	d1f9      	bne.n	da3e6 <strcpy+0x2>
   da3f2:	4770      	bx	lr

000da3f4 <strdup>:
   da3f4:	4b02      	ldr	r3, [pc, #8]	; (da400 <strdup+0xc>)
   da3f6:	4601      	mov	r1, r0
   da3f8:	6818      	ldr	r0, [r3, #0]
   da3fa:	f000 b803 	b.w	da404 <_strdup_r>
   da3fe:	bf00      	nop
   da400:	2003d748 	.word	0x2003d748

000da404 <_strdup_r>:
   da404:	b570      	push	{r4, r5, r6, lr}
   da406:	4606      	mov	r6, r0
   da408:	4608      	mov	r0, r1
   da40a:	460c      	mov	r4, r1
   da40c:	f000 fd22 	bl	dae54 <strlen>
   da410:	1c45      	adds	r5, r0, #1
   da412:	4629      	mov	r1, r5
   da414:	4630      	mov	r0, r6
   da416:	f7fc fac3 	bl	d69a0 <_malloc_r>
   da41a:	4606      	mov	r6, r0
   da41c:	b118      	cbz	r0, da426 <_strdup_r+0x22>
   da41e:	462a      	mov	r2, r5
   da420:	4621      	mov	r1, r4
   da422:	f7ff ff7e 	bl	da322 <memcpy>
   da426:	4630      	mov	r0, r6
   da428:	bd70      	pop	{r4, r5, r6, pc}

000da42a <iso_year_adjust>:
   da42a:	6941      	ldr	r1, [r0, #20]
   da42c:	078b      	lsls	r3, r1, #30
   da42e:	b510      	push	{r4, lr}
   da430:	d10c      	bne.n	da44c <iso_year_adjust+0x22>
   da432:	2900      	cmp	r1, #0
   da434:	f240 736c 	movw	r3, #1900	; 0x76c
   da438:	bfa8      	it	ge
   da43a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da43e:	440b      	add	r3, r1
   da440:	2464      	movs	r4, #100	; 0x64
   da442:	fb93 f2f4 	sdiv	r2, r3, r4
   da446:	fb04 3312 	mls	r3, r4, r2, r3
   da44a:	b983      	cbnz	r3, da46e <iso_year_adjust+0x44>
   da44c:	2900      	cmp	r1, #0
   da44e:	f240 736c 	movw	r3, #1900	; 0x76c
   da452:	bfa8      	it	ge
   da454:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da458:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da45c:	440b      	add	r3, r1
   da45e:	fb93 f1f2 	sdiv	r1, r3, r2
   da462:	fb02 3311 	mls	r3, r2, r1, r3
   da466:	fab3 f283 	clz	r2, r3
   da46a:	0952      	lsrs	r2, r2, #5
   da46c:	e000      	b.n	da470 <iso_year_adjust+0x46>
   da46e:	2201      	movs	r2, #1
   da470:	6983      	ldr	r3, [r0, #24]
   da472:	69c1      	ldr	r1, [r0, #28]
   da474:	005b      	lsls	r3, r3, #1
   da476:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da47a:	4413      	add	r3, r2
   da47c:	2b21      	cmp	r3, #33	; 0x21
   da47e:	dc0e      	bgt.n	da49e <iso_year_adjust+0x74>
   da480:	2b20      	cmp	r3, #32
   da482:	da2f      	bge.n	da4e4 <iso_year_adjust+0xba>
   da484:	2b0d      	cmp	r3, #13
   da486:	dc02      	bgt.n	da48e <iso_year_adjust+0x64>
   da488:	2b0a      	cmp	r3, #10
   da48a:	db05      	blt.n	da498 <iso_year_adjust+0x6e>
   da48c:	e02a      	b.n	da4e4 <iso_year_adjust+0xba>
   da48e:	2b10      	cmp	r3, #16
   da490:	db26      	blt.n	da4e0 <iso_year_adjust+0xb6>
   da492:	2b11      	cmp	r3, #17
   da494:	dd26      	ble.n	da4e4 <iso_year_adjust+0xba>
   da496:	3b1c      	subs	r3, #28
   da498:	2b01      	cmp	r3, #1
   da49a:	d923      	bls.n	da4e4 <iso_year_adjust+0xba>
   da49c:	e020      	b.n	da4e0 <iso_year_adjust+0xb6>
   da49e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da4a2:	4293      	cmp	r3, r2
   da4a4:	dc0e      	bgt.n	da4c4 <iso_year_adjust+0x9a>
   da4a6:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da4aa:	4293      	cmp	r3, r2
   da4ac:	da16      	bge.n	da4dc <iso_year_adjust+0xb2>
   da4ae:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da4b2:	4293      	cmp	r3, r2
   da4b4:	d012      	beq.n	da4dc <iso_year_adjust+0xb2>
   da4b6:	db13      	blt.n	da4e0 <iso_year_adjust+0xb6>
   da4b8:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da4bc:	3b12      	subs	r3, #18
   da4be:	2b02      	cmp	r3, #2
   da4c0:	d90c      	bls.n	da4dc <iso_year_adjust+0xb2>
   da4c2:	e00d      	b.n	da4e0 <iso_year_adjust+0xb6>
   da4c4:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da4c8:	4293      	cmp	r3, r2
   da4ca:	d007      	beq.n	da4dc <iso_year_adjust+0xb2>
   da4cc:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da4d0:	4293      	cmp	r3, r2
   da4d2:	d003      	beq.n	da4dc <iso_year_adjust+0xb2>
   da4d4:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da4d8:	4293      	cmp	r3, r2
   da4da:	d101      	bne.n	da4e0 <iso_year_adjust+0xb6>
   da4dc:	2001      	movs	r0, #1
   da4de:	bd10      	pop	{r4, pc}
   da4e0:	2000      	movs	r0, #0
   da4e2:	bd10      	pop	{r4, pc}
   da4e4:	f04f 30ff 	mov.w	r0, #4294967295
   da4e8:	bd10      	pop	{r4, pc}
	...

000da4ec <strftime>:
   da4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da4f0:	b093      	sub	sp, #76	; 0x4c
   da4f2:	460e      	mov	r6, r1
   da4f4:	461d      	mov	r5, r3
   da4f6:	4607      	mov	r7, r0
   da4f8:	4691      	mov	r9, r2
   da4fa:	f001 fc11 	bl	dbd20 <__get_current_time_locale>
   da4fe:	2300      	movs	r3, #0
   da500:	9306      	str	r3, [sp, #24]
   da502:	461c      	mov	r4, r3
   da504:	1e73      	subs	r3, r6, #1
   da506:	9003      	str	r0, [sp, #12]
   da508:	9302      	str	r3, [sp, #8]
   da50a:	f899 3000 	ldrb.w	r3, [r9]
   da50e:	2b00      	cmp	r3, #0
   da510:	f000 8492 	beq.w	dae38 <strftime+0x94c>
   da514:	2b25      	cmp	r3, #37	; 0x25
   da516:	d008      	beq.n	da52a <strftime+0x3e>
   da518:	9a02      	ldr	r2, [sp, #8]
   da51a:	4294      	cmp	r4, r2
   da51c:	f080 8490 	bcs.w	dae40 <strftime+0x954>
   da520:	553b      	strb	r3, [r7, r4]
   da522:	f109 0901 	add.w	r9, r9, #1
   da526:	3401      	adds	r4, #1
   da528:	e7ef      	b.n	da50a <strftime+0x1e>
   da52a:	f899 a001 	ldrb.w	sl, [r9, #1]
   da52e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da532:	d007      	beq.n	da544 <strftime+0x58>
   da534:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da538:	d004      	beq.n	da544 <strftime+0x58>
   da53a:	f109 0901 	add.w	r9, r9, #1
   da53e:	f04f 0a00 	mov.w	sl, #0
   da542:	e001      	b.n	da548 <strftime+0x5c>
   da544:	f109 0902 	add.w	r9, r9, #2
   da548:	f899 3000 	ldrb.w	r3, [r9]
   da54c:	3b31      	subs	r3, #49	; 0x31
   da54e:	2b08      	cmp	r3, #8
   da550:	d808      	bhi.n	da564 <strftime+0x78>
   da552:	4648      	mov	r0, r9
   da554:	220a      	movs	r2, #10
   da556:	a90a      	add	r1, sp, #40	; 0x28
   da558:	f001 fbd8 	bl	dbd0c <strtoul>
   da55c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da560:	4680      	mov	r8, r0
   da562:	e001      	b.n	da568 <strftime+0x7c>
   da564:	f04f 0800 	mov.w	r8, #0
   da568:	f899 3000 	ldrb.w	r3, [r9]
   da56c:	2b45      	cmp	r3, #69	; 0x45
   da56e:	d001      	beq.n	da574 <strftime+0x88>
   da570:	2b4f      	cmp	r3, #79	; 0x4f
   da572:	d101      	bne.n	da578 <strftime+0x8c>
   da574:	f109 0901 	add.w	r9, r9, #1
   da578:	f899 0000 	ldrb.w	r0, [r9]
   da57c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da580:	2b55      	cmp	r3, #85	; 0x55
   da582:	f200 845d 	bhi.w	dae40 <strftime+0x954>
   da586:	e8df f013 	tbh	[pc, r3, lsl #1]
   da58a:	044a      	.short	0x044a
   da58c:	045b045b 	.word	0x045b045b
   da590:	045b045b 	.word	0x045b045b
   da594:	045b045b 	.word	0x045b045b
   da598:	045b045b 	.word	0x045b045b
   da59c:	045b045b 	.word	0x045b045b
   da5a0:	045b045b 	.word	0x045b045b
   da5a4:	045b045b 	.word	0x045b045b
   da5a8:	045b045b 	.word	0x045b045b
   da5ac:	045b045b 	.word	0x045b045b
   da5b0:	045b045b 	.word	0x045b045b
   da5b4:	045b045b 	.word	0x045b045b
   da5b8:	045b045b 	.word	0x045b045b
   da5bc:	045b045b 	.word	0x045b045b
   da5c0:	006f045b 	.word	0x006f045b
   da5c4:	00d400a1 	.word	0x00d400a1
   da5c8:	045b011a 	.word	0x045b011a
   da5cc:	01a0013f 	.word	0x01a0013f
   da5d0:	022d0226 	.word	0x022d0226
   da5d4:	045b045b 	.word	0x045b045b
   da5d8:	0260045b 	.word	0x0260045b
   da5dc:	045b045b 	.word	0x045b045b
   da5e0:	045b0268 	.word	0x045b0268
   da5e4:	031d0297 	.word	0x031d0297
   da5e8:	033b0325 	.word	0x033b0325
   da5ec:	03860343 	.word	0x03860343
   da5f0:	03a000c6 	.word	0x03a000c6
   da5f4:	045b041f 	.word	0x045b041f
   da5f8:	045b045b 	.word	0x045b045b
   da5fc:	045b045b 	.word	0x045b045b
   da600:	0056045b 	.word	0x0056045b
   da604:	00ba0089 	.word	0x00ba0089
   da608:	010c010c 	.word	0x010c010c
   da60c:	0171045b 	.word	0x0171045b
   da610:	045b0089 	.word	0x045b0089
   da614:	0226023d 	.word	0x0226023d
   da618:	025d022d 	.word	0x025d022d
   da61c:	045b0262 	.word	0x045b0262
   da620:	045b0268 	.word	0x045b0268
   da624:	029c00be 	.word	0x029c00be
   da628:	032e031f 	.word	0x032e031f
   da62c:	037f045b 	.word	0x037f045b
   da630:	039200c2 	.word	0x039200c2
   da634:	03e7      	.short	0x03e7
   da636:	69ab      	ldr	r3, [r5, #24]
   da638:	9a03      	ldr	r2, [sp, #12]
   da63a:	3318      	adds	r3, #24
   da63c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da640:	4640      	mov	r0, r8
   da642:	f000 fc07 	bl	dae54 <strlen>
   da646:	f108 38ff 	add.w	r8, r8, #4294967295
   da64a:	193b      	adds	r3, r7, r4
   da64c:	4420      	add	r0, r4
   da64e:	4284      	cmp	r4, r0
   da650:	f000 83eb 	beq.w	dae2a <strftime+0x93e>
   da654:	9a02      	ldr	r2, [sp, #8]
   da656:	4294      	cmp	r4, r2
   da658:	f080 83f2 	bcs.w	dae40 <strftime+0x954>
   da65c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da660:	f803 2b01 	strb.w	r2, [r3], #1
   da664:	3401      	adds	r4, #1
   da666:	e7f2      	b.n	da64e <strftime+0x162>
   da668:	69ab      	ldr	r3, [r5, #24]
   da66a:	9a03      	ldr	r2, [sp, #12]
   da66c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da670:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   da674:	4640      	mov	r0, r8
   da676:	f000 fbed 	bl	dae54 <strlen>
   da67a:	f108 38ff 	add.w	r8, r8, #4294967295
   da67e:	193b      	adds	r3, r7, r4
   da680:	4420      	add	r0, r4
   da682:	4284      	cmp	r4, r0
   da684:	f000 83d1 	beq.w	dae2a <strftime+0x93e>
   da688:	9a02      	ldr	r2, [sp, #8]
   da68a:	4294      	cmp	r4, r2
   da68c:	f080 83d8 	bcs.w	dae40 <strftime+0x954>
   da690:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da694:	f803 2b01 	strb.w	r2, [r3], #1
   da698:	3401      	adds	r4, #1
   da69a:	e7f2      	b.n	da682 <strftime+0x196>
   da69c:	692b      	ldr	r3, [r5, #16]
   da69e:	9a03      	ldr	r2, [sp, #12]
   da6a0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da6a4:	4640      	mov	r0, r8
   da6a6:	f000 fbd5 	bl	dae54 <strlen>
   da6aa:	f108 38ff 	add.w	r8, r8, #4294967295
   da6ae:	193b      	adds	r3, r7, r4
   da6b0:	4420      	add	r0, r4
   da6b2:	4284      	cmp	r4, r0
   da6b4:	f000 83b9 	beq.w	dae2a <strftime+0x93e>
   da6b8:	9a02      	ldr	r2, [sp, #8]
   da6ba:	4294      	cmp	r4, r2
   da6bc:	f080 83c0 	bcs.w	dae40 <strftime+0x954>
   da6c0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da6c4:	f803 2b01 	strb.w	r2, [r3], #1
   da6c8:	3401      	adds	r4, #1
   da6ca:	e7f2      	b.n	da6b2 <strftime+0x1c6>
   da6cc:	692b      	ldr	r3, [r5, #16]
   da6ce:	9a03      	ldr	r2, [sp, #12]
   da6d0:	330c      	adds	r3, #12
   da6d2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da6d6:	4640      	mov	r0, r8
   da6d8:	f000 fbbc 	bl	dae54 <strlen>
   da6dc:	f108 38ff 	add.w	r8, r8, #4294967295
   da6e0:	193b      	adds	r3, r7, r4
   da6e2:	4420      	add	r0, r4
   da6e4:	4284      	cmp	r4, r0
   da6e6:	f000 83a0 	beq.w	dae2a <strftime+0x93e>
   da6ea:	9a02      	ldr	r2, [sp, #8]
   da6ec:	4294      	cmp	r4, r2
   da6ee:	f080 83a7 	bcs.w	dae40 <strftime+0x954>
   da6f2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da6f6:	f803 2b01 	strb.w	r2, [r3], #1
   da6fa:	3401      	adds	r4, #1
   da6fc:	e7f2      	b.n	da6e4 <strftime+0x1f8>
   da6fe:	9b03      	ldr	r3, [sp, #12]
   da700:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   da704:	e00a      	b.n	da71c <strftime+0x230>
   da706:	9b03      	ldr	r3, [sp, #12]
   da708:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   da70c:	e006      	b.n	da71c <strftime+0x230>
   da70e:	9b03      	ldr	r3, [sp, #12]
   da710:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   da714:	e002      	b.n	da71c <strftime+0x230>
   da716:	9b03      	ldr	r3, [sp, #12]
   da718:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   da71c:	4640      	mov	r0, r8
   da71e:	f000 fb99 	bl	dae54 <strlen>
   da722:	f898 3000 	ldrb.w	r3, [r8]
   da726:	2b00      	cmp	r3, #0
   da728:	f000 837f 	beq.w	dae2a <strftime+0x93e>
   da72c:	462b      	mov	r3, r5
   da72e:	4642      	mov	r2, r8
   da730:	e093      	b.n	da85a <strftime+0x36e>
   da732:	49b6      	ldr	r1, [pc, #728]	; (daa0c <strftime+0x520>)
   da734:	f8d5 b014 	ldr.w	fp, [r5, #20]
   da738:	458b      	cmp	fp, r1
   da73a:	bfac      	ite	ge
   da73c:	2100      	movge	r1, #0
   da73e:	2101      	movlt	r1, #1
   da740:	f1bb 0f00 	cmp.w	fp, #0
   da744:	db04      	blt.n	da750 <strftime+0x264>
   da746:	2064      	movs	r0, #100	; 0x64
   da748:	fb9b f0f0 	sdiv	r0, fp, r0
   da74c:	3013      	adds	r0, #19
   da74e:	e008      	b.n	da762 <strftime+0x276>
   da750:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   da754:	9107      	str	r1, [sp, #28]
   da756:	f001 fd23 	bl	dc1a0 <abs>
   da75a:	9907      	ldr	r1, [sp, #28]
   da75c:	2364      	movs	r3, #100	; 0x64
   da75e:	fb90 f0f3 	sdiv	r0, r0, r3
   da762:	f1ba 0f00 	cmp.w	sl, #0
   da766:	d008      	beq.n	da77a <strftime+0x28e>
   da768:	2863      	cmp	r0, #99	; 0x63
   da76a:	dd09      	ble.n	da780 <strftime+0x294>
   da76c:	4ba8      	ldr	r3, [pc, #672]	; (daa10 <strftime+0x524>)
   da76e:	4aa9      	ldr	r2, [pc, #676]	; (daa14 <strftime+0x528>)
   da770:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da774:	bf18      	it	ne
   da776:	4613      	movne	r3, r2
   da778:	e003      	b.n	da782 <strftime+0x296>
   da77a:	4ba6      	ldr	r3, [pc, #664]	; (daa14 <strftime+0x528>)
   da77c:	4aa6      	ldr	r2, [pc, #664]	; (daa18 <strftime+0x52c>)
   da77e:	e001      	b.n	da784 <strftime+0x298>
   da780:	4ba4      	ldr	r3, [pc, #656]	; (daa14 <strftime+0x528>)
   da782:	4aa6      	ldr	r2, [pc, #664]	; (daa1c <strftime+0x530>)
   da784:	9001      	str	r0, [sp, #4]
   da786:	f1b8 0f01 	cmp.w	r8, #1
   da78a:	bf98      	it	ls
   da78c:	f04f 0802 	movls.w	r8, #2
   da790:	ebc1 0108 	rsb	r1, r1, r8
   da794:	9100      	str	r1, [sp, #0]
   da796:	489d      	ldr	r0, [pc, #628]	; (daa0c <strftime+0x520>)
   da798:	49a1      	ldr	r1, [pc, #644]	; (daa20 <strftime+0x534>)
   da79a:	4583      	cmp	fp, r0
   da79c:	bfb8      	it	lt
   da79e:	460b      	movlt	r3, r1
   da7a0:	e21e      	b.n	dabe0 <strftime+0x6f4>
   da7a2:	4aa0      	ldr	r2, [pc, #640]	; (daa24 <strftime+0x538>)
   da7a4:	49a0      	ldr	r1, [pc, #640]	; (daa28 <strftime+0x53c>)
   da7a6:	68eb      	ldr	r3, [r5, #12]
   da7a8:	2864      	cmp	r0, #100	; 0x64
   da7aa:	bf08      	it	eq
   da7ac:	460a      	moveq	r2, r1
   da7ae:	1b31      	subs	r1, r6, r4
   da7b0:	1938      	adds	r0, r7, r4
   da7b2:	f7fc f8dd 	bl	d6970 <sniprintf>
   da7b6:	2800      	cmp	r0, #0
   da7b8:	f280 8302 	bge.w	dadc0 <strftime+0x8d4>
   da7bc:	e340      	b.n	dae40 <strftime+0x954>
   da7be:	6968      	ldr	r0, [r5, #20]
   da7c0:	692b      	ldr	r3, [r5, #16]
   da7c2:	2800      	cmp	r0, #0
   da7c4:	f103 0b01 	add.w	fp, r3, #1
   da7c8:	eb07 0804 	add.w	r8, r7, r4
   da7cc:	ebc4 0a06 	rsb	sl, r4, r6
   da7d0:	68eb      	ldr	r3, [r5, #12]
   da7d2:	db05      	blt.n	da7e0 <strftime+0x2f4>
   da7d4:	2264      	movs	r2, #100	; 0x64
   da7d6:	fb90 f1f2 	sdiv	r1, r0, r2
   da7da:	fb02 0011 	mls	r0, r2, r1, r0
   da7de:	e00a      	b.n	da7f6 <strftime+0x30a>
   da7e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da7e4:	9307      	str	r3, [sp, #28]
   da7e6:	f001 fcdb 	bl	dc1a0 <abs>
   da7ea:	2264      	movs	r2, #100	; 0x64
   da7ec:	9b07      	ldr	r3, [sp, #28]
   da7ee:	fb90 f1f2 	sdiv	r1, r0, r2
   da7f2:	fb01 0012 	mls	r0, r1, r2, r0
   da7f6:	4a8d      	ldr	r2, [pc, #564]	; (daa2c <strftime+0x540>)
   da7f8:	9001      	str	r0, [sp, #4]
   da7fa:	9300      	str	r3, [sp, #0]
   da7fc:	4651      	mov	r1, sl
   da7fe:	465b      	mov	r3, fp
   da800:	4640      	mov	r0, r8
   da802:	f7fc f8b5 	bl	d6970 <sniprintf>
   da806:	e7d6      	b.n	da7b6 <strftime+0x2ca>
   da808:	2325      	movs	r3, #37	; 0x25
   da80a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da80e:	f1ba 0f00 	cmp.w	sl, #0
   da812:	d007      	beq.n	da824 <strftime+0x338>
   da814:	f1b8 0f05 	cmp.w	r8, #5
   da818:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   da81c:	bf98      	it	ls
   da81e:	f04f 0806 	movls.w	r8, #6
   da822:	e004      	b.n	da82e <strftime+0x342>
   da824:	232b      	movs	r3, #43	; 0x2b
   da826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   da82a:	f04f 080a 	mov.w	r8, #10
   da82e:	f1b8 0306 	subs.w	r3, r8, #6
   da832:	d102      	bne.n	da83a <strftime+0x34e>
   da834:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da838:	e00a      	b.n	da850 <strftime+0x364>
   da83a:	4a7d      	ldr	r2, [pc, #500]	; (daa30 <strftime+0x544>)
   da83c:	211e      	movs	r1, #30
   da83e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da842:	f7fc f895 	bl	d6970 <sniprintf>
   da846:	2800      	cmp	r0, #0
   da848:	ddf4      	ble.n	da834 <strftime+0x348>
   da84a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   da84e:	4418      	add	r0, r3
   da850:	4978      	ldr	r1, [pc, #480]	; (daa34 <strftime+0x548>)
   da852:	f7ff fdc7 	bl	da3e4 <strcpy>
   da856:	462b      	mov	r3, r5
   da858:	aa0a      	add	r2, sp, #40	; 0x28
   da85a:	1b31      	subs	r1, r6, r4
   da85c:	1938      	adds	r0, r7, r4
   da85e:	f7ff fe45 	bl	da4ec <strftime>
   da862:	2800      	cmp	r0, #0
   da864:	f340 82ec 	ble.w	dae40 <strftime+0x954>
   da868:	4404      	add	r4, r0
   da86a:	e2de      	b.n	dae2a <strftime+0x93e>
   da86c:	4628      	mov	r0, r5
   da86e:	f7ff fddc 	bl	da42a <iso_year_adjust>
   da872:	4680      	mov	r8, r0
   da874:	6968      	ldr	r0, [r5, #20]
   da876:	2800      	cmp	r0, #0
   da878:	db05      	blt.n	da886 <strftime+0x39a>
   da87a:	2264      	movs	r2, #100	; 0x64
   da87c:	fb90 f1f2 	sdiv	r1, r0, r2
   da880:	fb02 0011 	mls	r0, r2, r1, r0
   da884:	e008      	b.n	da898 <strftime+0x3ac>
   da886:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da88a:	f001 fc89 	bl	dc1a0 <abs>
   da88e:	2264      	movs	r2, #100	; 0x64
   da890:	fb90 f3f2 	sdiv	r3, r0, r2
   da894:	fb03 0012 	mls	r0, r3, r2, r0
   da898:	f1b8 0f00 	cmp.w	r8, #0
   da89c:	da06      	bge.n	da8ac <strftime+0x3c0>
   da89e:	696a      	ldr	r2, [r5, #20]
   da8a0:	4b65      	ldr	r3, [pc, #404]	; (daa38 <strftime+0x54c>)
   da8a2:	429a      	cmp	r2, r3
   da8a4:	bfb8      	it	lt
   da8a6:	f04f 0801 	movlt.w	r8, #1
   da8aa:	e006      	b.n	da8ba <strftime+0x3ce>
   da8ac:	d005      	beq.n	da8ba <strftime+0x3ce>
   da8ae:	696a      	ldr	r2, [r5, #20]
   da8b0:	4b56      	ldr	r3, [pc, #344]	; (daa0c <strftime+0x520>)
   da8b2:	429a      	cmp	r2, r3
   da8b4:	bfb8      	it	lt
   da8b6:	f04f 38ff 	movlt.w	r8, #4294967295
   da8ba:	2364      	movs	r3, #100	; 0x64
   da8bc:	4440      	add	r0, r8
   da8be:	fb90 f2f3 	sdiv	r2, r0, r3
   da8c2:	fb03 0012 	mls	r0, r3, r2, r0
   da8c6:	4418      	add	r0, r3
   da8c8:	e1f9      	b.n	dacbe <strftime+0x7d2>
   da8ca:	4b50      	ldr	r3, [pc, #320]	; (daa0c <strftime+0x520>)
   da8cc:	6969      	ldr	r1, [r5, #20]
   da8ce:	9108      	str	r1, [sp, #32]
   da8d0:	4299      	cmp	r1, r3
   da8d2:	bfac      	ite	ge
   da8d4:	2300      	movge	r3, #0
   da8d6:	2301      	movlt	r3, #1
   da8d8:	4628      	mov	r0, r5
   da8da:	9307      	str	r3, [sp, #28]
   da8dc:	f7ff fda5 	bl	da42a <iso_year_adjust>
   da8e0:	9908      	ldr	r1, [sp, #32]
   da8e2:	2900      	cmp	r1, #0
   da8e4:	4683      	mov	fp, r0
   da8e6:	db04      	blt.n	da8f2 <strftime+0x406>
   da8e8:	2364      	movs	r3, #100	; 0x64
   da8ea:	fb91 f3f3 	sdiv	r3, r1, r3
   da8ee:	3313      	adds	r3, #19
   da8f0:	e008      	b.n	da904 <strftime+0x418>
   da8f2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   da8f6:	9108      	str	r1, [sp, #32]
   da8f8:	f001 fc52 	bl	dc1a0 <abs>
   da8fc:	9908      	ldr	r1, [sp, #32]
   da8fe:	2364      	movs	r3, #100	; 0x64
   da900:	fb90 f3f3 	sdiv	r3, r0, r3
   da904:	6968      	ldr	r0, [r5, #20]
   da906:	2800      	cmp	r0, #0
   da908:	db06      	blt.n	da918 <strftime+0x42c>
   da90a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da90e:	fb90 fcfe 	sdiv	ip, r0, lr
   da912:	fb0e 001c 	mls	r0, lr, ip, r0
   da916:	e00d      	b.n	da934 <strftime+0x448>
   da918:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da91c:	9109      	str	r1, [sp, #36]	; 0x24
   da91e:	9308      	str	r3, [sp, #32]
   da920:	f001 fc3e 	bl	dc1a0 <abs>
   da924:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da928:	9909      	ldr	r1, [sp, #36]	; 0x24
   da92a:	9b08      	ldr	r3, [sp, #32]
   da92c:	fb90 fcfe 	sdiv	ip, r0, lr
   da930:	fb0c 001e 	mls	r0, ip, lr, r0
   da934:	f1bb 0f00 	cmp.w	fp, #0
   da938:	da08      	bge.n	da94c <strftime+0x460>
   da93a:	6969      	ldr	r1, [r5, #20]
   da93c:	4a3e      	ldr	r2, [pc, #248]	; (daa38 <strftime+0x54c>)
   da93e:	4291      	cmp	r1, r2
   da940:	da0a      	bge.n	da958 <strftime+0x46c>
   da942:	f04f 0b01 	mov.w	fp, #1
   da946:	f8cd b01c 	str.w	fp, [sp, #28]
   da94a:	e005      	b.n	da958 <strftime+0x46c>
   da94c:	d004      	beq.n	da958 <strftime+0x46c>
   da94e:	4a2f      	ldr	r2, [pc, #188]	; (daa0c <strftime+0x520>)
   da950:	4291      	cmp	r1, r2
   da952:	bfb8      	it	lt
   da954:	f04f 3bff 	movlt.w	fp, #4294967295
   da958:	eb0b 0200 	add.w	r2, fp, r0
   da95c:	1c50      	adds	r0, r2, #1
   da95e:	d102      	bne.n	da966 <strftime+0x47a>
   da960:	3b01      	subs	r3, #1
   da962:	2263      	movs	r2, #99	; 0x63
   da964:	e003      	b.n	da96e <strftime+0x482>
   da966:	2a64      	cmp	r2, #100	; 0x64
   da968:	bf04      	itt	eq
   da96a:	3301      	addeq	r3, #1
   da96c:	2200      	moveq	r2, #0
   da96e:	2064      	movs	r0, #100	; 0x64
   da970:	fb00 2303 	mla	r3, r0, r3, r2
   da974:	9a07      	ldr	r2, [sp, #28]
   da976:	b142      	cbz	r2, da98a <strftime+0x49e>
   da978:	222d      	movs	r2, #45	; 0x2d
   da97a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   da97e:	f1b8 0f00 	cmp.w	r8, #0
   da982:	d013      	beq.n	da9ac <strftime+0x4c0>
   da984:	f108 38ff 	add.w	r8, r8, #4294967295
   da988:	e010      	b.n	da9ac <strftime+0x4c0>
   da98a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da98e:	d110      	bne.n	da9b2 <strftime+0x4c6>
   da990:	f242 720f 	movw	r2, #9999	; 0x270f
   da994:	4293      	cmp	r3, r2
   da996:	d90c      	bls.n	da9b2 <strftime+0x4c6>
   da998:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da99c:	f1b8 0f00 	cmp.w	r8, #0
   da9a0:	d1f0      	bne.n	da984 <strftime+0x498>
   da9a2:	aa12      	add	r2, sp, #72	; 0x48
   da9a4:	2125      	movs	r1, #37	; 0x25
   da9a6:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   da9aa:	e00a      	b.n	da9c2 <strftime+0x4d6>
   da9ac:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   da9b0:	e000      	b.n	da9b4 <strftime+0x4c8>
   da9b2:	aa0a      	add	r2, sp, #40	; 0x28
   da9b4:	2125      	movs	r1, #37	; 0x25
   da9b6:	7011      	strb	r1, [r2, #0]
   da9b8:	f1ba 0f00 	cmp.w	sl, #0
   da9bc:	d101      	bne.n	da9c2 <strftime+0x4d6>
   da9be:	1c50      	adds	r0, r2, #1
   da9c0:	e002      	b.n	da9c8 <strftime+0x4dc>
   da9c2:	2130      	movs	r1, #48	; 0x30
   da9c4:	1c90      	adds	r0, r2, #2
   da9c6:	7051      	strb	r1, [r2, #1]
   da9c8:	491c      	ldr	r1, [pc, #112]	; (daa3c <strftime+0x550>)
   da9ca:	9307      	str	r3, [sp, #28]
   da9cc:	f7ff fd0a 	bl	da3e4 <strcpy>
   da9d0:	9b07      	ldr	r3, [sp, #28]
   da9d2:	9300      	str	r3, [sp, #0]
   da9d4:	e1ad      	b.n	dad32 <strftime+0x846>
   da9d6:	4a14      	ldr	r2, [pc, #80]	; (daa28 <strftime+0x53c>)
   da9d8:	4912      	ldr	r1, [pc, #72]	; (daa24 <strftime+0x538>)
   da9da:	68ab      	ldr	r3, [r5, #8]
   da9dc:	286b      	cmp	r0, #107	; 0x6b
   da9de:	bf08      	it	eq
   da9e0:	460a      	moveq	r2, r1
   da9e2:	e6e4      	b.n	da7ae <strftime+0x2c2>
   da9e4:	68a9      	ldr	r1, [r5, #8]
   da9e6:	230c      	movs	r3, #12
   da9e8:	b131      	cbz	r1, da9f8 <strftime+0x50c>
   da9ea:	4299      	cmp	r1, r3
   da9ec:	bf0e      	itee	eq
   da9ee:	460b      	moveq	r3, r1
   da9f0:	fb91 f2f3 	sdivne	r2, r1, r3
   da9f4:	fb03 1312 	mlsne	r3, r3, r2, r1
   da9f8:	4a0a      	ldr	r2, [pc, #40]	; (daa24 <strftime+0x538>)
   da9fa:	490b      	ldr	r1, [pc, #44]	; (daa28 <strftime+0x53c>)
   da9fc:	2849      	cmp	r0, #73	; 0x49
   da9fe:	bf08      	it	eq
   daa00:	460a      	moveq	r2, r1
   daa02:	e6d4      	b.n	da7ae <strftime+0x2c2>
   daa04:	69eb      	ldr	r3, [r5, #28]
   daa06:	4a0e      	ldr	r2, [pc, #56]	; (daa40 <strftime+0x554>)
   daa08:	3301      	adds	r3, #1
   daa0a:	e6d0      	b.n	da7ae <strftime+0x2c2>
   daa0c:	fffff894 	.word	0xfffff894
   daa10:	000de107 	.word	0x000de107
   daa14:	000ddb19 	.word	0x000ddb19
   daa18:	000de0f8 	.word	0x000de0f8
   daa1c:	000de0ff 	.word	0x000de0ff
   daa20:	000de109 	.word	0x000de109
   daa24:	000de10b 	.word	0x000de10b
   daa28:	000de119 	.word	0x000de119
   daa2c:	000de10f 	.word	0x000de10f
   daa30:	000de11e 	.word	0x000de11e
   daa34:	000de122 	.word	0x000de122
   daa38:	fffff895 	.word	0xfffff895
   daa3c:	000de12a 	.word	0x000de12a
   daa40:	000de12e 	.word	0x000de12e
   daa44:	692b      	ldr	r3, [r5, #16]
   daa46:	3301      	adds	r3, #1
   daa48:	e13d      	b.n	dacc6 <strftime+0x7da>
   daa4a:	686b      	ldr	r3, [r5, #4]
   daa4c:	e13b      	b.n	dacc6 <strftime+0x7da>
   daa4e:	9b02      	ldr	r3, [sp, #8]
   daa50:	429c      	cmp	r4, r3
   daa52:	f080 81f5 	bcs.w	dae40 <strftime+0x954>
   daa56:	230a      	movs	r3, #10
   daa58:	e1e5      	b.n	dae26 <strftime+0x93a>
   daa5a:	68ab      	ldr	r3, [r5, #8]
   daa5c:	9a03      	ldr	r2, [sp, #12]
   daa5e:	2b0b      	cmp	r3, #11
   daa60:	bfcc      	ite	gt
   daa62:	23a4      	movgt	r3, #164	; 0xa4
   daa64:	23a0      	movle	r3, #160	; 0xa0
   daa66:	4413      	add	r3, r2
   daa68:	f8d3 8004 	ldr.w	r8, [r3, #4]
   daa6c:	4640      	mov	r0, r8
   daa6e:	f000 f9f1 	bl	dae54 <strlen>
   daa72:	4bb2      	ldr	r3, [pc, #712]	; (dad3c <strftime+0x850>)
   daa74:	f8d3 e000 	ldr.w	lr, [r3]
   daa78:	1939      	adds	r1, r7, r4
   daa7a:	4642      	mov	r2, r8
   daa7c:	4420      	add	r0, r4
   daa7e:	4284      	cmp	r4, r0
   daa80:	f000 81d3 	beq.w	dae2a <strftime+0x93e>
   daa84:	9b02      	ldr	r3, [sp, #8]
   daa86:	429c      	cmp	r4, r3
   daa88:	f080 81da 	bcs.w	dae40 <strftime+0x954>
   daa8c:	f899 3000 	ldrb.w	r3, [r9]
   daa90:	2b50      	cmp	r3, #80	; 0x50
   daa92:	f104 0401 	add.w	r4, r4, #1
   daa96:	7813      	ldrb	r3, [r2, #0]
   daa98:	d10a      	bne.n	daab0 <strftime+0x5c4>
   daa9a:	eb0e 0c03 	add.w	ip, lr, r3
   daa9e:	f89c c001 	ldrb.w	ip, [ip, #1]
   daaa2:	f00c 0c03 	and.w	ip, ip, #3
   daaa6:	f1bc 0f01 	cmp.w	ip, #1
   daaaa:	bf08      	it	eq
   daaac:	3320      	addeq	r3, #32
   daaae:	b2db      	uxtb	r3, r3
   daab0:	f801 3b01 	strb.w	r3, [r1], #1
   daab4:	3201      	adds	r2, #1
   daab6:	e7e2      	b.n	daa7e <strftime+0x592>
   daab8:	686b      	ldr	r3, [r5, #4]
   daaba:	9300      	str	r3, [sp, #0]
   daabc:	4aa0      	ldr	r2, [pc, #640]	; (dad40 <strftime+0x854>)
   daabe:	68ab      	ldr	r3, [r5, #8]
   daac0:	e139      	b.n	dad36 <strftime+0x84a>
   daac2:	6a2b      	ldr	r3, [r5, #32]
   daac4:	2b00      	cmp	r3, #0
   daac6:	db17      	blt.n	daaf8 <strftime+0x60c>
   daac8:	f001 f9e2 	bl	dbe90 <__tz_lock>
   daacc:	9b06      	ldr	r3, [sp, #24]
   daace:	b91b      	cbnz	r3, daad8 <strftime+0x5ec>
   daad0:	f001 f9e0 	bl	dbe94 <_tzset_unlocked>
   daad4:	2301      	movs	r3, #1
   daad6:	9306      	str	r3, [sp, #24]
   daad8:	f001 fec8 	bl	dc86c <__gettzinfo>
   daadc:	6a2b      	ldr	r3, [r5, #32]
   daade:	2b00      	cmp	r3, #0
   daae0:	bfd4      	ite	le
   daae2:	2300      	movle	r3, #0
   daae4:	2301      	movgt	r3, #1
   daae6:	221c      	movs	r2, #28
   daae8:	fb02 0003 	mla	r0, r2, r3, r0
   daaec:	6a03      	ldr	r3, [r0, #32]
   daaee:	f1c3 0800 	rsb	r8, r3, #0
   daaf2:	f001 f9ce 	bl	dbe92 <__tz_unlock>
   daaf6:	e001      	b.n	daafc <strftime+0x610>
   daaf8:	f04f 0800 	mov.w	r8, #0
   daafc:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dab00:	4670      	mov	r0, lr
   dab02:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dab06:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dab0a:	f141 33ff 	adc.w	r3, r1, #4294967295
   dab0e:	2a00      	cmp	r2, #0
   dab10:	f173 0b00 	sbcs.w	fp, r3, #0
   dab14:	ebc4 0c06 	rsb	ip, r4, r6
   dab18:	eb07 0a04 	add.w	sl, r7, r4
   dab1c:	da03      	bge.n	dab26 <strftime+0x63a>
   dab1e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dab22:	f141 33ff 	adc.w	r3, r1, #4294967295
   dab26:	0891      	lsrs	r1, r2, #2
   dab28:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dab2c:	109b      	asrs	r3, r3, #2
   dab2e:	9104      	str	r1, [sp, #16]
   dab30:	9305      	str	r3, [sp, #20]
   dab32:	f10e 31ff 	add.w	r1, lr, #4294967295
   dab36:	2364      	movs	r3, #100	; 0x64
   dab38:	fb91 f1f3 	sdiv	r1, r1, r3
   dab3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dab40:	1a52      	subs	r2, r2, r1
   dab42:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dab46:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dab4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dab4e:	fb90 f1f1 	sdiv	r1, r0, r1
   dab52:	1852      	adds	r2, r2, r1
   dab54:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dab58:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dab5c:	f240 116d 	movw	r1, #365	; 0x16d
   dab60:	fb01 fe0e 	mul.w	lr, r1, lr
   dab64:	69e9      	ldr	r1, [r5, #28]
   dab66:	eb12 020e 	adds.w	r2, r2, lr
   dab6a:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dab6e:	1852      	adds	r2, r2, r1
   dab70:	f04f 0e18 	mov.w	lr, #24
   dab74:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dab78:	fba2 010e 	umull	r0, r1, r2, lr
   dab7c:	fb0e 1103 	mla	r1, lr, r3, r1
   dab80:	68ab      	ldr	r3, [r5, #8]
   dab82:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dab86:	18c0      	adds	r0, r0, r3
   dab88:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dab8c:	fba0 230e 	umull	r2, r3, r0, lr
   dab90:	fb0e 3301 	mla	r3, lr, r1, r3
   dab94:	6869      	ldr	r1, [r5, #4]
   dab96:	1852      	adds	r2, r2, r1
   dab98:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dab9c:	fba2 010e 	umull	r0, r1, r2, lr
   daba0:	fb0e 1103 	mla	r1, lr, r3, r1
   daba4:	682b      	ldr	r3, [r5, #0]
   daba6:	4a67      	ldr	r2, [pc, #412]	; (dad44 <strftime+0x858>)
   daba8:	18c0      	adds	r0, r0, r3
   dabaa:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dabae:	ebb0 0008 	subs.w	r0, r0, r8
   dabb2:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dabb6:	e9cd 0100 	strd	r0, r1, [sp]
   dabba:	4661      	mov	r1, ip
   dabbc:	4650      	mov	r0, sl
   dabbe:	f7fb fed7 	bl	d6970 <sniprintf>
   dabc2:	e5f8      	b.n	da7b6 <strftime+0x2ca>
   dabc4:	682b      	ldr	r3, [r5, #0]
   dabc6:	e07e      	b.n	dacc6 <strftime+0x7da>
   dabc8:	9b02      	ldr	r3, [sp, #8]
   dabca:	429c      	cmp	r4, r3
   dabcc:	f080 8138 	bcs.w	dae40 <strftime+0x954>
   dabd0:	2309      	movs	r3, #9
   dabd2:	e128      	b.n	dae26 <strftime+0x93a>
   dabd4:	682b      	ldr	r3, [r5, #0]
   dabd6:	9301      	str	r3, [sp, #4]
   dabd8:	686b      	ldr	r3, [r5, #4]
   dabda:	9300      	str	r3, [sp, #0]
   dabdc:	4a5a      	ldr	r2, [pc, #360]	; (dad48 <strftime+0x85c>)
   dabde:	68ab      	ldr	r3, [r5, #8]
   dabe0:	1b31      	subs	r1, r6, r4
   dabe2:	1938      	adds	r0, r7, r4
   dabe4:	e60d      	b.n	da802 <strftime+0x316>
   dabe6:	9b02      	ldr	r3, [sp, #8]
   dabe8:	429c      	cmp	r4, r3
   dabea:	f080 8129 	bcs.w	dae40 <strftime+0x954>
   dabee:	69ab      	ldr	r3, [r5, #24]
   dabf0:	1c62      	adds	r2, r4, #1
   dabf2:	b90b      	cbnz	r3, dabf8 <strftime+0x70c>
   dabf4:	2337      	movs	r3, #55	; 0x37
   dabf6:	e000      	b.n	dabfa <strftime+0x70e>
   dabf8:	3330      	adds	r3, #48	; 0x30
   dabfa:	553b      	strb	r3, [r7, r4]
   dabfc:	4614      	mov	r4, r2
   dabfe:	e114      	b.n	dae2a <strftime+0x93e>
   dac00:	69eb      	ldr	r3, [r5, #28]
   dac02:	69aa      	ldr	r2, [r5, #24]
   dac04:	3307      	adds	r3, #7
   dac06:	1a9b      	subs	r3, r3, r2
   dac08:	2207      	movs	r2, #7
   dac0a:	fb93 f3f2 	sdiv	r3, r3, r2
   dac0e:	e05a      	b.n	dacc6 <strftime+0x7da>
   dac10:	4628      	mov	r0, r5
   dac12:	f7ff fc0a 	bl	da42a <iso_year_adjust>
   dac16:	69aa      	ldr	r2, [r5, #24]
   dac18:	b10a      	cbz	r2, dac1e <strftime+0x732>
   dac1a:	1e53      	subs	r3, r2, #1
   dac1c:	e000      	b.n	dac20 <strftime+0x734>
   dac1e:	2306      	movs	r3, #6
   dac20:	2800      	cmp	r0, #0
   dac22:	dc2f      	bgt.n	dac84 <strftime+0x798>
   dac24:	69ea      	ldr	r2, [r5, #28]
   dac26:	d101      	bne.n	dac2c <strftime+0x740>
   dac28:	320a      	adds	r2, #10
   dac2a:	e03b      	b.n	daca4 <strftime+0x7b8>
   dac2c:	1a9a      	subs	r2, r3, r2
   dac2e:	696b      	ldr	r3, [r5, #20]
   dac30:	f240 716b 	movw	r1, #1899	; 0x76b
   dac34:	2b00      	cmp	r3, #0
   dac36:	bfb4      	ite	lt
   dac38:	4608      	movlt	r0, r1
   dac3a:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dac3e:	4418      	add	r0, r3
   dac40:	0781      	lsls	r1, r0, #30
   dac42:	d107      	bne.n	dac54 <strftime+0x768>
   dac44:	4601      	mov	r1, r0
   dac46:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dac4a:	fb90 f0fe 	sdiv	r0, r0, lr
   dac4e:	fb0e 1110 	mls	r1, lr, r0, r1
   dac52:	b981      	cbnz	r1, dac76 <strftime+0x78a>
   dac54:	2b00      	cmp	r3, #0
   dac56:	f240 716b 	movw	r1, #1899	; 0x76b
   dac5a:	bfa8      	it	ge
   dac5c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dac60:	4419      	add	r1, r3
   dac62:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dac66:	fb91 f0f3 	sdiv	r0, r1, r3
   dac6a:	fb03 1110 	mls	r1, r3, r0, r1
   dac6e:	fab1 f181 	clz	r1, r1
   dac72:	0949      	lsrs	r1, r1, #5
   dac74:	e000      	b.n	dac78 <strftime+0x78c>
   dac76:	2101      	movs	r1, #1
   dac78:	1a52      	subs	r2, r2, r1
   dac7a:	2a05      	cmp	r2, #5
   dac7c:	bfb4      	ite	lt
   dac7e:	2335      	movlt	r3, #53	; 0x35
   dac80:	2334      	movge	r3, #52	; 0x34
   dac82:	e020      	b.n	dacc6 <strftime+0x7da>
   dac84:	2301      	movs	r3, #1
   dac86:	e01e      	b.n	dacc6 <strftime+0x7da>
   dac88:	9b02      	ldr	r3, [sp, #8]
   dac8a:	429c      	cmp	r4, r3
   dac8c:	f080 80d8 	bcs.w	dae40 <strftime+0x954>
   dac90:	69ab      	ldr	r3, [r5, #24]
   dac92:	3330      	adds	r3, #48	; 0x30
   dac94:	e0c7      	b.n	dae26 <strftime+0x93a>
   dac96:	69aa      	ldr	r2, [r5, #24]
   dac98:	b10a      	cbz	r2, dac9e <strftime+0x7b2>
   dac9a:	1e53      	subs	r3, r2, #1
   dac9c:	e000      	b.n	daca0 <strftime+0x7b4>
   dac9e:	2306      	movs	r3, #6
   daca0:	69ea      	ldr	r2, [r5, #28]
   daca2:	3207      	adds	r2, #7
   daca4:	1ad2      	subs	r2, r2, r3
   daca6:	2307      	movs	r3, #7
   daca8:	fb92 f3f3 	sdiv	r3, r2, r3
   dacac:	e00b      	b.n	dacc6 <strftime+0x7da>
   dacae:	6968      	ldr	r0, [r5, #20]
   dacb0:	2800      	cmp	r0, #0
   dacb2:	da03      	bge.n	dacbc <strftime+0x7d0>
   dacb4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dacb8:	f001 fa72 	bl	dc1a0 <abs>
   dacbc:	2364      	movs	r3, #100	; 0x64
   dacbe:	fb90 f2f3 	sdiv	r2, r0, r3
   dacc2:	fb02 0313 	mls	r3, r2, r3, r0
   dacc6:	4a21      	ldr	r2, [pc, #132]	; (dad4c <strftime+0x860>)
   dacc8:	e571      	b.n	da7ae <strftime+0x2c2>
   dacca:	696b      	ldr	r3, [r5, #20]
   daccc:	4a20      	ldr	r2, [pc, #128]	; (dad50 <strftime+0x864>)
   dacce:	4293      	cmp	r3, r2
   dacd0:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dacd4:	da05      	bge.n	dace2 <strftime+0x7f6>
   dacd6:	232d      	movs	r3, #45	; 0x2d
   dacd8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dacdc:	f1cb 0b00 	rsb	fp, fp, #0
   dace0:	e008      	b.n	dacf4 <strftime+0x808>
   dace2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dace6:	d10d      	bne.n	dad04 <strftime+0x818>
   dace8:	f242 730f 	movw	r3, #9999	; 0x270f
   dacec:	459b      	cmp	fp, r3
   dacee:	d911      	bls.n	dad14 <strftime+0x828>
   dacf0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dacf4:	f1b8 0f00 	cmp.w	r8, #0
   dacf8:	d001      	beq.n	dacfe <strftime+0x812>
   dacfa:	f108 38ff 	add.w	r8, r8, #4294967295
   dacfe:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dad02:	e000      	b.n	dad06 <strftime+0x81a>
   dad04:	ab0a      	add	r3, sp, #40	; 0x28
   dad06:	2225      	movs	r2, #37	; 0x25
   dad08:	701a      	strb	r2, [r3, #0]
   dad0a:	f1ba 0f00 	cmp.w	sl, #0
   dad0e:	d108      	bne.n	dad22 <strftime+0x836>
   dad10:	1c58      	adds	r0, r3, #1
   dad12:	e009      	b.n	dad28 <strftime+0x83c>
   dad14:	f1b8 0f00 	cmp.w	r8, #0
   dad18:	d1f4      	bne.n	dad04 <strftime+0x818>
   dad1a:	2325      	movs	r3, #37	; 0x25
   dad1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dad20:	ab0a      	add	r3, sp, #40	; 0x28
   dad22:	2230      	movs	r2, #48	; 0x30
   dad24:	1c98      	adds	r0, r3, #2
   dad26:	705a      	strb	r2, [r3, #1]
   dad28:	490a      	ldr	r1, [pc, #40]	; (dad54 <strftime+0x868>)
   dad2a:	f7ff fb5b 	bl	da3e4 <strcpy>
   dad2e:	f8cd b000 	str.w	fp, [sp]
   dad32:	4643      	mov	r3, r8
   dad34:	aa0a      	add	r2, sp, #40	; 0x28
   dad36:	1b31      	subs	r1, r6, r4
   dad38:	1938      	adds	r0, r7, r4
   dad3a:	e03e      	b.n	dadba <strftime+0x8ce>
   dad3c:	2003d6e4 	.word	0x2003d6e4
   dad40:	000de13d 	.word	0x000de13d
   dad44:	000de133 	.word	0x000de133
   dad48:	000de138 	.word	0x000de138
   dad4c:	000de119 	.word	0x000de119
   dad50:	fffff894 	.word	0xfffff894
   dad54:	000de12a 	.word	0x000de12a
   dad58:	6a2b      	ldr	r3, [r5, #32]
   dad5a:	2b00      	cmp	r3, #0
   dad5c:	db65      	blt.n	dae2a <strftime+0x93e>
   dad5e:	f001 f897 	bl	dbe90 <__tz_lock>
   dad62:	9b06      	ldr	r3, [sp, #24]
   dad64:	b91b      	cbnz	r3, dad6e <strftime+0x882>
   dad66:	f001 f895 	bl	dbe94 <_tzset_unlocked>
   dad6a:	2301      	movs	r3, #1
   dad6c:	9306      	str	r3, [sp, #24]
   dad6e:	f001 fd7d 	bl	dc86c <__gettzinfo>
   dad72:	6a2b      	ldr	r3, [r5, #32]
   dad74:	2b00      	cmp	r3, #0
   dad76:	bfd4      	ite	le
   dad78:	2300      	movle	r3, #0
   dad7a:	2301      	movgt	r3, #1
   dad7c:	221c      	movs	r2, #28
   dad7e:	fb02 0003 	mla	r0, r2, r3, r0
   dad82:	eb07 0a04 	add.w	sl, r7, r4
   dad86:	6a03      	ldr	r3, [r0, #32]
   dad88:	f1c3 0800 	rsb	r8, r3, #0
   dad8c:	f001 f881 	bl	dbe92 <__tz_unlock>
   dad90:	233c      	movs	r3, #60	; 0x3c
   dad92:	fb98 f0f3 	sdiv	r0, r8, r3
   dad96:	9307      	str	r3, [sp, #28]
   dad98:	f001 fe04 	bl	dc9a4 <labs>
   dad9c:	9b07      	ldr	r3, [sp, #28]
   dad9e:	fb90 f2f3 	sdiv	r2, r0, r3
   dada2:	ebc4 0b06 	rsb	fp, r4, r6
   dada6:	fb02 0013 	mls	r0, r2, r3, r0
   dadaa:	4a28      	ldr	r2, [pc, #160]	; (dae4c <strftime+0x960>)
   dadac:	9000      	str	r0, [sp, #0]
   dadae:	4659      	mov	r1, fp
   dadb0:	4650      	mov	r0, sl
   dadb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dadb6:	fb98 f3f3 	sdiv	r3, r8, r3
   dadba:	f7fb fdd9 	bl	d6970 <sniprintf>
   dadbe:	e4fa      	b.n	da7b6 <strftime+0x2ca>
   dadc0:	4404      	add	r4, r0
   dadc2:	42a6      	cmp	r6, r4
   dadc4:	d831      	bhi.n	dae2a <strftime+0x93e>
   dadc6:	e03b      	b.n	dae40 <strftime+0x954>
   dadc8:	6a2b      	ldr	r3, [r5, #32]
   dadca:	2b00      	cmp	r3, #0
   dadcc:	db2d      	blt.n	dae2a <strftime+0x93e>
   dadce:	f001 f85f 	bl	dbe90 <__tz_lock>
   dadd2:	9b06      	ldr	r3, [sp, #24]
   dadd4:	b91b      	cbnz	r3, dadde <strftime+0x8f2>
   dadd6:	f001 f85d 	bl	dbe94 <_tzset_unlocked>
   dadda:	2301      	movs	r3, #1
   daddc:	9306      	str	r3, [sp, #24]
   dadde:	6a2b      	ldr	r3, [r5, #32]
   dade0:	4a1b      	ldr	r2, [pc, #108]	; (dae50 <strftime+0x964>)
   dade2:	2b00      	cmp	r3, #0
   dade4:	bfd4      	ite	le
   dade6:	2300      	movle	r3, #0
   dade8:	2301      	movgt	r3, #1
   dadea:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dadee:	4640      	mov	r0, r8
   dadf0:	f000 f830 	bl	dae54 <strlen>
   dadf4:	f108 38ff 	add.w	r8, r8, #4294967295
   dadf8:	193b      	adds	r3, r7, r4
   dadfa:	4420      	add	r0, r4
   dadfc:	4284      	cmp	r4, r0
   dadfe:	d00b      	beq.n	dae18 <strftime+0x92c>
   dae00:	9a02      	ldr	r2, [sp, #8]
   dae02:	4294      	cmp	r4, r2
   dae04:	d205      	bcs.n	dae12 <strftime+0x926>
   dae06:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dae0a:	f803 2b01 	strb.w	r2, [r3], #1
   dae0e:	3401      	adds	r4, #1
   dae10:	e7f4      	b.n	dadfc <strftime+0x910>
   dae12:	f001 f83e 	bl	dbe92 <__tz_unlock>
   dae16:	e013      	b.n	dae40 <strftime+0x954>
   dae18:	f001 f83b 	bl	dbe92 <__tz_unlock>
   dae1c:	e005      	b.n	dae2a <strftime+0x93e>
   dae1e:	9b02      	ldr	r3, [sp, #8]
   dae20:	429c      	cmp	r4, r3
   dae22:	d20d      	bcs.n	dae40 <strftime+0x954>
   dae24:	2325      	movs	r3, #37	; 0x25
   dae26:	553b      	strb	r3, [r7, r4]
   dae28:	3401      	adds	r4, #1
   dae2a:	f899 3000 	ldrb.w	r3, [r9]
   dae2e:	b11b      	cbz	r3, dae38 <strftime+0x94c>
   dae30:	f109 0901 	add.w	r9, r9, #1
   dae34:	f7ff bb69 	b.w	da50a <strftime+0x1e>
   dae38:	b126      	cbz	r6, dae44 <strftime+0x958>
   dae3a:	2300      	movs	r3, #0
   dae3c:	553b      	strb	r3, [r7, r4]
   dae3e:	e001      	b.n	dae44 <strftime+0x958>
   dae40:	2000      	movs	r0, #0
   dae42:	e000      	b.n	dae46 <strftime+0x95a>
   dae44:	4620      	mov	r0, r4
   dae46:	b013      	add	sp, #76	; 0x4c
   dae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae4c:	000de147 	.word	0x000de147
   dae50:	2003d784 	.word	0x2003d784

000dae54 <strlen>:
   dae54:	4603      	mov	r3, r0
   dae56:	f813 2b01 	ldrb.w	r2, [r3], #1
   dae5a:	2a00      	cmp	r2, #0
   dae5c:	d1fb      	bne.n	dae56 <strlen+0x2>
   dae5e:	1a18      	subs	r0, r3, r0
   dae60:	3801      	subs	r0, #1
   dae62:	4770      	bx	lr

000dae64 <strncmp>:
   dae64:	b530      	push	{r4, r5, lr}
   dae66:	b182      	cbz	r2, dae8a <strncmp+0x26>
   dae68:	1e45      	subs	r5, r0, #1
   dae6a:	3901      	subs	r1, #1
   dae6c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dae70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae74:	42a3      	cmp	r3, r4
   dae76:	d106      	bne.n	dae86 <strncmp+0x22>
   dae78:	43ec      	mvns	r4, r5
   dae7a:	4414      	add	r4, r2
   dae7c:	42e0      	cmn	r0, r4
   dae7e:	d001      	beq.n	dae84 <strncmp+0x20>
   dae80:	2b00      	cmp	r3, #0
   dae82:	d1f3      	bne.n	dae6c <strncmp+0x8>
   dae84:	461c      	mov	r4, r3
   dae86:	1b18      	subs	r0, r3, r4
   dae88:	bd30      	pop	{r4, r5, pc}
   dae8a:	4610      	mov	r0, r2
   dae8c:	bd30      	pop	{r4, r5, pc}

000dae8e <strnlen>:
   dae8e:	b510      	push	{r4, lr}
   dae90:	4603      	mov	r3, r0
   dae92:	4401      	add	r1, r0
   dae94:	428b      	cmp	r3, r1
   dae96:	d004      	beq.n	daea2 <strnlen+0x14>
   dae98:	781a      	ldrb	r2, [r3, #0]
   dae9a:	1c5c      	adds	r4, r3, #1
   dae9c:	b10a      	cbz	r2, daea2 <strnlen+0x14>
   dae9e:	4623      	mov	r3, r4
   daea0:	e7f8      	b.n	dae94 <strnlen+0x6>
   daea2:	1a18      	subs	r0, r3, r0
   daea4:	bd10      	pop	{r4, pc}

000daea6 <sulp>:
   daea6:	b570      	push	{r4, r5, r6, lr}
   daea8:	4604      	mov	r4, r0
   daeaa:	460d      	mov	r5, r1
   daeac:	ec45 4b10 	vmov	d0, r4, r5
   daeb0:	4616      	mov	r6, r2
   daeb2:	f002 f841 	bl	dcf38 <__ulp>
   daeb6:	ec51 0b10 	vmov	r0, r1, d0
   daeba:	b17e      	cbz	r6, daedc <sulp+0x36>
   daebc:	f3c5 530a 	ubfx	r3, r5, #20, #11
   daec0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   daec4:	2b00      	cmp	r3, #0
   daec6:	dd09      	ble.n	daedc <sulp+0x36>
   daec8:	051b      	lsls	r3, r3, #20
   daeca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   daece:	2400      	movs	r4, #0
   daed0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   daed4:	4622      	mov	r2, r4
   daed6:	462b      	mov	r3, r5
   daed8:	f7fe fd92 	bl	d9a00 <__aeabi_dmul>
   daedc:	bd70      	pop	{r4, r5, r6, pc}
	...

000daee0 <_strtod_r>:
   daee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daee4:	b09d      	sub	sp, #116	; 0x74
   daee6:	2300      	movs	r3, #0
   daee8:	9002      	str	r0, [sp, #8]
   daeea:	460c      	mov	r4, r1
   daeec:	9213      	str	r2, [sp, #76]	; 0x4c
   daeee:	9318      	str	r3, [sp, #96]	; 0x60
   daef0:	f04f 0a00 	mov.w	sl, #0
   daef4:	f04f 0b00 	mov.w	fp, #0
   daef8:	9117      	str	r1, [sp, #92]	; 0x5c
   daefa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daefc:	781a      	ldrb	r2, [r3, #0]
   daefe:	2a0d      	cmp	r2, #13
   daf00:	d805      	bhi.n	daf0e <_strtod_r+0x2e>
   daf02:	2a09      	cmp	r2, #9
   daf04:	d213      	bcs.n	daf2e <_strtod_r+0x4e>
   daf06:	2a00      	cmp	r2, #0
   daf08:	f000 81ac 	beq.w	db264 <_strtod_r+0x384>
   daf0c:	e012      	b.n	daf34 <_strtod_r+0x54>
   daf0e:	2a2b      	cmp	r2, #43	; 0x2b
   daf10:	d004      	beq.n	daf1c <_strtod_r+0x3c>
   daf12:	2a2d      	cmp	r2, #45	; 0x2d
   daf14:	d004      	beq.n	daf20 <_strtod_r+0x40>
   daf16:	2a20      	cmp	r2, #32
   daf18:	d10c      	bne.n	daf34 <_strtod_r+0x54>
   daf1a:	e008      	b.n	daf2e <_strtod_r+0x4e>
   daf1c:	2200      	movs	r2, #0
   daf1e:	e000      	b.n	daf22 <_strtod_r+0x42>
   daf20:	2201      	movs	r2, #1
   daf22:	920c      	str	r2, [sp, #48]	; 0x30
   daf24:	1c5a      	adds	r2, r3, #1
   daf26:	9217      	str	r2, [sp, #92]	; 0x5c
   daf28:	785b      	ldrb	r3, [r3, #1]
   daf2a:	b92b      	cbnz	r3, daf38 <_strtod_r+0x58>
   daf2c:	e19a      	b.n	db264 <_strtod_r+0x384>
   daf2e:	3301      	adds	r3, #1
   daf30:	9317      	str	r3, [sp, #92]	; 0x5c
   daf32:	e7e2      	b.n	daefa <_strtod_r+0x1a>
   daf34:	2300      	movs	r3, #0
   daf36:	930c      	str	r3, [sp, #48]	; 0x30
   daf38:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   daf3a:	782b      	ldrb	r3, [r5, #0]
   daf3c:	2b30      	cmp	r3, #48	; 0x30
   daf3e:	d15c      	bne.n	daffa <_strtod_r+0x11a>
   daf40:	786b      	ldrb	r3, [r5, #1]
   daf42:	2b58      	cmp	r3, #88	; 0x58
   daf44:	d001      	beq.n	daf4a <_strtod_r+0x6a>
   daf46:	2b78      	cmp	r3, #120	; 0x78
   daf48:	d14c      	bne.n	dafe4 <_strtod_r+0x104>
   daf4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daf4c:	9301      	str	r3, [sp, #4]
   daf4e:	ab18      	add	r3, sp, #96	; 0x60
   daf50:	9300      	str	r3, [sp, #0]
   daf52:	4aa9      	ldr	r2, [pc, #676]	; (db1f8 <_strtod_r+0x318>)
   daf54:	9802      	ldr	r0, [sp, #8]
   daf56:	ab19      	add	r3, sp, #100	; 0x64
   daf58:	a917      	add	r1, sp, #92	; 0x5c
   daf5a:	f001 f970 	bl	dc23e <__gethex>
   daf5e:	f010 0607 	ands.w	r6, r0, #7
   daf62:	4604      	mov	r4, r0
   daf64:	f000 8587 	beq.w	dba76 <_strtod_r+0xb96>
   daf68:	2e06      	cmp	r6, #6
   daf6a:	d105      	bne.n	daf78 <_strtod_r+0x98>
   daf6c:	3501      	adds	r5, #1
   daf6e:	2300      	movs	r3, #0
   daf70:	9517      	str	r5, [sp, #92]	; 0x5c
   daf72:	930c      	str	r3, [sp, #48]	; 0x30
   daf74:	f000 bd7f 	b.w	dba76 <_strtod_r+0xb96>
   daf78:	9a18      	ldr	r2, [sp, #96]	; 0x60
   daf7a:	b13a      	cbz	r2, daf8c <_strtod_r+0xac>
   daf7c:	2135      	movs	r1, #53	; 0x35
   daf7e:	a81a      	add	r0, sp, #104	; 0x68
   daf80:	f002 f8c7 	bl	dd112 <__copybits>
   daf84:	9918      	ldr	r1, [sp, #96]	; 0x60
   daf86:	9802      	ldr	r0, [sp, #8]
   daf88:	f001 fd45 	bl	dca16 <_Bfree>
   daf8c:	2e06      	cmp	r6, #6
   daf8e:	d822      	bhi.n	dafd6 <_strtod_r+0xf6>
   daf90:	e8df f006 	tbb	[pc, r6]
   daf94:	18080d04 	.word	0x18080d04
   daf98:	0d1d      	.short	0x0d1d
   daf9a:	04          	.byte	0x04
   daf9b:	00          	.byte	0x00
   daf9c:	f04f 0b00 	mov.w	fp, #0
   dafa0:	46da      	mov	sl, fp
   dafa2:	e018      	b.n	dafd6 <_strtod_r+0xf6>
   dafa4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dafa8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dafac:	e013      	b.n	dafd6 <_strtod_r+0xf6>
   dafae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dafb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dafb2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dafb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dafba:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dafbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dafc2:	e008      	b.n	dafd6 <_strtod_r+0xf6>
   dafc4:	f8df b234 	ldr.w	fp, [pc, #564]	; db1fc <_strtod_r+0x31c>
   dafc8:	f04f 0a00 	mov.w	sl, #0
   dafcc:	e003      	b.n	dafd6 <_strtod_r+0xf6>
   dafce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dafd2:	f04f 3aff 	mov.w	sl, #4294967295
   dafd6:	0721      	lsls	r1, r4, #28
   dafd8:	f140 854d 	bpl.w	dba76 <_strtod_r+0xb96>
   dafdc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dafe0:	f000 bd49 	b.w	dba76 <_strtod_r+0xb96>
   dafe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dafe6:	1c5a      	adds	r2, r3, #1
   dafe8:	9217      	str	r2, [sp, #92]	; 0x5c
   dafea:	785b      	ldrb	r3, [r3, #1]
   dafec:	2b30      	cmp	r3, #48	; 0x30
   dafee:	d0f9      	beq.n	dafe4 <_strtod_r+0x104>
   daff0:	2b00      	cmp	r3, #0
   daff2:	f000 8540 	beq.w	dba76 <_strtod_r+0xb96>
   daff6:	2301      	movs	r3, #1
   daff8:	e000      	b.n	daffc <_strtod_r+0x11c>
   daffa:	2300      	movs	r3, #0
   daffc:	f04f 0800 	mov.w	r8, #0
   db000:	9306      	str	r3, [sp, #24]
   db002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db004:	9307      	str	r3, [sp, #28]
   db006:	f8cd 8014 	str.w	r8, [sp, #20]
   db00a:	f8cd 8010 	str.w	r8, [sp, #16]
   db00e:	220a      	movs	r2, #10
   db010:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   db012:	782e      	ldrb	r6, [r5, #0]
   db014:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db018:	b2d9      	uxtb	r1, r3
   db01a:	2909      	cmp	r1, #9
   db01c:	d80e      	bhi.n	db03c <_strtod_r+0x15c>
   db01e:	9904      	ldr	r1, [sp, #16]
   db020:	2908      	cmp	r1, #8
   db022:	bfdd      	ittte	le
   db024:	9905      	ldrle	r1, [sp, #20]
   db026:	fb02 3301 	mlale	r3, r2, r1, r3
   db02a:	9305      	strle	r3, [sp, #20]
   db02c:	fb02 3808 	mlagt	r8, r2, r8, r3
   db030:	9b04      	ldr	r3, [sp, #16]
   db032:	3501      	adds	r5, #1
   db034:	3301      	adds	r3, #1
   db036:	9304      	str	r3, [sp, #16]
   db038:	9517      	str	r5, [sp, #92]	; 0x5c
   db03a:	e7e9      	b.n	db010 <_strtod_r+0x130>
   db03c:	9802      	ldr	r0, [sp, #8]
   db03e:	f7ff f95d 	bl	da2fc <_localeconv_r>
   db042:	6807      	ldr	r7, [r0, #0]
   db044:	9802      	ldr	r0, [sp, #8]
   db046:	f7ff f959 	bl	da2fc <_localeconv_r>
   db04a:	6800      	ldr	r0, [r0, #0]
   db04c:	f7ff ff02 	bl	dae54 <strlen>
   db050:	4639      	mov	r1, r7
   db052:	4602      	mov	r2, r0
   db054:	4628      	mov	r0, r5
   db056:	f7ff ff05 	bl	dae64 <strncmp>
   db05a:	4607      	mov	r7, r0
   db05c:	b128      	cbz	r0, db06a <_strtod_r+0x18a>
   db05e:	2000      	movs	r0, #0
   db060:	4633      	mov	r3, r6
   db062:	9d04      	ldr	r5, [sp, #16]
   db064:	4602      	mov	r2, r0
   db066:	4601      	mov	r1, r0
   db068:	e057      	b.n	db11a <_strtod_r+0x23a>
   db06a:	9802      	ldr	r0, [sp, #8]
   db06c:	f7ff f946 	bl	da2fc <_localeconv_r>
   db070:	6800      	ldr	r0, [r0, #0]
   db072:	f7ff feef 	bl	dae54 <strlen>
   db076:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db078:	181a      	adds	r2, r3, r0
   db07a:	9217      	str	r2, [sp, #92]	; 0x5c
   db07c:	9a04      	ldr	r2, [sp, #16]
   db07e:	5c1b      	ldrb	r3, [r3, r0]
   db080:	2a00      	cmp	r2, #0
   db082:	d142      	bne.n	db10a <_strtod_r+0x22a>
   db084:	4610      	mov	r0, r2
   db086:	2b30      	cmp	r3, #48	; 0x30
   db088:	d105      	bne.n	db096 <_strtod_r+0x1b6>
   db08a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db08c:	1c5a      	adds	r2, r3, #1
   db08e:	9217      	str	r2, [sp, #92]	; 0x5c
   db090:	3001      	adds	r0, #1
   db092:	785b      	ldrb	r3, [r3, #1]
   db094:	e7f7      	b.n	db086 <_strtod_r+0x1a6>
   db096:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db09a:	2a08      	cmp	r2, #8
   db09c:	d843      	bhi.n	db126 <_strtod_r+0x246>
   db09e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   db0a0:	9207      	str	r2, [sp, #28]
   db0a2:	4602      	mov	r2, r0
   db0a4:	2000      	movs	r0, #0
   db0a6:	4605      	mov	r5, r0
   db0a8:	3b30      	subs	r3, #48	; 0x30
   db0aa:	f100 0101 	add.w	r1, r0, #1
   db0ae:	d026      	beq.n	db0fe <_strtod_r+0x21e>
   db0b0:	440a      	add	r2, r1
   db0b2:	eb05 0c00 	add.w	ip, r5, r0
   db0b6:	4629      	mov	r1, r5
   db0b8:	260a      	movs	r6, #10
   db0ba:	4561      	cmp	r1, ip
   db0bc:	d00e      	beq.n	db0dc <_strtod_r+0x1fc>
   db0be:	3101      	adds	r1, #1
   db0c0:	f101 3eff 	add.w	lr, r1, #4294967295
   db0c4:	f1be 0f08 	cmp.w	lr, #8
   db0c8:	dc03      	bgt.n	db0d2 <_strtod_r+0x1f2>
   db0ca:	9f05      	ldr	r7, [sp, #20]
   db0cc:	4377      	muls	r7, r6
   db0ce:	9705      	str	r7, [sp, #20]
   db0d0:	e7f3      	b.n	db0ba <_strtod_r+0x1da>
   db0d2:	2910      	cmp	r1, #16
   db0d4:	bfd8      	it	le
   db0d6:	fb06 f808 	mulle.w	r8, r6, r8
   db0da:	e7ee      	b.n	db0ba <_strtod_r+0x1da>
   db0dc:	4428      	add	r0, r5
   db0de:	2808      	cmp	r0, #8
   db0e0:	f100 0501 	add.w	r5, r0, #1
   db0e4:	dc05      	bgt.n	db0f2 <_strtod_r+0x212>
   db0e6:	9805      	ldr	r0, [sp, #20]
   db0e8:	210a      	movs	r1, #10
   db0ea:	fb01 3300 	mla	r3, r1, r0, r3
   db0ee:	9305      	str	r3, [sp, #20]
   db0f0:	e004      	b.n	db0fc <_strtod_r+0x21c>
   db0f2:	2d10      	cmp	r5, #16
   db0f4:	bfdc      	itt	le
   db0f6:	210a      	movle	r1, #10
   db0f8:	fb01 3808 	mlale	r8, r1, r8, r3
   db0fc:	2100      	movs	r1, #0
   db0fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db100:	1c58      	adds	r0, r3, #1
   db102:	9017      	str	r0, [sp, #92]	; 0x5c
   db104:	785b      	ldrb	r3, [r3, #1]
   db106:	4608      	mov	r0, r1
   db108:	e002      	b.n	db110 <_strtod_r+0x230>
   db10a:	9d04      	ldr	r5, [sp, #16]
   db10c:	4638      	mov	r0, r7
   db10e:	463a      	mov	r2, r7
   db110:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db114:	2909      	cmp	r1, #9
   db116:	d9c7      	bls.n	db0a8 <_strtod_r+0x1c8>
   db118:	2101      	movs	r1, #1
   db11a:	2b65      	cmp	r3, #101	; 0x65
   db11c:	d001      	beq.n	db122 <_strtod_r+0x242>
   db11e:	2b45      	cmp	r3, #69	; 0x45
   db120:	d151      	bne.n	db1c6 <_strtod_r+0x2e6>
   db122:	b96d      	cbnz	r5, db140 <_strtod_r+0x260>
   db124:	e004      	b.n	db130 <_strtod_r+0x250>
   db126:	2b65      	cmp	r3, #101	; 0x65
   db128:	f040 84b3 	bne.w	dba92 <_strtod_r+0xbb2>
   db12c:	2200      	movs	r2, #0
   db12e:	2101      	movs	r1, #1
   db130:	b928      	cbnz	r0, db13e <_strtod_r+0x25e>
   db132:	9b06      	ldr	r3, [sp, #24]
   db134:	2b00      	cmp	r3, #0
   db136:	f000 8095 	beq.w	db264 <_strtod_r+0x384>
   db13a:	4605      	mov	r5, r0
   db13c:	e000      	b.n	db140 <_strtod_r+0x260>
   db13e:	2500      	movs	r5, #0
   db140:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   db142:	1c63      	adds	r3, r4, #1
   db144:	9317      	str	r3, [sp, #92]	; 0x5c
   db146:	7863      	ldrb	r3, [r4, #1]
   db148:	2b2b      	cmp	r3, #43	; 0x2b
   db14a:	d006      	beq.n	db15a <_strtod_r+0x27a>
   db14c:	2b2d      	cmp	r3, #45	; 0x2d
   db14e:	d002      	beq.n	db156 <_strtod_r+0x276>
   db150:	2600      	movs	r6, #0
   db152:	9603      	str	r6, [sp, #12]
   db154:	e006      	b.n	db164 <_strtod_r+0x284>
   db156:	2301      	movs	r3, #1
   db158:	e000      	b.n	db15c <_strtod_r+0x27c>
   db15a:	2300      	movs	r3, #0
   db15c:	9303      	str	r3, [sp, #12]
   db15e:	1ca3      	adds	r3, r4, #2
   db160:	9317      	str	r3, [sp, #92]	; 0x5c
   db162:	78a3      	ldrb	r3, [r4, #2]
   db164:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db168:	2e09      	cmp	r6, #9
   db16a:	d82b      	bhi.n	db1c4 <_strtod_r+0x2e4>
   db16c:	2b30      	cmp	r3, #48	; 0x30
   db16e:	d104      	bne.n	db17a <_strtod_r+0x29a>
   db170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db172:	1c5e      	adds	r6, r3, #1
   db174:	9617      	str	r6, [sp, #92]	; 0x5c
   db176:	785b      	ldrb	r3, [r3, #1]
   db178:	e7f8      	b.n	db16c <_strtod_r+0x28c>
   db17a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   db17e:	2e08      	cmp	r6, #8
   db180:	d821      	bhi.n	db1c6 <_strtod_r+0x2e6>
   db182:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db188:	f04f 0c0a 	mov.w	ip, #10
   db18c:	461f      	mov	r7, r3
   db18e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db190:	1c5e      	adds	r6, r3, #1
   db192:	9617      	str	r6, [sp, #92]	; 0x5c
   db194:	785b      	ldrb	r3, [r3, #1]
   db196:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db19a:	f1b9 0f09 	cmp.w	r9, #9
   db19e:	d804      	bhi.n	db1aa <_strtod_r+0x2ca>
   db1a0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db1a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db1a8:	e7f1      	b.n	db18e <_strtod_r+0x2ae>
   db1aa:	1bf6      	subs	r6, r6, r7
   db1ac:	2e08      	cmp	r6, #8
   db1ae:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db1b2:	dc02      	bgt.n	db1ba <_strtod_r+0x2da>
   db1b4:	45f1      	cmp	r9, lr
   db1b6:	bfa8      	it	ge
   db1b8:	46f1      	movge	r9, lr
   db1ba:	9e03      	ldr	r6, [sp, #12]
   db1bc:	b12e      	cbz	r6, db1ca <_strtod_r+0x2ea>
   db1be:	f1c9 0900 	rsb	r9, r9, #0
   db1c2:	e002      	b.n	db1ca <_strtod_r+0x2ea>
   db1c4:	9417      	str	r4, [sp, #92]	; 0x5c
   db1c6:	f04f 0900 	mov.w	r9, #0
   db1ca:	2d00      	cmp	r5, #0
   db1cc:	d153      	bne.n	db276 <_strtod_r+0x396>
   db1ce:	2800      	cmp	r0, #0
   db1d0:	f040 8451 	bne.w	dba76 <_strtod_r+0xb96>
   db1d4:	9a06      	ldr	r2, [sp, #24]
   db1d6:	2a00      	cmp	r2, #0
   db1d8:	f040 844d 	bne.w	dba76 <_strtod_r+0xb96>
   db1dc:	2900      	cmp	r1, #0
   db1de:	d141      	bne.n	db264 <_strtod_r+0x384>
   db1e0:	2b4e      	cmp	r3, #78	; 0x4e
   db1e2:	d020      	beq.n	db226 <_strtod_r+0x346>
   db1e4:	dc02      	bgt.n	db1ec <_strtod_r+0x30c>
   db1e6:	2b49      	cmp	r3, #73	; 0x49
   db1e8:	d00a      	beq.n	db200 <_strtod_r+0x320>
   db1ea:	e03b      	b.n	db264 <_strtod_r+0x384>
   db1ec:	2b69      	cmp	r3, #105	; 0x69
   db1ee:	d007      	beq.n	db200 <_strtod_r+0x320>
   db1f0:	2b6e      	cmp	r3, #110	; 0x6e
   db1f2:	d018      	beq.n	db226 <_strtod_r+0x346>
   db1f4:	e036      	b.n	db264 <_strtod_r+0x384>
   db1f6:	bf00      	nop
   db1f8:	000de154 	.word	0x000de154
   db1fc:	7ff00000 	.word	0x7ff00000
   db200:	49a8      	ldr	r1, [pc, #672]	; (db4a4 <_strtod_r+0x5c4>)
   db202:	a817      	add	r0, sp, #92	; 0x5c
   db204:	f001 fa4c 	bl	dc6a0 <__match>
   db208:	b360      	cbz	r0, db264 <_strtod_r+0x384>
   db20a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db20c:	49a6      	ldr	r1, [pc, #664]	; (db4a8 <_strtod_r+0x5c8>)
   db20e:	3b01      	subs	r3, #1
   db210:	a817      	add	r0, sp, #92	; 0x5c
   db212:	9317      	str	r3, [sp, #92]	; 0x5c
   db214:	f001 fa44 	bl	dc6a0 <__match>
   db218:	b910      	cbnz	r0, db220 <_strtod_r+0x340>
   db21a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db21c:	3301      	adds	r3, #1
   db21e:	9317      	str	r3, [sp, #92]	; 0x5c
   db220:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db4c4 <_strtod_r+0x5e4>
   db224:	e01a      	b.n	db25c <_strtod_r+0x37c>
   db226:	49a1      	ldr	r1, [pc, #644]	; (db4ac <_strtod_r+0x5cc>)
   db228:	a817      	add	r0, sp, #92	; 0x5c
   db22a:	f001 fa39 	bl	dc6a0 <__match>
   db22e:	b1c8      	cbz	r0, db264 <_strtod_r+0x384>
   db230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db232:	781b      	ldrb	r3, [r3, #0]
   db234:	2b28      	cmp	r3, #40	; 0x28
   db236:	d10f      	bne.n	db258 <_strtod_r+0x378>
   db238:	aa1a      	add	r2, sp, #104	; 0x68
   db23a:	499d      	ldr	r1, [pc, #628]	; (db4b0 <_strtod_r+0x5d0>)
   db23c:	a817      	add	r0, sp, #92	; 0x5c
   db23e:	f001 fa42 	bl	dc6c6 <__hexnan>
   db242:	2805      	cmp	r0, #5
   db244:	d108      	bne.n	db258 <_strtod_r+0x378>
   db246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db248:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db24c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db250:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db254:	f000 bc0f 	b.w	dba76 <_strtod_r+0xb96>
   db258:	f8df b26c 	ldr.w	fp, [pc, #620]	; db4c8 <_strtod_r+0x5e8>
   db25c:	f04f 0a00 	mov.w	sl, #0
   db260:	f000 bc09 	b.w	dba76 <_strtod_r+0xb96>
   db264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db266:	9417      	str	r4, [sp, #92]	; 0x5c
   db268:	2b00      	cmp	r3, #0
   db26a:	f000 840f 	beq.w	dba8c <_strtod_r+0xbac>
   db26e:	2300      	movs	r3, #0
   db270:	930c      	str	r3, [sp, #48]	; 0x30
   db272:	f000 bc02 	b.w	dba7a <_strtod_r+0xb9a>
   db276:	9b04      	ldr	r3, [sp, #16]
   db278:	9805      	ldr	r0, [sp, #20]
   db27a:	2b00      	cmp	r3, #0
   db27c:	bf08      	it	eq
   db27e:	462b      	moveq	r3, r5
   db280:	2d10      	cmp	r5, #16
   db282:	462c      	mov	r4, r5
   db284:	ebc2 0909 	rsb	r9, r2, r9
   db288:	bfa8      	it	ge
   db28a:	2410      	movge	r4, #16
   db28c:	9304      	str	r3, [sp, #16]
   db28e:	f7fe fb41 	bl	d9914 <__aeabi_ui2d>
   db292:	2c09      	cmp	r4, #9
   db294:	4682      	mov	sl, r0
   db296:	468b      	mov	fp, r1
   db298:	dd13      	ble.n	db2c2 <_strtod_r+0x3e2>
   db29a:	4b86      	ldr	r3, [pc, #536]	; (db4b4 <_strtod_r+0x5d4>)
   db29c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db2a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db2a4:	f7fe fbac 	bl	d9a00 <__aeabi_dmul>
   db2a8:	4606      	mov	r6, r0
   db2aa:	4640      	mov	r0, r8
   db2ac:	460f      	mov	r7, r1
   db2ae:	f7fe fb31 	bl	d9914 <__aeabi_ui2d>
   db2b2:	4602      	mov	r2, r0
   db2b4:	460b      	mov	r3, r1
   db2b6:	4630      	mov	r0, r6
   db2b8:	4639      	mov	r1, r7
   db2ba:	f7fe f9ef 	bl	d969c <__adddf3>
   db2be:	4682      	mov	sl, r0
   db2c0:	468b      	mov	fp, r1
   db2c2:	2d0f      	cmp	r5, #15
   db2c4:	dc36      	bgt.n	db334 <_strtod_r+0x454>
   db2c6:	f1b9 0f00 	cmp.w	r9, #0
   db2ca:	f000 83d4 	beq.w	dba76 <_strtod_r+0xb96>
   db2ce:	dd24      	ble.n	db31a <_strtod_r+0x43a>
   db2d0:	f1b9 0f16 	cmp.w	r9, #22
   db2d4:	dc07      	bgt.n	db2e6 <_strtod_r+0x406>
   db2d6:	4d77      	ldr	r5, [pc, #476]	; (db4b4 <_strtod_r+0x5d4>)
   db2d8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db2dc:	4652      	mov	r2, sl
   db2de:	465b      	mov	r3, fp
   db2e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   db2e4:	e014      	b.n	db310 <_strtod_r+0x430>
   db2e6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db2ea:	4599      	cmp	r9, r3
   db2ec:	dc22      	bgt.n	db334 <_strtod_r+0x454>
   db2ee:	4c71      	ldr	r4, [pc, #452]	; (db4b4 <_strtod_r+0x5d4>)
   db2f0:	f1c5 050f 	rsb	r5, r5, #15
   db2f4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db2f8:	ebc5 0509 	rsb	r5, r5, r9
   db2fc:	4652      	mov	r2, sl
   db2fe:	465b      	mov	r3, fp
   db300:	e9d1 0100 	ldrd	r0, r1, [r1]
   db304:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db308:	f7fe fb7a 	bl	d9a00 <__aeabi_dmul>
   db30c:	e9d4 2300 	ldrd	r2, r3, [r4]
   db310:	f7fe fb76 	bl	d9a00 <__aeabi_dmul>
   db314:	4682      	mov	sl, r0
   db316:	468b      	mov	fp, r1
   db318:	e3ad      	b.n	dba76 <_strtod_r+0xb96>
   db31a:	f119 0f16 	cmn.w	r9, #22
   db31e:	db09      	blt.n	db334 <_strtod_r+0x454>
   db320:	4d64      	ldr	r5, [pc, #400]	; (db4b4 <_strtod_r+0x5d4>)
   db322:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db326:	e9d9 2300 	ldrd	r2, r3, [r9]
   db32a:	4650      	mov	r0, sl
   db32c:	4659      	mov	r1, fp
   db32e:	f7fe fc91 	bl	d9c54 <__aeabi_ddiv>
   db332:	e7ef      	b.n	db314 <_strtod_r+0x434>
   db334:	1b2c      	subs	r4, r5, r4
   db336:	444c      	add	r4, r9
   db338:	2c00      	cmp	r4, #0
   db33a:	dd57      	ble.n	db3ec <_strtod_r+0x50c>
   db33c:	f014 010f 	ands.w	r1, r4, #15
   db340:	d00a      	beq.n	db358 <_strtod_r+0x478>
   db342:	4b5c      	ldr	r3, [pc, #368]	; (db4b4 <_strtod_r+0x5d4>)
   db344:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db348:	4652      	mov	r2, sl
   db34a:	465b      	mov	r3, fp
   db34c:	e9d1 0100 	ldrd	r0, r1, [r1]
   db350:	f7fe fb56 	bl	d9a00 <__aeabi_dmul>
   db354:	4682      	mov	sl, r0
   db356:	468b      	mov	fp, r1
   db358:	f034 040f 	bics.w	r4, r4, #15
   db35c:	f000 80b8 	beq.w	db4d0 <_strtod_r+0x5f0>
   db360:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db364:	dd0b      	ble.n	db37e <_strtod_r+0x49e>
   db366:	2400      	movs	r4, #0
   db368:	4625      	mov	r5, r4
   db36a:	9405      	str	r4, [sp, #20]
   db36c:	9404      	str	r4, [sp, #16]
   db36e:	9a02      	ldr	r2, [sp, #8]
   db370:	f8df b150 	ldr.w	fp, [pc, #336]	; db4c4 <_strtod_r+0x5e4>
   db374:	2322      	movs	r3, #34	; 0x22
   db376:	6013      	str	r3, [r2, #0]
   db378:	f04f 0a00 	mov.w	sl, #0
   db37c:	e187      	b.n	db68e <_strtod_r+0x7ae>
   db37e:	4e4e      	ldr	r6, [pc, #312]	; (db4b8 <_strtod_r+0x5d8>)
   db380:	2300      	movs	r3, #0
   db382:	1124      	asrs	r4, r4, #4
   db384:	4650      	mov	r0, sl
   db386:	4659      	mov	r1, fp
   db388:	4698      	mov	r8, r3
   db38a:	4637      	mov	r7, r6
   db38c:	2c01      	cmp	r4, #1
   db38e:	dd0b      	ble.n	db3a8 <_strtod_r+0x4c8>
   db390:	07e2      	lsls	r2, r4, #31
   db392:	d504      	bpl.n	db39e <_strtod_r+0x4be>
   db394:	e9d6 2300 	ldrd	r2, r3, [r6]
   db398:	f7fe fb32 	bl	d9a00 <__aeabi_dmul>
   db39c:	2301      	movs	r3, #1
   db39e:	f108 0801 	add.w	r8, r8, #1
   db3a2:	1064      	asrs	r4, r4, #1
   db3a4:	3608      	adds	r6, #8
   db3a6:	e7f1      	b.n	db38c <_strtod_r+0x4ac>
   db3a8:	b10b      	cbz	r3, db3ae <_strtod_r+0x4ce>
   db3aa:	4682      	mov	sl, r0
   db3ac:	468b      	mov	fp, r1
   db3ae:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db3b2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db3b6:	4652      	mov	r2, sl
   db3b8:	465b      	mov	r3, fp
   db3ba:	e9d7 0100 	ldrd	r0, r1, [r7]
   db3be:	f7fe fb1f 	bl	d9a00 <__aeabi_dmul>
   db3c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db3c6:	468b      	mov	fp, r1
   db3c8:	460a      	mov	r2, r1
   db3ca:	0d1b      	lsrs	r3, r3, #20
   db3cc:	493b      	ldr	r1, [pc, #236]	; (db4bc <_strtod_r+0x5dc>)
   db3ce:	051b      	lsls	r3, r3, #20
   db3d0:	428b      	cmp	r3, r1
   db3d2:	4682      	mov	sl, r0
   db3d4:	d8c7      	bhi.n	db366 <_strtod_r+0x486>
   db3d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db3da:	428b      	cmp	r3, r1
   db3dc:	bf86      	itte	hi
   db3de:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db4cc <_strtod_r+0x5ec>
   db3e2:	f04f 3aff 	movhi.w	sl, #4294967295
   db3e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db3ea:	e071      	b.n	db4d0 <_strtod_r+0x5f0>
   db3ec:	d070      	beq.n	db4d0 <_strtod_r+0x5f0>
   db3ee:	4264      	negs	r4, r4
   db3f0:	f014 020f 	ands.w	r2, r4, #15
   db3f4:	d00a      	beq.n	db40c <_strtod_r+0x52c>
   db3f6:	4b2f      	ldr	r3, [pc, #188]	; (db4b4 <_strtod_r+0x5d4>)
   db3f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db3fc:	4650      	mov	r0, sl
   db3fe:	4659      	mov	r1, fp
   db400:	e9d3 2300 	ldrd	r2, r3, [r3]
   db404:	f7fe fc26 	bl	d9c54 <__aeabi_ddiv>
   db408:	4682      	mov	sl, r0
   db40a:	468b      	mov	fp, r1
   db40c:	1124      	asrs	r4, r4, #4
   db40e:	d05f      	beq.n	db4d0 <_strtod_r+0x5f0>
   db410:	2c1f      	cmp	r4, #31
   db412:	dd04      	ble.n	db41e <_strtod_r+0x53e>
   db414:	2400      	movs	r4, #0
   db416:	4625      	mov	r5, r4
   db418:	9405      	str	r4, [sp, #20]
   db41a:	9404      	str	r4, [sp, #16]
   db41c:	e130      	b.n	db680 <_strtod_r+0x7a0>
   db41e:	f014 0f10 	tst.w	r4, #16
   db422:	bf0c      	ite	eq
   db424:	2300      	moveq	r3, #0
   db426:	236a      	movne	r3, #106	; 0x6a
   db428:	4e25      	ldr	r6, [pc, #148]	; (db4c0 <_strtod_r+0x5e0>)
   db42a:	9303      	str	r3, [sp, #12]
   db42c:	4650      	mov	r0, sl
   db42e:	4659      	mov	r1, fp
   db430:	2300      	movs	r3, #0
   db432:	2c00      	cmp	r4, #0
   db434:	dd09      	ble.n	db44a <_strtod_r+0x56a>
   db436:	07e2      	lsls	r2, r4, #31
   db438:	d504      	bpl.n	db444 <_strtod_r+0x564>
   db43a:	e9d6 2300 	ldrd	r2, r3, [r6]
   db43e:	f7fe fadf 	bl	d9a00 <__aeabi_dmul>
   db442:	2301      	movs	r3, #1
   db444:	1064      	asrs	r4, r4, #1
   db446:	3608      	adds	r6, #8
   db448:	e7f3      	b.n	db432 <_strtod_r+0x552>
   db44a:	b10b      	cbz	r3, db450 <_strtod_r+0x570>
   db44c:	4682      	mov	sl, r0
   db44e:	468b      	mov	fp, r1
   db450:	9b03      	ldr	r3, [sp, #12]
   db452:	b1eb      	cbz	r3, db490 <_strtod_r+0x5b0>
   db454:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db45c:	2b00      	cmp	r3, #0
   db45e:	4659      	mov	r1, fp
   db460:	dd16      	ble.n	db490 <_strtod_r+0x5b0>
   db462:	2b1f      	cmp	r3, #31
   db464:	dd0e      	ble.n	db484 <_strtod_r+0x5a4>
   db466:	2b34      	cmp	r3, #52	; 0x34
   db468:	bfde      	ittt	le
   db46a:	3b20      	suble	r3, #32
   db46c:	f04f 32ff 	movle.w	r2, #4294967295
   db470:	fa02 f303 	lslle.w	r3, r2, r3
   db474:	f04f 0a00 	mov.w	sl, #0
   db478:	bfcc      	ite	gt
   db47a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db47e:	ea03 0b01 	andle.w	fp, r3, r1
   db482:	e005      	b.n	db490 <_strtod_r+0x5b0>
   db484:	f04f 32ff 	mov.w	r2, #4294967295
   db488:	fa02 f303 	lsl.w	r3, r2, r3
   db48c:	ea03 0a0a 	and.w	sl, r3, sl
   db490:	2200      	movs	r2, #0
   db492:	2300      	movs	r3, #0
   db494:	4650      	mov	r0, sl
   db496:	4659      	mov	r1, fp
   db498:	f7fe fd1a 	bl	d9ed0 <__aeabi_dcmpeq>
   db49c:	2800      	cmp	r0, #0
   db49e:	d1b9      	bne.n	db414 <_strtod_r+0x534>
   db4a0:	e018      	b.n	db4d4 <_strtod_r+0x5f4>
   db4a2:	bf00      	nop
   db4a4:	000de17c 	.word	0x000de17c
   db4a8:	000de17f 	.word	0x000de17f
   db4ac:	000de1b9 	.word	0x000de1b9
   db4b0:	000de168 	.word	0x000de168
   db4b4:	000de418 	.word	0x000de418
   db4b8:	000de4e0 	.word	0x000de4e0
   db4bc:	7ca00000 	.word	0x7ca00000
   db4c0:	000de188 	.word	0x000de188
   db4c4:	7ff00000 	.word	0x7ff00000
   db4c8:	fff80000 	.word	0xfff80000
   db4cc:	7fefffff 	.word	0x7fefffff
   db4d0:	2300      	movs	r3, #0
   db4d2:	9303      	str	r3, [sp, #12]
   db4d4:	9b05      	ldr	r3, [sp, #20]
   db4d6:	9300      	str	r3, [sp, #0]
   db4d8:	9a04      	ldr	r2, [sp, #16]
   db4da:	9907      	ldr	r1, [sp, #28]
   db4dc:	9802      	ldr	r0, [sp, #8]
   db4de:	462b      	mov	r3, r5
   db4e0:	f001 faeb 	bl	dcaba <__s2b>
   db4e4:	9005      	str	r0, [sp, #20]
   db4e6:	2800      	cmp	r0, #0
   db4e8:	f43f af3d 	beq.w	db366 <_strtod_r+0x486>
   db4ec:	f1b9 0f00 	cmp.w	r9, #0
   db4f0:	f1c9 0300 	rsb	r3, r9, #0
   db4f4:	bfa8      	it	ge
   db4f6:	2300      	movge	r3, #0
   db4f8:	930d      	str	r3, [sp, #52]	; 0x34
   db4fa:	2400      	movs	r4, #0
   db4fc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db500:	9312      	str	r3, [sp, #72]	; 0x48
   db502:	4625      	mov	r5, r4
   db504:	9b05      	ldr	r3, [sp, #20]
   db506:	9802      	ldr	r0, [sp, #8]
   db508:	6859      	ldr	r1, [r3, #4]
   db50a:	f001 fa4f 	bl	dc9ac <_Balloc>
   db50e:	9004      	str	r0, [sp, #16]
   db510:	2800      	cmp	r0, #0
   db512:	f43f af2c 	beq.w	db36e <_strtod_r+0x48e>
   db516:	9b05      	ldr	r3, [sp, #20]
   db518:	691a      	ldr	r2, [r3, #16]
   db51a:	3202      	adds	r2, #2
   db51c:	f103 010c 	add.w	r1, r3, #12
   db520:	0092      	lsls	r2, r2, #2
   db522:	300c      	adds	r0, #12
   db524:	f7fe fefd 	bl	da322 <memcpy>
   db528:	aa1a      	add	r2, sp, #104	; 0x68
   db52a:	a919      	add	r1, sp, #100	; 0x64
   db52c:	ec4b ab10 	vmov	d0, sl, fp
   db530:	9802      	ldr	r0, [sp, #8]
   db532:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db536:	f001 fd74 	bl	dd022 <__d2b>
   db53a:	9018      	str	r0, [sp, #96]	; 0x60
   db53c:	2800      	cmp	r0, #0
   db53e:	f43f af16 	beq.w	db36e <_strtod_r+0x48e>
   db542:	2101      	movs	r1, #1
   db544:	9802      	ldr	r0, [sp, #8]
   db546:	f001 fb43 	bl	dcbd0 <__i2b>
   db54a:	4605      	mov	r5, r0
   db54c:	2800      	cmp	r0, #0
   db54e:	f43f af0e 	beq.w	db36e <_strtod_r+0x48e>
   db552:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db554:	9903      	ldr	r1, [sp, #12]
   db556:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db558:	2b00      	cmp	r3, #0
   db55a:	bfad      	iteet	ge
   db55c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db55e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db560:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db564:	eb02 0803 	addge.w	r8, r2, r3
   db568:	bfb8      	it	lt
   db56a:	1ad2      	sublt	r2, r2, r3
   db56c:	eba3 0301 	sub.w	r3, r3, r1
   db570:	4433      	add	r3, r6
   db572:	49b5      	ldr	r1, [pc, #724]	; (db848 <_strtod_r+0x968>)
   db574:	bfa8      	it	ge
   db576:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db578:	3b01      	subs	r3, #1
   db57a:	428b      	cmp	r3, r1
   db57c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db580:	f280 808a 	bge.w	db698 <_strtod_r+0x7b8>
   db584:	1ac9      	subs	r1, r1, r3
   db586:	291f      	cmp	r1, #31
   db588:	bfc8      	it	gt
   db58a:	4fb0      	ldrgt	r7, [pc, #704]	; (db84c <_strtod_r+0x96c>)
   db58c:	f04f 0901 	mov.w	r9, #1
   db590:	bfd4      	ite	le
   db592:	fa09 f301 	lslle.w	r3, r9, r1
   db596:	1aff      	subgt	r7, r7, r3
   db598:	eba6 0601 	sub.w	r6, r6, r1
   db59c:	bfd9      	ittee	le
   db59e:	9306      	strle	r3, [sp, #24]
   db5a0:	2700      	movle	r7, #0
   db5a2:	fa09 f707 	lslgt.w	r7, r9, r7
   db5a6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db5aa:	eb08 0906 	add.w	r9, r8, r6
   db5ae:	9b03      	ldr	r3, [sp, #12]
   db5b0:	45c8      	cmp	r8, r9
   db5b2:	4416      	add	r6, r2
   db5b4:	441e      	add	r6, r3
   db5b6:	4643      	mov	r3, r8
   db5b8:	bfa8      	it	ge
   db5ba:	464b      	movge	r3, r9
   db5bc:	42b3      	cmp	r3, r6
   db5be:	bfa8      	it	ge
   db5c0:	4633      	movge	r3, r6
   db5c2:	2b00      	cmp	r3, #0
   db5c4:	bfc2      	ittt	gt
   db5c6:	ebc3 0909 	rsbgt	r9, r3, r9
   db5ca:	1af6      	subgt	r6, r6, r3
   db5cc:	ebc3 0808 	rsbgt	r8, r3, r8
   db5d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db5d2:	2b00      	cmp	r3, #0
   db5d4:	d164      	bne.n	db6a0 <_strtod_r+0x7c0>
   db5d6:	f1b9 0f00 	cmp.w	r9, #0
   db5da:	dc7a      	bgt.n	db6d2 <_strtod_r+0x7f2>
   db5dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db5de:	2b00      	cmp	r3, #0
   db5e0:	f040 8081 	bne.w	db6e6 <_strtod_r+0x806>
   db5e4:	2e00      	cmp	r6, #0
   db5e6:	f300 8088 	bgt.w	db6fa <_strtod_r+0x81a>
   db5ea:	f1b8 0f00 	cmp.w	r8, #0
   db5ee:	f300 808e 	bgt.w	db70e <_strtod_r+0x82e>
   db5f2:	9a04      	ldr	r2, [sp, #16]
   db5f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   db5f6:	9802      	ldr	r0, [sp, #8]
   db5f8:	f001 fc3f 	bl	dce7a <__mdiff>
   db5fc:	4604      	mov	r4, r0
   db5fe:	2800      	cmp	r0, #0
   db600:	f43f aeb5 	beq.w	db36e <_strtod_r+0x48e>
   db604:	68c3      	ldr	r3, [r0, #12]
   db606:	9307      	str	r3, [sp, #28]
   db608:	2300      	movs	r3, #0
   db60a:	60c3      	str	r3, [r0, #12]
   db60c:	4629      	mov	r1, r5
   db60e:	f001 fc18 	bl	dce42 <__mcmp>
   db612:	2800      	cmp	r0, #0
   db614:	f280 8089 	bge.w	db72a <_strtod_r+0x84a>
   db618:	9b07      	ldr	r3, [sp, #28]
   db61a:	2b00      	cmp	r3, #0
   db61c:	f040 8204 	bne.w	dba28 <_strtod_r+0xb48>
   db620:	f1ba 0f00 	cmp.w	sl, #0
   db624:	f040 8200 	bne.w	dba28 <_strtod_r+0xb48>
   db628:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db62c:	2b00      	cmp	r3, #0
   db62e:	f040 81fb 	bne.w	dba28 <_strtod_r+0xb48>
   db632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db636:	0d1b      	lsrs	r3, r3, #20
   db638:	051b      	lsls	r3, r3, #20
   db63a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db63e:	f240 81f3 	bls.w	dba28 <_strtod_r+0xb48>
   db642:	6963      	ldr	r3, [r4, #20]
   db644:	2b00      	cmp	r3, #0
   db646:	d06c      	beq.n	db722 <_strtod_r+0x842>
   db648:	4621      	mov	r1, r4
   db64a:	2201      	movs	r2, #1
   db64c:	9802      	ldr	r0, [sp, #8]
   db64e:	f001 fba7 	bl	dcda0 <__lshift>
   db652:	4629      	mov	r1, r5
   db654:	4604      	mov	r4, r0
   db656:	f001 fbf4 	bl	dce42 <__mcmp>
   db65a:	2800      	cmp	r0, #0
   db65c:	f340 81e4 	ble.w	dba28 <_strtod_r+0xb48>
   db660:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db664:	9a03      	ldr	r2, [sp, #12]
   db666:	0d1b      	lsrs	r3, r3, #20
   db668:	051b      	lsls	r3, r3, #20
   db66a:	2a00      	cmp	r2, #0
   db66c:	f000 808c 	beq.w	db788 <_strtod_r+0x8a8>
   db670:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db674:	f300 8088 	bgt.w	db788 <_strtod_r+0x8a8>
   db678:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db67c:	f300 81d6 	bgt.w	dba2c <_strtod_r+0xb4c>
   db680:	9a02      	ldr	r2, [sp, #8]
   db682:	2322      	movs	r3, #34	; 0x22
   db684:	f04f 0a00 	mov.w	sl, #0
   db688:	f04f 0b00 	mov.w	fp, #0
   db68c:	6013      	str	r3, [r2, #0]
   db68e:	9b05      	ldr	r3, [sp, #20]
   db690:	2b00      	cmp	r3, #0
   db692:	f040 81dc 	bne.w	dba4e <_strtod_r+0xb6e>
   db696:	e1ee      	b.n	dba76 <_strtod_r+0xb96>
   db698:	2301      	movs	r3, #1
   db69a:	2700      	movs	r7, #0
   db69c:	9306      	str	r3, [sp, #24]
   db69e:	e784      	b.n	db5aa <_strtod_r+0x6ca>
   db6a0:	4629      	mov	r1, r5
   db6a2:	461a      	mov	r2, r3
   db6a4:	9802      	ldr	r0, [sp, #8]
   db6a6:	f001 fb2d 	bl	dcd04 <__pow5mult>
   db6aa:	4605      	mov	r5, r0
   db6ac:	2800      	cmp	r0, #0
   db6ae:	f43f ae5e 	beq.w	db36e <_strtod_r+0x48e>
   db6b2:	4601      	mov	r1, r0
   db6b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db6b6:	9802      	ldr	r0, [sp, #8]
   db6b8:	f001 fa93 	bl	dcbe2 <__multiply>
   db6bc:	9007      	str	r0, [sp, #28]
   db6be:	2800      	cmp	r0, #0
   db6c0:	f43f ae55 	beq.w	db36e <_strtod_r+0x48e>
   db6c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   db6c6:	9802      	ldr	r0, [sp, #8]
   db6c8:	f001 f9a5 	bl	dca16 <_Bfree>
   db6cc:	9b07      	ldr	r3, [sp, #28]
   db6ce:	9318      	str	r3, [sp, #96]	; 0x60
   db6d0:	e781      	b.n	db5d6 <_strtod_r+0x6f6>
   db6d2:	464a      	mov	r2, r9
   db6d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   db6d6:	9802      	ldr	r0, [sp, #8]
   db6d8:	f001 fb62 	bl	dcda0 <__lshift>
   db6dc:	9018      	str	r0, [sp, #96]	; 0x60
   db6de:	2800      	cmp	r0, #0
   db6e0:	f47f af7c 	bne.w	db5dc <_strtod_r+0x6fc>
   db6e4:	e643      	b.n	db36e <_strtod_r+0x48e>
   db6e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db6e8:	9904      	ldr	r1, [sp, #16]
   db6ea:	9802      	ldr	r0, [sp, #8]
   db6ec:	f001 fb0a 	bl	dcd04 <__pow5mult>
   db6f0:	9004      	str	r0, [sp, #16]
   db6f2:	2800      	cmp	r0, #0
   db6f4:	f47f af76 	bne.w	db5e4 <_strtod_r+0x704>
   db6f8:	e639      	b.n	db36e <_strtod_r+0x48e>
   db6fa:	4632      	mov	r2, r6
   db6fc:	9904      	ldr	r1, [sp, #16]
   db6fe:	9802      	ldr	r0, [sp, #8]
   db700:	f001 fb4e 	bl	dcda0 <__lshift>
   db704:	9004      	str	r0, [sp, #16]
   db706:	2800      	cmp	r0, #0
   db708:	f47f af6f 	bne.w	db5ea <_strtod_r+0x70a>
   db70c:	e62f      	b.n	db36e <_strtod_r+0x48e>
   db70e:	4629      	mov	r1, r5
   db710:	4642      	mov	r2, r8
   db712:	9802      	ldr	r0, [sp, #8]
   db714:	f001 fb44 	bl	dcda0 <__lshift>
   db718:	4605      	mov	r5, r0
   db71a:	2800      	cmp	r0, #0
   db71c:	f47f af69 	bne.w	db5f2 <_strtod_r+0x712>
   db720:	e625      	b.n	db36e <_strtod_r+0x48e>
   db722:	6923      	ldr	r3, [r4, #16]
   db724:	2b01      	cmp	r3, #1
   db726:	dc8f      	bgt.n	db648 <_strtod_r+0x768>
   db728:	e17e      	b.n	dba28 <_strtod_r+0xb48>
   db72a:	d161      	bne.n	db7f0 <_strtod_r+0x910>
   db72c:	9a07      	ldr	r2, [sp, #28]
   db72e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db732:	b322      	cbz	r2, db77e <_strtod_r+0x89e>
   db734:	4946      	ldr	r1, [pc, #280]	; (db850 <_strtod_r+0x970>)
   db736:	428b      	cmp	r3, r1
   db738:	465a      	mov	r2, fp
   db73a:	d12e      	bne.n	db79a <_strtod_r+0x8ba>
   db73c:	9b03      	ldr	r3, [sp, #12]
   db73e:	4651      	mov	r1, sl
   db740:	b163      	cbz	r3, db75c <_strtod_r+0x87c>
   db742:	4b44      	ldr	r3, [pc, #272]	; (db854 <_strtod_r+0x974>)
   db744:	4013      	ands	r3, r2
   db746:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db74a:	d807      	bhi.n	db75c <_strtod_r+0x87c>
   db74c:	0d1b      	lsrs	r3, r3, #20
   db74e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db752:	f04f 30ff 	mov.w	r0, #4294967295
   db756:	fa00 f303 	lsl.w	r3, r0, r3
   db75a:	e001      	b.n	db760 <_strtod_r+0x880>
   db75c:	f04f 33ff 	mov.w	r3, #4294967295
   db760:	428b      	cmp	r3, r1
   db762:	d11a      	bne.n	db79a <_strtod_r+0x8ba>
   db764:	493c      	ldr	r1, [pc, #240]	; (db858 <_strtod_r+0x978>)
   db766:	428a      	cmp	r2, r1
   db768:	d102      	bne.n	db770 <_strtod_r+0x890>
   db76a:	3301      	adds	r3, #1
   db76c:	f43f adff 	beq.w	db36e <_strtod_r+0x48e>
   db770:	4b38      	ldr	r3, [pc, #224]	; (db854 <_strtod_r+0x974>)
   db772:	4013      	ands	r3, r2
   db774:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db778:	f04f 0a00 	mov.w	sl, #0
   db77c:	e154      	b.n	dba28 <_strtod_r+0xb48>
   db77e:	b963      	cbnz	r3, db79a <_strtod_r+0x8ba>
   db780:	f1ba 0f00 	cmp.w	sl, #0
   db784:	d109      	bne.n	db79a <_strtod_r+0x8ba>
   db786:	e76b      	b.n	db660 <_strtod_r+0x780>
   db788:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db78c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db790:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db794:	f04f 3aff 	mov.w	sl, #4294967295
   db798:	e146      	b.n	dba28 <_strtod_r+0xb48>
   db79a:	b117      	cbz	r7, db7a2 <_strtod_r+0x8c2>
   db79c:	ea17 0f0b 	tst.w	r7, fp
   db7a0:	e002      	b.n	db7a8 <_strtod_r+0x8c8>
   db7a2:	9b06      	ldr	r3, [sp, #24]
   db7a4:	ea13 0f0a 	tst.w	r3, sl
   db7a8:	f000 813e 	beq.w	dba28 <_strtod_r+0xb48>
   db7ac:	9b07      	ldr	r3, [sp, #28]
   db7ae:	9a03      	ldr	r2, [sp, #12]
   db7b0:	4650      	mov	r0, sl
   db7b2:	4659      	mov	r1, fp
   db7b4:	b153      	cbz	r3, db7cc <_strtod_r+0x8ec>
   db7b6:	f7ff fb76 	bl	daea6 <sulp>
   db7ba:	4602      	mov	r2, r0
   db7bc:	460b      	mov	r3, r1
   db7be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db7c2:	f7fd ff6b 	bl	d969c <__adddf3>
   db7c6:	4682      	mov	sl, r0
   db7c8:	468b      	mov	fp, r1
   db7ca:	e12d      	b.n	dba28 <_strtod_r+0xb48>
   db7cc:	f7ff fb6b 	bl	daea6 <sulp>
   db7d0:	4602      	mov	r2, r0
   db7d2:	460b      	mov	r3, r1
   db7d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db7d8:	f7fd ff5e 	bl	d9698 <__aeabi_dsub>
   db7dc:	2200      	movs	r2, #0
   db7de:	2300      	movs	r3, #0
   db7e0:	4682      	mov	sl, r0
   db7e2:	468b      	mov	fp, r1
   db7e4:	f7fe fb74 	bl	d9ed0 <__aeabi_dcmpeq>
   db7e8:	2800      	cmp	r0, #0
   db7ea:	f47f af49 	bne.w	db680 <_strtod_r+0x7a0>
   db7ee:	e11b      	b.n	dba28 <_strtod_r+0xb48>
   db7f0:	4629      	mov	r1, r5
   db7f2:	4620      	mov	r0, r4
   db7f4:	f001 fc63 	bl	dd0be <__ratio>
   db7f8:	ec57 6b10 	vmov	r6, r7, d0
   db7fc:	2200      	movs	r2, #0
   db7fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db802:	ee10 0a10 	vmov	r0, s0
   db806:	4639      	mov	r1, r7
   db808:	f7fe fb76 	bl	d9ef8 <__aeabi_dcmple>
   db80c:	2800      	cmp	r0, #0
   db80e:	d042      	beq.n	db896 <_strtod_r+0x9b6>
   db810:	9b07      	ldr	r3, [sp, #28]
   db812:	b123      	cbz	r3, db81e <_strtod_r+0x93e>
   db814:	f04f 0800 	mov.w	r8, #0
   db818:	f8df 9040 	ldr.w	r9, [pc, #64]	; db85c <_strtod_r+0x97c>
   db81c:	e011      	b.n	db842 <_strtod_r+0x962>
   db81e:	f1ba 0f00 	cmp.w	sl, #0
   db822:	d103      	bne.n	db82c <_strtod_r+0x94c>
   db824:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db828:	b93b      	cbnz	r3, db83a <_strtod_r+0x95a>
   db82a:	e01b      	b.n	db864 <_strtod_r+0x984>
   db82c:	f1ba 0f01 	cmp.w	sl, #1
   db830:	d103      	bne.n	db83a <_strtod_r+0x95a>
   db832:	f1bb 0f00 	cmp.w	fp, #0
   db836:	f43f af23 	beq.w	db680 <_strtod_r+0x7a0>
   db83a:	f8df 9024 	ldr.w	r9, [pc, #36]	; db860 <_strtod_r+0x980>
   db83e:	f04f 0800 	mov.w	r8, #0
   db842:	2600      	movs	r6, #0
   db844:	4f05      	ldr	r7, [pc, #20]	; (db85c <_strtod_r+0x97c>)
   db846:	e039      	b.n	db8bc <_strtod_r+0x9dc>
   db848:	fffffc02 	.word	0xfffffc02
   db84c:	fffffbe2 	.word	0xfffffbe2
   db850:	000fffff 	.word	0x000fffff
   db854:	7ff00000 	.word	0x7ff00000
   db858:	7fefffff 	.word	0x7fefffff
   db85c:	3ff00000 	.word	0x3ff00000
   db860:	bff00000 	.word	0xbff00000
   db864:	2200      	movs	r2, #0
   db866:	4b98      	ldr	r3, [pc, #608]	; (dbac8 <_strtod_r+0xbe8>)
   db868:	4630      	mov	r0, r6
   db86a:	4639      	mov	r1, r7
   db86c:	f7fe fb3a 	bl	d9ee4 <__aeabi_dcmplt>
   db870:	b940      	cbnz	r0, db884 <_strtod_r+0x9a4>
   db872:	4630      	mov	r0, r6
   db874:	4639      	mov	r1, r7
   db876:	2200      	movs	r2, #0
   db878:	4b94      	ldr	r3, [pc, #592]	; (dbacc <_strtod_r+0xbec>)
   db87a:	f7fe f8c1 	bl	d9a00 <__aeabi_dmul>
   db87e:	4606      	mov	r6, r0
   db880:	460f      	mov	r7, r1
   db882:	e001      	b.n	db888 <_strtod_r+0x9a8>
   db884:	4f91      	ldr	r7, [pc, #580]	; (dbacc <_strtod_r+0xbec>)
   db886:	2600      	movs	r6, #0
   db888:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db88c:	9614      	str	r6, [sp, #80]	; 0x50
   db88e:	9315      	str	r3, [sp, #84]	; 0x54
   db890:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db894:	e012      	b.n	db8bc <_strtod_r+0x9dc>
   db896:	4b8d      	ldr	r3, [pc, #564]	; (dbacc <_strtod_r+0xbec>)
   db898:	4630      	mov	r0, r6
   db89a:	4639      	mov	r1, r7
   db89c:	2200      	movs	r2, #0
   db89e:	f7fe f8af 	bl	d9a00 <__aeabi_dmul>
   db8a2:	9b07      	ldr	r3, [sp, #28]
   db8a4:	4606      	mov	r6, r0
   db8a6:	460f      	mov	r7, r1
   db8a8:	b923      	cbnz	r3, db8b4 <_strtod_r+0x9d4>
   db8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db8ae:	900e      	str	r0, [sp, #56]	; 0x38
   db8b0:	930f      	str	r3, [sp, #60]	; 0x3c
   db8b2:	e001      	b.n	db8b8 <_strtod_r+0x9d8>
   db8b4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db8b8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db8bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db8c0:	0d1b      	lsrs	r3, r3, #20
   db8c2:	051b      	lsls	r3, r3, #20
   db8c4:	9306      	str	r3, [sp, #24]
   db8c6:	9a06      	ldr	r2, [sp, #24]
   db8c8:	4b81      	ldr	r3, [pc, #516]	; (dbad0 <_strtod_r+0xbf0>)
   db8ca:	429a      	cmp	r2, r3
   db8cc:	d12b      	bne.n	db926 <_strtod_r+0xa46>
   db8ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db8d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db8d6:	ec4b ab10 	vmov	d0, sl, fp
   db8da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db8de:	f001 fb2b 	bl	dcf38 <__ulp>
   db8e2:	4640      	mov	r0, r8
   db8e4:	ec53 2b10 	vmov	r2, r3, d0
   db8e8:	4649      	mov	r1, r9
   db8ea:	f7fe f889 	bl	d9a00 <__aeabi_dmul>
   db8ee:	4652      	mov	r2, sl
   db8f0:	465b      	mov	r3, fp
   db8f2:	f7fd fed3 	bl	d969c <__adddf3>
   db8f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db8fa:	0d1b      	lsrs	r3, r3, #20
   db8fc:	4a75      	ldr	r2, [pc, #468]	; (dbad4 <_strtod_r+0xbf4>)
   db8fe:	051b      	lsls	r3, r3, #20
   db900:	4293      	cmp	r3, r2
   db902:	4682      	mov	sl, r0
   db904:	d90c      	bls.n	db920 <_strtod_r+0xa40>
   db906:	4b74      	ldr	r3, [pc, #464]	; (dbad8 <_strtod_r+0xbf8>)
   db908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db90a:	429a      	cmp	r2, r3
   db90c:	d103      	bne.n	db916 <_strtod_r+0xa36>
   db90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db910:	3301      	adds	r3, #1
   db912:	f43f ad2c 	beq.w	db36e <_strtod_r+0x48e>
   db916:	f8df b1c0 	ldr.w	fp, [pc, #448]	; dbad8 <_strtod_r+0xbf8>
   db91a:	f04f 3aff 	mov.w	sl, #4294967295
   db91e:	e072      	b.n	dba06 <_strtod_r+0xb26>
   db920:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db924:	e038      	b.n	db998 <_strtod_r+0xab8>
   db926:	9b03      	ldr	r3, [sp, #12]
   db928:	b333      	cbz	r3, db978 <_strtod_r+0xa98>
   db92a:	9b06      	ldr	r3, [sp, #24]
   db92c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db930:	d822      	bhi.n	db978 <_strtod_r+0xa98>
   db932:	a35d      	add	r3, pc, #372	; (adr r3, dbaa8 <_strtod_r+0xbc8>)
   db934:	e9d3 2300 	ldrd	r2, r3, [r3]
   db938:	4630      	mov	r0, r6
   db93a:	4639      	mov	r1, r7
   db93c:	f7fe fadc 	bl	d9ef8 <__aeabi_dcmple>
   db940:	b1a8      	cbz	r0, db96e <_strtod_r+0xa8e>
   db942:	4639      	mov	r1, r7
   db944:	4630      	mov	r0, r6
   db946:	f7fe fb1d 	bl	d9f84 <__aeabi_d2uiz>
   db94a:	2800      	cmp	r0, #0
   db94c:	bf08      	it	eq
   db94e:	2001      	moveq	r0, #1
   db950:	f7fd ffe0 	bl	d9914 <__aeabi_ui2d>
   db954:	9b07      	ldr	r3, [sp, #28]
   db956:	4606      	mov	r6, r0
   db958:	460f      	mov	r7, r1
   db95a:	b923      	cbnz	r3, db966 <_strtod_r+0xa86>
   db95c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db960:	9010      	str	r0, [sp, #64]	; 0x40
   db962:	9311      	str	r3, [sp, #68]	; 0x44
   db964:	e001      	b.n	db96a <_strtod_r+0xa8a>
   db966:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db96a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db96e:	9a06      	ldr	r2, [sp, #24]
   db970:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db974:	ebc2 0903 	rsb	r9, r2, r3
   db978:	ed9d 0b08 	vldr	d0, [sp, #32]
   db97c:	f001 fadc 	bl	dcf38 <__ulp>
   db980:	4640      	mov	r0, r8
   db982:	ec53 2b10 	vmov	r2, r3, d0
   db986:	4649      	mov	r1, r9
   db988:	f7fe f83a 	bl	d9a00 <__aeabi_dmul>
   db98c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db990:	f7fd fe84 	bl	d969c <__adddf3>
   db994:	4682      	mov	sl, r0
   db996:	468b      	mov	fp, r1
   db998:	9b03      	ldr	r3, [sp, #12]
   db99a:	bba3      	cbnz	r3, dba06 <_strtod_r+0xb26>
   db99c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db9a0:	0d1b      	lsrs	r3, r3, #20
   db9a2:	9a06      	ldr	r2, [sp, #24]
   db9a4:	051b      	lsls	r3, r3, #20
   db9a6:	429a      	cmp	r2, r3
   db9a8:	46d8      	mov	r8, fp
   db9aa:	d12c      	bne.n	dba06 <_strtod_r+0xb26>
   db9ac:	4639      	mov	r1, r7
   db9ae:	4630      	mov	r0, r6
   db9b0:	f7fe fac0 	bl	d9f34 <__aeabi_d2iz>
   db9b4:	f7fd ffbe 	bl	d9934 <__aeabi_i2d>
   db9b8:	460b      	mov	r3, r1
   db9ba:	4602      	mov	r2, r0
   db9bc:	4639      	mov	r1, r7
   db9be:	4630      	mov	r0, r6
   db9c0:	f7fd fe6a 	bl	d9698 <__aeabi_dsub>
   db9c4:	9b07      	ldr	r3, [sp, #28]
   db9c6:	4606      	mov	r6, r0
   db9c8:	460f      	mov	r7, r1
   db9ca:	b92b      	cbnz	r3, db9d8 <_strtod_r+0xaf8>
   db9cc:	f1ba 0f00 	cmp.w	sl, #0
   db9d0:	d102      	bne.n	db9d8 <_strtod_r+0xaf8>
   db9d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db9d6:	b183      	cbz	r3, db9fa <_strtod_r+0xb1a>
   db9d8:	a335      	add	r3, pc, #212	; (adr r3, dbab0 <_strtod_r+0xbd0>)
   db9da:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9de:	4630      	mov	r0, r6
   db9e0:	4639      	mov	r1, r7
   db9e2:	f7fe fa7f 	bl	d9ee4 <__aeabi_dcmplt>
   db9e6:	2800      	cmp	r0, #0
   db9e8:	d131      	bne.n	dba4e <_strtod_r+0xb6e>
   db9ea:	a333      	add	r3, pc, #204	; (adr r3, dbab8 <_strtod_r+0xbd8>)
   db9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9f0:	4630      	mov	r0, r6
   db9f2:	4639      	mov	r1, r7
   db9f4:	f7fe fa94 	bl	d9f20 <__aeabi_dcmpgt>
   db9f8:	e004      	b.n	dba04 <_strtod_r+0xb24>
   db9fa:	a331      	add	r3, pc, #196	; (adr r3, dbac0 <_strtod_r+0xbe0>)
   db9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba00:	f7fe fa70 	bl	d9ee4 <__aeabi_dcmplt>
   dba04:	bb18      	cbnz	r0, dba4e <_strtod_r+0xb6e>
   dba06:	9918      	ldr	r1, [sp, #96]	; 0x60
   dba08:	9802      	ldr	r0, [sp, #8]
   dba0a:	f001 f804 	bl	dca16 <_Bfree>
   dba0e:	9904      	ldr	r1, [sp, #16]
   dba10:	9802      	ldr	r0, [sp, #8]
   dba12:	f001 f800 	bl	dca16 <_Bfree>
   dba16:	4629      	mov	r1, r5
   dba18:	9802      	ldr	r0, [sp, #8]
   dba1a:	f000 fffc 	bl	dca16 <_Bfree>
   dba1e:	4621      	mov	r1, r4
   dba20:	9802      	ldr	r0, [sp, #8]
   dba22:	f000 fff8 	bl	dca16 <_Bfree>
   dba26:	e56d      	b.n	db504 <_strtod_r+0x624>
   dba28:	9b03      	ldr	r3, [sp, #12]
   dba2a:	b183      	cbz	r3, dba4e <_strtod_r+0xb6e>
   dba2c:	4b2b      	ldr	r3, [pc, #172]	; (dbadc <_strtod_r+0xbfc>)
   dba2e:	930b      	str	r3, [sp, #44]	; 0x2c
   dba30:	2300      	movs	r3, #0
   dba32:	930a      	str	r3, [sp, #40]	; 0x28
   dba34:	4650      	mov	r0, sl
   dba36:	4659      	mov	r1, fp
   dba38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dba3c:	f7fd ffe0 	bl	d9a00 <__aeabi_dmul>
   dba40:	4682      	mov	sl, r0
   dba42:	468b      	mov	fp, r1
   dba44:	b919      	cbnz	r1, dba4e <_strtod_r+0xb6e>
   dba46:	b910      	cbnz	r0, dba4e <_strtod_r+0xb6e>
   dba48:	9a02      	ldr	r2, [sp, #8]
   dba4a:	2322      	movs	r3, #34	; 0x22
   dba4c:	6013      	str	r3, [r2, #0]
   dba4e:	9918      	ldr	r1, [sp, #96]	; 0x60
   dba50:	9802      	ldr	r0, [sp, #8]
   dba52:	f000 ffe0 	bl	dca16 <_Bfree>
   dba56:	9904      	ldr	r1, [sp, #16]
   dba58:	9802      	ldr	r0, [sp, #8]
   dba5a:	f000 ffdc 	bl	dca16 <_Bfree>
   dba5e:	4629      	mov	r1, r5
   dba60:	9802      	ldr	r0, [sp, #8]
   dba62:	f000 ffd8 	bl	dca16 <_Bfree>
   dba66:	9905      	ldr	r1, [sp, #20]
   dba68:	9802      	ldr	r0, [sp, #8]
   dba6a:	f000 ffd4 	bl	dca16 <_Bfree>
   dba6e:	4621      	mov	r1, r4
   dba70:	9802      	ldr	r0, [sp, #8]
   dba72:	f000 ffd0 	bl	dca16 <_Bfree>
   dba76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dba78:	b113      	cbz	r3, dba80 <_strtod_r+0xba0>
   dba7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dba7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dba7e:	6013      	str	r3, [r2, #0]
   dba80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dba82:	b11b      	cbz	r3, dba8c <_strtod_r+0xbac>
   dba84:	4652      	mov	r2, sl
   dba86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dba8a:	e007      	b.n	dba9c <_strtod_r+0xbbc>
   dba8c:	4652      	mov	r2, sl
   dba8e:	465b      	mov	r3, fp
   dba90:	e004      	b.n	dba9c <_strtod_r+0xbbc>
   dba92:	2500      	movs	r5, #0
   dba94:	462a      	mov	r2, r5
   dba96:	2101      	movs	r1, #1
   dba98:	f7ff bb41 	b.w	db11e <_strtod_r+0x23e>
   dba9c:	ec43 2b10 	vmov	d0, r2, r3
   dbaa0:	b01d      	add	sp, #116	; 0x74
   dbaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbaa6:	bf00      	nop
   dbaa8:	ffc00000 	.word	0xffc00000
   dbaac:	41dfffff 	.word	0x41dfffff
   dbab0:	94a03595 	.word	0x94a03595
   dbab4:	3fdfffff 	.word	0x3fdfffff
   dbab8:	35afe535 	.word	0x35afe535
   dbabc:	3fe00000 	.word	0x3fe00000
   dbac0:	94a03595 	.word	0x94a03595
   dbac4:	3fcfffff 	.word	0x3fcfffff
   dbac8:	3ff00000 	.word	0x3ff00000
   dbacc:	3fe00000 	.word	0x3fe00000
   dbad0:	7fe00000 	.word	0x7fe00000
   dbad4:	7c9fffff 	.word	0x7c9fffff
   dbad8:	7fefffff 	.word	0x7fefffff
   dbadc:	39500000 	.word	0x39500000

000dbae0 <strtod>:
   dbae0:	4b02      	ldr	r3, [pc, #8]	; (dbaec <strtod+0xc>)
   dbae2:	460a      	mov	r2, r1
   dbae4:	4601      	mov	r1, r0
   dbae6:	6818      	ldr	r0, [r3, #0]
   dbae8:	f7ff b9fa 	b.w	daee0 <_strtod_r>
   dbaec:	2003d748 	.word	0x2003d748

000dbaf0 <_strtol_r>:
   dbaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbaf4:	4680      	mov	r8, r0
   dbaf6:	4840      	ldr	r0, [pc, #256]	; (dbbf8 <_strtol_r+0x108>)
   dbaf8:	f8d0 9000 	ldr.w	r9, [r0]
   dbafc:	460f      	mov	r7, r1
   dbafe:	463d      	mov	r5, r7
   dbb00:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb04:	eb09 0004 	add.w	r0, r9, r4
   dbb08:	7840      	ldrb	r0, [r0, #1]
   dbb0a:	f000 0008 	and.w	r0, r0, #8
   dbb0e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dbb12:	b108      	cbz	r0, dbb18 <_strtol_r+0x28>
   dbb14:	462f      	mov	r7, r5
   dbb16:	e7f2      	b.n	dbafe <_strtol_r+0xe>
   dbb18:	2c2d      	cmp	r4, #45	; 0x2d
   dbb1a:	d103      	bne.n	dbb24 <_strtol_r+0x34>
   dbb1c:	1cbd      	adds	r5, r7, #2
   dbb1e:	787c      	ldrb	r4, [r7, #1]
   dbb20:	2601      	movs	r6, #1
   dbb22:	e003      	b.n	dbb2c <_strtol_r+0x3c>
   dbb24:	2c2b      	cmp	r4, #43	; 0x2b
   dbb26:	bf04      	itt	eq
   dbb28:	787c      	ldrbeq	r4, [r7, #1]
   dbb2a:	1cbd      	addeq	r5, r7, #2
   dbb2c:	b113      	cbz	r3, dbb34 <_strtol_r+0x44>
   dbb2e:	2b10      	cmp	r3, #16
   dbb30:	d10a      	bne.n	dbb48 <_strtol_r+0x58>
   dbb32:	e05b      	b.n	dbbec <_strtol_r+0xfc>
   dbb34:	2c30      	cmp	r4, #48	; 0x30
   dbb36:	d157      	bne.n	dbbe8 <_strtol_r+0xf8>
   dbb38:	7828      	ldrb	r0, [r5, #0]
   dbb3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbb3e:	2858      	cmp	r0, #88	; 0x58
   dbb40:	d14d      	bne.n	dbbde <_strtol_r+0xee>
   dbb42:	786c      	ldrb	r4, [r5, #1]
   dbb44:	2310      	movs	r3, #16
   dbb46:	3502      	adds	r5, #2
   dbb48:	2e00      	cmp	r6, #0
   dbb4a:	bf14      	ite	ne
   dbb4c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbb50:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbb54:	2700      	movs	r7, #0
   dbb56:	fbbc faf3 	udiv	sl, ip, r3
   dbb5a:	4638      	mov	r0, r7
   dbb5c:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbb60:	eb09 0e04 	add.w	lr, r9, r4
   dbb64:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbb68:	f01e 0f04 	tst.w	lr, #4
   dbb6c:	d001      	beq.n	dbb72 <_strtol_r+0x82>
   dbb6e:	3c30      	subs	r4, #48	; 0x30
   dbb70:	e00b      	b.n	dbb8a <_strtol_r+0x9a>
   dbb72:	f01e 0e03 	ands.w	lr, lr, #3
   dbb76:	d01b      	beq.n	dbbb0 <_strtol_r+0xc0>
   dbb78:	f1be 0f01 	cmp.w	lr, #1
   dbb7c:	bf0c      	ite	eq
   dbb7e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbb82:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbb86:	ebce 0404 	rsb	r4, lr, r4
   dbb8a:	42a3      	cmp	r3, r4
   dbb8c:	dd10      	ble.n	dbbb0 <_strtol_r+0xc0>
   dbb8e:	f1b7 3fff 	cmp.w	r7, #4294967295
   dbb92:	d00a      	beq.n	dbbaa <_strtol_r+0xba>
   dbb94:	4550      	cmp	r0, sl
   dbb96:	d806      	bhi.n	dbba6 <_strtol_r+0xb6>
   dbb98:	d101      	bne.n	dbb9e <_strtol_r+0xae>
   dbb9a:	4564      	cmp	r4, ip
   dbb9c:	dc03      	bgt.n	dbba6 <_strtol_r+0xb6>
   dbb9e:	fb03 4000 	mla	r0, r3, r0, r4
   dbba2:	2701      	movs	r7, #1
   dbba4:	e001      	b.n	dbbaa <_strtol_r+0xba>
   dbba6:	f04f 37ff 	mov.w	r7, #4294967295
   dbbaa:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbbae:	e7d7      	b.n	dbb60 <_strtol_r+0x70>
   dbbb0:	1c7b      	adds	r3, r7, #1
   dbbb2:	d10c      	bne.n	dbbce <_strtol_r+0xde>
   dbbb4:	2e00      	cmp	r6, #0
   dbbb6:	f04f 0322 	mov.w	r3, #34	; 0x22
   dbbba:	bf14      	ite	ne
   dbbbc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dbbc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbbc4:	f8c8 3000 	str.w	r3, [r8]
   dbbc8:	b92a      	cbnz	r2, dbbd6 <_strtol_r+0xe6>
   dbbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbce:	b106      	cbz	r6, dbbd2 <_strtol_r+0xe2>
   dbbd0:	4240      	negs	r0, r0
   dbbd2:	b172      	cbz	r2, dbbf2 <_strtol_r+0x102>
   dbbd4:	b107      	cbz	r7, dbbd8 <_strtol_r+0xe8>
   dbbd6:	1e69      	subs	r1, r5, #1
   dbbd8:	6011      	str	r1, [r2, #0]
   dbbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbde:	2430      	movs	r4, #48	; 0x30
   dbbe0:	2b00      	cmp	r3, #0
   dbbe2:	d1b1      	bne.n	dbb48 <_strtol_r+0x58>
   dbbe4:	2308      	movs	r3, #8
   dbbe6:	e7af      	b.n	dbb48 <_strtol_r+0x58>
   dbbe8:	230a      	movs	r3, #10
   dbbea:	e7ad      	b.n	dbb48 <_strtol_r+0x58>
   dbbec:	2c30      	cmp	r4, #48	; 0x30
   dbbee:	d0a3      	beq.n	dbb38 <_strtol_r+0x48>
   dbbf0:	e7aa      	b.n	dbb48 <_strtol_r+0x58>
   dbbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbf6:	bf00      	nop
   dbbf8:	2003d6e4 	.word	0x2003d6e4

000dbbfc <strtol>:
   dbbfc:	4613      	mov	r3, r2
   dbbfe:	460a      	mov	r2, r1
   dbc00:	4601      	mov	r1, r0
   dbc02:	4802      	ldr	r0, [pc, #8]	; (dbc0c <strtol+0x10>)
   dbc04:	6800      	ldr	r0, [r0, #0]
   dbc06:	f7ff bf73 	b.w	dbaf0 <_strtol_r>
   dbc0a:	bf00      	nop
   dbc0c:	2003d748 	.word	0x2003d748

000dbc10 <_strtoul_r>:
   dbc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbc14:	4680      	mov	r8, r0
   dbc16:	483c      	ldr	r0, [pc, #240]	; (dbd08 <_strtoul_r+0xf8>)
   dbc18:	f8d0 9000 	ldr.w	r9, [r0]
   dbc1c:	460e      	mov	r6, r1
   dbc1e:	4635      	mov	r5, r6
   dbc20:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbc24:	eb09 0004 	add.w	r0, r9, r4
   dbc28:	7840      	ldrb	r0, [r0, #1]
   dbc2a:	f000 0008 	and.w	r0, r0, #8
   dbc2e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dbc32:	b108      	cbz	r0, dbc38 <_strtoul_r+0x28>
   dbc34:	462e      	mov	r6, r5
   dbc36:	e7f2      	b.n	dbc1e <_strtoul_r+0xe>
   dbc38:	2c2d      	cmp	r4, #45	; 0x2d
   dbc3a:	d103      	bne.n	dbc44 <_strtoul_r+0x34>
   dbc3c:	1cb5      	adds	r5, r6, #2
   dbc3e:	7874      	ldrb	r4, [r6, #1]
   dbc40:	2701      	movs	r7, #1
   dbc42:	e003      	b.n	dbc4c <_strtoul_r+0x3c>
   dbc44:	2c2b      	cmp	r4, #43	; 0x2b
   dbc46:	bf04      	itt	eq
   dbc48:	7874      	ldrbeq	r4, [r6, #1]
   dbc4a:	1cb5      	addeq	r5, r6, #2
   dbc4c:	b113      	cbz	r3, dbc54 <_strtoul_r+0x44>
   dbc4e:	2b10      	cmp	r3, #16
   dbc50:	d10a      	bne.n	dbc68 <_strtoul_r+0x58>
   dbc52:	e053      	b.n	dbcfc <_strtoul_r+0xec>
   dbc54:	2c30      	cmp	r4, #48	; 0x30
   dbc56:	d14f      	bne.n	dbcf8 <_strtoul_r+0xe8>
   dbc58:	7828      	ldrb	r0, [r5, #0]
   dbc5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbc5e:	2858      	cmp	r0, #88	; 0x58
   dbc60:	d145      	bne.n	dbcee <_strtoul_r+0xde>
   dbc62:	786c      	ldrb	r4, [r5, #1]
   dbc64:	2310      	movs	r3, #16
   dbc66:	3502      	adds	r5, #2
   dbc68:	f04f 3cff 	mov.w	ip, #4294967295
   dbc6c:	2600      	movs	r6, #0
   dbc6e:	fbbc fcf3 	udiv	ip, ip, r3
   dbc72:	fb03 fa0c 	mul.w	sl, r3, ip
   dbc76:	ea6f 0a0a 	mvn.w	sl, sl
   dbc7a:	4630      	mov	r0, r6
   dbc7c:	eb09 0e04 	add.w	lr, r9, r4
   dbc80:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbc84:	f01e 0f04 	tst.w	lr, #4
   dbc88:	d001      	beq.n	dbc8e <_strtoul_r+0x7e>
   dbc8a:	3c30      	subs	r4, #48	; 0x30
   dbc8c:	e00b      	b.n	dbca6 <_strtoul_r+0x96>
   dbc8e:	f01e 0e03 	ands.w	lr, lr, #3
   dbc92:	d01a      	beq.n	dbcca <_strtoul_r+0xba>
   dbc94:	f1be 0f01 	cmp.w	lr, #1
   dbc98:	bf0c      	ite	eq
   dbc9a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbc9e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbca2:	ebce 0404 	rsb	r4, lr, r4
   dbca6:	42a3      	cmp	r3, r4
   dbca8:	dd0f      	ble.n	dbcca <_strtoul_r+0xba>
   dbcaa:	2e00      	cmp	r6, #0
   dbcac:	db08      	blt.n	dbcc0 <_strtoul_r+0xb0>
   dbcae:	4560      	cmp	r0, ip
   dbcb0:	d806      	bhi.n	dbcc0 <_strtoul_r+0xb0>
   dbcb2:	d101      	bne.n	dbcb8 <_strtoul_r+0xa8>
   dbcb4:	4554      	cmp	r4, sl
   dbcb6:	dc03      	bgt.n	dbcc0 <_strtoul_r+0xb0>
   dbcb8:	fb03 4000 	mla	r0, r3, r0, r4
   dbcbc:	2601      	movs	r6, #1
   dbcbe:	e001      	b.n	dbcc4 <_strtoul_r+0xb4>
   dbcc0:	f04f 36ff 	mov.w	r6, #4294967295
   dbcc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbcc8:	e7d8      	b.n	dbc7c <_strtoul_r+0x6c>
   dbcca:	2e00      	cmp	r6, #0
   dbccc:	da07      	bge.n	dbcde <_strtoul_r+0xce>
   dbcce:	2322      	movs	r3, #34	; 0x22
   dbcd0:	f8c8 3000 	str.w	r3, [r8]
   dbcd4:	f04f 30ff 	mov.w	r0, #4294967295
   dbcd8:	b92a      	cbnz	r2, dbce6 <_strtoul_r+0xd6>
   dbcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbcde:	b107      	cbz	r7, dbce2 <_strtoul_r+0xd2>
   dbce0:	4240      	negs	r0, r0
   dbce2:	b172      	cbz	r2, dbd02 <_strtoul_r+0xf2>
   dbce4:	b106      	cbz	r6, dbce8 <_strtoul_r+0xd8>
   dbce6:	1e69      	subs	r1, r5, #1
   dbce8:	6011      	str	r1, [r2, #0]
   dbcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbcee:	2430      	movs	r4, #48	; 0x30
   dbcf0:	2b00      	cmp	r3, #0
   dbcf2:	d1b9      	bne.n	dbc68 <_strtoul_r+0x58>
   dbcf4:	2308      	movs	r3, #8
   dbcf6:	e7b7      	b.n	dbc68 <_strtoul_r+0x58>
   dbcf8:	230a      	movs	r3, #10
   dbcfa:	e7b5      	b.n	dbc68 <_strtoul_r+0x58>
   dbcfc:	2c30      	cmp	r4, #48	; 0x30
   dbcfe:	d0ab      	beq.n	dbc58 <_strtoul_r+0x48>
   dbd00:	e7b2      	b.n	dbc68 <_strtoul_r+0x58>
   dbd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd06:	bf00      	nop
   dbd08:	2003d6e4 	.word	0x2003d6e4

000dbd0c <strtoul>:
   dbd0c:	4613      	mov	r3, r2
   dbd0e:	460a      	mov	r2, r1
   dbd10:	4601      	mov	r1, r0
   dbd12:	4802      	ldr	r0, [pc, #8]	; (dbd1c <strtoul+0x10>)
   dbd14:	6800      	ldr	r0, [r0, #0]
   dbd16:	f7ff bf7b 	b.w	dbc10 <_strtoul_r>
   dbd1a:	bf00      	nop
   dbd1c:	2003d748 	.word	0x2003d748

000dbd20 <__get_current_time_locale>:
   dbd20:	4b04      	ldr	r3, [pc, #16]	; (dbd34 <__get_current_time_locale+0x14>)
   dbd22:	4a05      	ldr	r2, [pc, #20]	; (dbd38 <__get_current_time_locale+0x18>)
   dbd24:	6818      	ldr	r0, [r3, #0]
   dbd26:	4b05      	ldr	r3, [pc, #20]	; (dbd3c <__get_current_time_locale+0x1c>)
   dbd28:	2800      	cmp	r0, #0
   dbd2a:	bf14      	ite	ne
   dbd2c:	4610      	movne	r0, r2
   dbd2e:	4618      	moveq	r0, r3
   dbd30:	4770      	bx	lr
   dbd32:	bf00      	nop
   dbd34:	2003e6c8 	.word	0x2003e6c8
   dbd38:	2003e6cc 	.word	0x2003e6cc
   dbd3c:	000de2e0 	.word	0x000de2e0

000dbd40 <__tzcalc_limits>:
   dbd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd44:	4604      	mov	r4, r0
   dbd46:	f000 fd91 	bl	dc86c <__gettzinfo>
   dbd4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbd4e:	429c      	cmp	r4, r3
   dbd50:	f340 8096 	ble.w	dbe80 <__tzcalc_limits+0x140>
   dbd54:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbd58:	18e3      	adds	r3, r4, r3
   dbd5a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbd5e:	109b      	asrs	r3, r3, #2
   dbd60:	f240 156d 	movw	r5, #365	; 0x16d
   dbd64:	fb05 3502 	mla	r5, r5, r2, r3
   dbd68:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbd6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbd70:	fb92 f3f3 	sdiv	r3, r2, r3
   dbd74:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbd78:	442b      	add	r3, r5
   dbd7a:	18a5      	adds	r5, r4, r2
   dbd7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbd80:	fb95 f5f2 	sdiv	r5, r5, r2
   dbd84:	441d      	add	r5, r3
   dbd86:	2364      	movs	r3, #100	; 0x64
   dbd88:	fb94 f7f2 	sdiv	r7, r4, r2
   dbd8c:	fb94 f6f3 	sdiv	r6, r4, r3
   dbd90:	fb02 4717 	mls	r7, r2, r7, r4
   dbd94:	fb03 4616 	mls	r6, r3, r6, r4
   dbd98:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbd9c:	fab7 fe87 	clz	lr, r7
   dbda0:	9301      	str	r3, [sp, #4]
   dbda2:	f004 0303 	and.w	r3, r4, #3
   dbda6:	6044      	str	r4, [r0, #4]
   dbda8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbdac:	4601      	mov	r1, r0
   dbdae:	9300      	str	r3, [sp, #0]
   dbdb0:	f04f 0c07 	mov.w	ip, #7
   dbdb4:	7a0b      	ldrb	r3, [r1, #8]
   dbdb6:	2b4a      	cmp	r3, #74	; 0x4a
   dbdb8:	d10e      	bne.n	dbdd8 <__tzcalc_limits+0x98>
   dbdba:	694b      	ldr	r3, [r1, #20]
   dbdbc:	9a00      	ldr	r2, [sp, #0]
   dbdbe:	18ec      	adds	r4, r5, r3
   dbdc0:	b902      	cbnz	r2, dbdc4 <__tzcalc_limits+0x84>
   dbdc2:	b906      	cbnz	r6, dbdc6 <__tzcalc_limits+0x86>
   dbdc4:	b927      	cbnz	r7, dbdd0 <__tzcalc_limits+0x90>
   dbdc6:	2b3b      	cmp	r3, #59	; 0x3b
   dbdc8:	bfd4      	ite	le
   dbdca:	2300      	movle	r3, #0
   dbdcc:	2301      	movgt	r3, #1
   dbdce:	e000      	b.n	dbdd2 <__tzcalc_limits+0x92>
   dbdd0:	2300      	movs	r3, #0
   dbdd2:	4423      	add	r3, r4
   dbdd4:	3b01      	subs	r3, #1
   dbdd6:	e03f      	b.n	dbe58 <__tzcalc_limits+0x118>
   dbdd8:	2b44      	cmp	r3, #68	; 0x44
   dbdda:	d102      	bne.n	dbde2 <__tzcalc_limits+0xa2>
   dbddc:	694b      	ldr	r3, [r1, #20]
   dbdde:	442b      	add	r3, r5
   dbde0:	e03a      	b.n	dbe58 <__tzcalc_limits+0x118>
   dbde2:	9b00      	ldr	r3, [sp, #0]
   dbde4:	b92b      	cbnz	r3, dbdf2 <__tzcalc_limits+0xb2>
   dbde6:	2e00      	cmp	r6, #0
   dbde8:	bf0c      	ite	eq
   dbdea:	46f0      	moveq	r8, lr
   dbdec:	f04f 0801 	movne.w	r8, #1
   dbdf0:	e000      	b.n	dbdf4 <__tzcalc_limits+0xb4>
   dbdf2:	46f0      	mov	r8, lr
   dbdf4:	4b24      	ldr	r3, [pc, #144]	; (dbe88 <__tzcalc_limits+0x148>)
   dbdf6:	68cc      	ldr	r4, [r1, #12]
   dbdf8:	2230      	movs	r2, #48	; 0x30
   dbdfa:	fb02 3808 	mla	r8, r2, r8, r3
   dbdfe:	f1a8 0a04 	sub.w	sl, r8, #4
   dbe02:	46a9      	mov	r9, r5
   dbe04:	2301      	movs	r3, #1
   dbe06:	42a3      	cmp	r3, r4
   dbe08:	da04      	bge.n	dbe14 <__tzcalc_limits+0xd4>
   dbe0a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbe0e:	3301      	adds	r3, #1
   dbe10:	44d9      	add	r9, fp
   dbe12:	e7f8      	b.n	dbe06 <__tzcalc_limits+0xc6>
   dbe14:	f109 0304 	add.w	r3, r9, #4
   dbe18:	fb93 fbfc 	sdiv	fp, r3, ip
   dbe1c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbe20:	2c01      	cmp	r4, #1
   dbe22:	ebca 0a03 	rsb	sl, sl, r3
   dbe26:	694b      	ldr	r3, [r1, #20]
   dbe28:	bfb8      	it	lt
   dbe2a:	2401      	movlt	r4, #1
   dbe2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbe30:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbe34:	690b      	ldr	r3, [r1, #16]
   dbe36:	f104 34ff 	add.w	r4, r4, #4294967295
   dbe3a:	f103 33ff 	add.w	r3, r3, #4294967295
   dbe3e:	bf48      	it	mi
   dbe40:	f10a 0a07 	addmi.w	sl, sl, #7
   dbe44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbe48:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbe4c:	4453      	add	r3, sl
   dbe4e:	42a3      	cmp	r3, r4
   dbe50:	db01      	blt.n	dbe56 <__tzcalc_limits+0x116>
   dbe52:	3b07      	subs	r3, #7
   dbe54:	e7fb      	b.n	dbe4e <__tzcalc_limits+0x10e>
   dbe56:	444b      	add	r3, r9
   dbe58:	698c      	ldr	r4, [r1, #24]
   dbe5a:	4a0c      	ldr	r2, [pc, #48]	; (dbe8c <__tzcalc_limits+0x14c>)
   dbe5c:	fb02 4303 	mla	r3, r2, r3, r4
   dbe60:	6a0c      	ldr	r4, [r1, #32]
   dbe62:	4423      	add	r3, r4
   dbe64:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbe68:	9b01      	ldr	r3, [sp, #4]
   dbe6a:	4299      	cmp	r1, r3
   dbe6c:	d1a2      	bne.n	dbdb4 <__tzcalc_limits+0x74>
   dbe6e:	69c3      	ldr	r3, [r0, #28]
   dbe70:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbe72:	4293      	cmp	r3, r2
   dbe74:	bfac      	ite	ge
   dbe76:	2300      	movge	r3, #0
   dbe78:	2301      	movlt	r3, #1
   dbe7a:	6003      	str	r3, [r0, #0]
   dbe7c:	2001      	movs	r0, #1
   dbe7e:	e000      	b.n	dbe82 <__tzcalc_limits+0x142>
   dbe80:	2000      	movs	r0, #0
   dbe82:	b003      	add	sp, #12
   dbe84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe88:	000de098 	.word	0x000de098
   dbe8c:	00015180 	.word	0x00015180

000dbe90 <__tz_lock>:
   dbe90:	4770      	bx	lr

000dbe92 <__tz_unlock>:
   dbe92:	4770      	bx	lr

000dbe94 <_tzset_unlocked>:
   dbe94:	4b01      	ldr	r3, [pc, #4]	; (dbe9c <_tzset_unlocked+0x8>)
   dbe96:	6818      	ldr	r0, [r3, #0]
   dbe98:	f000 b802 	b.w	dbea0 <_tzset_unlocked_r>
   dbe9c:	2003d748 	.word	0x2003d748

000dbea0 <_tzset_unlocked_r>:
   dbea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbea4:	b08d      	sub	sp, #52	; 0x34
   dbea6:	4607      	mov	r7, r0
   dbea8:	f000 fce0 	bl	dc86c <__gettzinfo>
   dbeac:	49b0      	ldr	r1, [pc, #704]	; (dc170 <_tzset_unlocked_r+0x2d0>)
   dbeae:	4eb1      	ldr	r6, [pc, #708]	; (dc174 <_tzset_unlocked_r+0x2d4>)
   dbeb0:	4604      	mov	r4, r0
   dbeb2:	4638      	mov	r0, r7
   dbeb4:	f000 fcd2 	bl	dc85c <_getenv_r>
   dbeb8:	4605      	mov	r5, r0
   dbeba:	b960      	cbnz	r0, dbed6 <_tzset_unlocked_r+0x36>
   dbebc:	4bae      	ldr	r3, [pc, #696]	; (dc178 <_tzset_unlocked_r+0x2d8>)
   dbebe:	4aaf      	ldr	r2, [pc, #700]	; (dc17c <_tzset_unlocked_r+0x2dc>)
   dbec0:	6018      	str	r0, [r3, #0]
   dbec2:	4baf      	ldr	r3, [pc, #700]	; (dc180 <_tzset_unlocked_r+0x2e0>)
   dbec4:	6018      	str	r0, [r3, #0]
   dbec6:	4baf      	ldr	r3, [pc, #700]	; (dc184 <_tzset_unlocked_r+0x2e4>)
   dbec8:	6830      	ldr	r0, [r6, #0]
   dbeca:	601a      	str	r2, [r3, #0]
   dbecc:	605a      	str	r2, [r3, #4]
   dbece:	f7fa fd1f 	bl	d6910 <free>
   dbed2:	6035      	str	r5, [r6, #0]
   dbed4:	e148      	b.n	dc168 <_tzset_unlocked_r+0x2c8>
   dbed6:	6831      	ldr	r1, [r6, #0]
   dbed8:	b979      	cbnz	r1, dbefa <_tzset_unlocked_r+0x5a>
   dbeda:	6830      	ldr	r0, [r6, #0]
   dbedc:	f7fa fd18 	bl	d6910 <free>
   dbee0:	4628      	mov	r0, r5
   dbee2:	f7fe ffb7 	bl	dae54 <strlen>
   dbee6:	1c41      	adds	r1, r0, #1
   dbee8:	4638      	mov	r0, r7
   dbeea:	f7fa fd59 	bl	d69a0 <_malloc_r>
   dbeee:	6030      	str	r0, [r6, #0]
   dbef0:	b148      	cbz	r0, dbf06 <_tzset_unlocked_r+0x66>
   dbef2:	4629      	mov	r1, r5
   dbef4:	f7fe fa76 	bl	da3e4 <strcpy>
   dbef8:	e005      	b.n	dbf06 <_tzset_unlocked_r+0x66>
   dbefa:	f7fe fa69 	bl	da3d0 <strcmp>
   dbefe:	2800      	cmp	r0, #0
   dbf00:	f000 8132 	beq.w	dc168 <_tzset_unlocked_r+0x2c8>
   dbf04:	e7e9      	b.n	dbeda <_tzset_unlocked_r+0x3a>
   dbf06:	782b      	ldrb	r3, [r5, #0]
   dbf08:	4a9f      	ldr	r2, [pc, #636]	; (dc188 <_tzset_unlocked_r+0x2e8>)
   dbf0a:	49a0      	ldr	r1, [pc, #640]	; (dc18c <_tzset_unlocked_r+0x2ec>)
   dbf0c:	2b3a      	cmp	r3, #58	; 0x3a
   dbf0e:	bf08      	it	eq
   dbf10:	3501      	addeq	r5, #1
   dbf12:	ae0a      	add	r6, sp, #40	; 0x28
   dbf14:	4633      	mov	r3, r6
   dbf16:	4628      	mov	r0, r5
   dbf18:	f7fa fd1a 	bl	d6950 <siscanf>
   dbf1c:	2800      	cmp	r0, #0
   dbf1e:	f340 8123 	ble.w	dc168 <_tzset_unlocked_r+0x2c8>
   dbf22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf24:	18ef      	adds	r7, r5, r3
   dbf26:	5ceb      	ldrb	r3, [r5, r3]
   dbf28:	2b2d      	cmp	r3, #45	; 0x2d
   dbf2a:	d103      	bne.n	dbf34 <_tzset_unlocked_r+0x94>
   dbf2c:	3701      	adds	r7, #1
   dbf2e:	f04f 35ff 	mov.w	r5, #4294967295
   dbf32:	e003      	b.n	dbf3c <_tzset_unlocked_r+0x9c>
   dbf34:	2b2b      	cmp	r3, #43	; 0x2b
   dbf36:	bf08      	it	eq
   dbf38:	3701      	addeq	r7, #1
   dbf3a:	2501      	movs	r5, #1
   dbf3c:	f10d 0a20 	add.w	sl, sp, #32
   dbf40:	f10d 0b1e 	add.w	fp, sp, #30
   dbf44:	f04f 0800 	mov.w	r8, #0
   dbf48:	9603      	str	r6, [sp, #12]
   dbf4a:	f8cd a008 	str.w	sl, [sp, #8]
   dbf4e:	9601      	str	r6, [sp, #4]
   dbf50:	f8cd b000 	str.w	fp, [sp]
   dbf54:	4633      	mov	r3, r6
   dbf56:	aa07      	add	r2, sp, #28
   dbf58:	498d      	ldr	r1, [pc, #564]	; (dc190 <_tzset_unlocked_r+0x2f0>)
   dbf5a:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbf5e:	4638      	mov	r0, r7
   dbf60:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbf64:	f7fa fcf4 	bl	d6950 <siscanf>
   dbf68:	4540      	cmp	r0, r8
   dbf6a:	f340 80fd 	ble.w	dc168 <_tzset_unlocked_r+0x2c8>
   dbf6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbf72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbf76:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc19c <_tzset_unlocked_r+0x2fc>
   dbf7a:	213c      	movs	r1, #60	; 0x3c
   dbf7c:	fb01 3302 	mla	r3, r1, r2, r3
   dbf80:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbf84:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbf88:	fb01 3302 	mla	r3, r1, r2, r3
   dbf8c:	435d      	muls	r5, r3
   dbf8e:	6225      	str	r5, [r4, #32]
   dbf90:	4d7c      	ldr	r5, [pc, #496]	; (dc184 <_tzset_unlocked_r+0x2e4>)
   dbf92:	4b7d      	ldr	r3, [pc, #500]	; (dc188 <_tzset_unlocked_r+0x2e8>)
   dbf94:	602b      	str	r3, [r5, #0]
   dbf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf98:	497c      	ldr	r1, [pc, #496]	; (dc18c <_tzset_unlocked_r+0x2ec>)
   dbf9a:	441f      	add	r7, r3
   dbf9c:	464a      	mov	r2, r9
   dbf9e:	4633      	mov	r3, r6
   dbfa0:	4638      	mov	r0, r7
   dbfa2:	f7fa fcd5 	bl	d6950 <siscanf>
   dbfa6:	4540      	cmp	r0, r8
   dbfa8:	dc08      	bgt.n	dbfbc <_tzset_unlocked_r+0x11c>
   dbfaa:	682b      	ldr	r3, [r5, #0]
   dbfac:	606b      	str	r3, [r5, #4]
   dbfae:	4b72      	ldr	r3, [pc, #456]	; (dc178 <_tzset_unlocked_r+0x2d8>)
   dbfb0:	6a22      	ldr	r2, [r4, #32]
   dbfb2:	601a      	str	r2, [r3, #0]
   dbfb4:	4b72      	ldr	r3, [pc, #456]	; (dc180 <_tzset_unlocked_r+0x2e0>)
   dbfb6:	f8c3 8000 	str.w	r8, [r3]
   dbfba:	e0d5      	b.n	dc168 <_tzset_unlocked_r+0x2c8>
   dbfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbfbe:	f8c5 9004 	str.w	r9, [r5, #4]
   dbfc2:	18fd      	adds	r5, r7, r3
   dbfc4:	5cfb      	ldrb	r3, [r7, r3]
   dbfc6:	2b2d      	cmp	r3, #45	; 0x2d
   dbfc8:	d103      	bne.n	dbfd2 <_tzset_unlocked_r+0x132>
   dbfca:	3501      	adds	r5, #1
   dbfcc:	f04f 37ff 	mov.w	r7, #4294967295
   dbfd0:	e003      	b.n	dbfda <_tzset_unlocked_r+0x13a>
   dbfd2:	2b2b      	cmp	r3, #43	; 0x2b
   dbfd4:	bf08      	it	eq
   dbfd6:	3501      	addeq	r5, #1
   dbfd8:	2701      	movs	r7, #1
   dbfda:	2300      	movs	r3, #0
   dbfdc:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbfe0:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbfe4:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbfe8:	930a      	str	r3, [sp, #40]	; 0x28
   dbfea:	9603      	str	r6, [sp, #12]
   dbfec:	f8cd a008 	str.w	sl, [sp, #8]
   dbff0:	9601      	str	r6, [sp, #4]
   dbff2:	f8cd b000 	str.w	fp, [sp]
   dbff6:	4633      	mov	r3, r6
   dbff8:	aa07      	add	r2, sp, #28
   dbffa:	4965      	ldr	r1, [pc, #404]	; (dc190 <_tzset_unlocked_r+0x2f0>)
   dbffc:	4628      	mov	r0, r5
   dbffe:	f7fa fca7 	bl	d6950 <siscanf>
   dc002:	2800      	cmp	r0, #0
   dc004:	dc04      	bgt.n	dc010 <_tzset_unlocked_r+0x170>
   dc006:	6a23      	ldr	r3, [r4, #32]
   dc008:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc00c:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc00e:	e00e      	b.n	dc02e <_tzset_unlocked_r+0x18e>
   dc010:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc014:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc018:	213c      	movs	r1, #60	; 0x3c
   dc01a:	fb01 3302 	mla	r3, r1, r2, r3
   dc01e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc022:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc026:	fb01 3302 	mla	r3, r1, r2, r3
   dc02a:	435f      	muls	r7, r3
   dc02c:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc030:	4627      	mov	r7, r4
   dc032:	441d      	add	r5, r3
   dc034:	f04f 0900 	mov.w	r9, #0
   dc038:	782b      	ldrb	r3, [r5, #0]
   dc03a:	2b2c      	cmp	r3, #44	; 0x2c
   dc03c:	bf08      	it	eq
   dc03e:	3501      	addeq	r5, #1
   dc040:	f895 8000 	ldrb.w	r8, [r5]
   dc044:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc048:	d126      	bne.n	dc098 <_tzset_unlocked_r+0x1f8>
   dc04a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc04e:	9302      	str	r3, [sp, #8]
   dc050:	ab09      	add	r3, sp, #36	; 0x24
   dc052:	9300      	str	r3, [sp, #0]
   dc054:	9603      	str	r6, [sp, #12]
   dc056:	9601      	str	r6, [sp, #4]
   dc058:	4633      	mov	r3, r6
   dc05a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc05e:	494d      	ldr	r1, [pc, #308]	; (dc194 <_tzset_unlocked_r+0x2f4>)
   dc060:	4628      	mov	r0, r5
   dc062:	f7fa fc75 	bl	d6950 <siscanf>
   dc066:	2803      	cmp	r0, #3
   dc068:	d17e      	bne.n	dc168 <_tzset_unlocked_r+0x2c8>
   dc06a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc06e:	1e4b      	subs	r3, r1, #1
   dc070:	2b0b      	cmp	r3, #11
   dc072:	d879      	bhi.n	dc168 <_tzset_unlocked_r+0x2c8>
   dc074:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc078:	1e53      	subs	r3, r2, #1
   dc07a:	2b04      	cmp	r3, #4
   dc07c:	d874      	bhi.n	dc168 <_tzset_unlocked_r+0x2c8>
   dc07e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc082:	2b06      	cmp	r3, #6
   dc084:	d870      	bhi.n	dc168 <_tzset_unlocked_r+0x2c8>
   dc086:	f887 8008 	strb.w	r8, [r7, #8]
   dc08a:	60f9      	str	r1, [r7, #12]
   dc08c:	613a      	str	r2, [r7, #16]
   dc08e:	617b      	str	r3, [r7, #20]
   dc090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc092:	eb05 0803 	add.w	r8, r5, r3
   dc096:	e02a      	b.n	dc0ee <_tzset_unlocked_r+0x24e>
   dc098:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc09c:	bf06      	itte	eq
   dc09e:	3501      	addeq	r5, #1
   dc0a0:	4643      	moveq	r3, r8
   dc0a2:	2344      	movne	r3, #68	; 0x44
   dc0a4:	220a      	movs	r2, #10
   dc0a6:	a90b      	add	r1, sp, #44	; 0x2c
   dc0a8:	4628      	mov	r0, r5
   dc0aa:	9305      	str	r3, [sp, #20]
   dc0ac:	f7ff fe2e 	bl	dbd0c <strtoul>
   dc0b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc0b4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc0b8:	4545      	cmp	r5, r8
   dc0ba:	9b05      	ldr	r3, [sp, #20]
   dc0bc:	d114      	bne.n	dc0e8 <_tzset_unlocked_r+0x248>
   dc0be:	234d      	movs	r3, #77	; 0x4d
   dc0c0:	f1b9 0f00 	cmp.w	r9, #0
   dc0c4:	d107      	bne.n	dc0d6 <_tzset_unlocked_r+0x236>
   dc0c6:	7223      	strb	r3, [r4, #8]
   dc0c8:	2303      	movs	r3, #3
   dc0ca:	60e3      	str	r3, [r4, #12]
   dc0cc:	2302      	movs	r3, #2
   dc0ce:	6123      	str	r3, [r4, #16]
   dc0d0:	f8c4 9014 	str.w	r9, [r4, #20]
   dc0d4:	e00b      	b.n	dc0ee <_tzset_unlocked_r+0x24e>
   dc0d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc0da:	230b      	movs	r3, #11
   dc0dc:	62a3      	str	r3, [r4, #40]	; 0x28
   dc0de:	2301      	movs	r3, #1
   dc0e0:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc0e2:	2300      	movs	r3, #0
   dc0e4:	6323      	str	r3, [r4, #48]	; 0x30
   dc0e6:	e002      	b.n	dc0ee <_tzset_unlocked_r+0x24e>
   dc0e8:	b280      	uxth	r0, r0
   dc0ea:	723b      	strb	r3, [r7, #8]
   dc0ec:	6178      	str	r0, [r7, #20]
   dc0ee:	2302      	movs	r3, #2
   dc0f0:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc0f4:	2300      	movs	r3, #0
   dc0f6:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc0fa:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc0fe:	930a      	str	r3, [sp, #40]	; 0x28
   dc100:	f898 3000 	ldrb.w	r3, [r8]
   dc104:	2b2f      	cmp	r3, #47	; 0x2f
   dc106:	d10b      	bne.n	dc120 <_tzset_unlocked_r+0x280>
   dc108:	9603      	str	r6, [sp, #12]
   dc10a:	f8cd a008 	str.w	sl, [sp, #8]
   dc10e:	9601      	str	r6, [sp, #4]
   dc110:	f8cd b000 	str.w	fp, [sp]
   dc114:	4633      	mov	r3, r6
   dc116:	aa07      	add	r2, sp, #28
   dc118:	491f      	ldr	r1, [pc, #124]	; (dc198 <_tzset_unlocked_r+0x2f8>)
   dc11a:	4640      	mov	r0, r8
   dc11c:	f7fa fc18 	bl	d6950 <siscanf>
   dc120:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc124:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc128:	213c      	movs	r1, #60	; 0x3c
   dc12a:	fb01 3302 	mla	r3, r1, r2, r3
   dc12e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc132:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc136:	fb01 3302 	mla	r3, r1, r2, r3
   dc13a:	61bb      	str	r3, [r7, #24]
   dc13c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc13e:	f109 0901 	add.w	r9, r9, #1
   dc142:	f1b9 0f02 	cmp.w	r9, #2
   dc146:	4445      	add	r5, r8
   dc148:	f107 071c 	add.w	r7, r7, #28
   dc14c:	f47f af74 	bne.w	dc038 <_tzset_unlocked_r+0x198>
   dc150:	6860      	ldr	r0, [r4, #4]
   dc152:	f7ff fdf5 	bl	dbd40 <__tzcalc_limits>
   dc156:	4b08      	ldr	r3, [pc, #32]	; (dc178 <_tzset_unlocked_r+0x2d8>)
   dc158:	6a22      	ldr	r2, [r4, #32]
   dc15a:	601a      	str	r2, [r3, #0]
   dc15c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc15e:	1a9b      	subs	r3, r3, r2
   dc160:	4a07      	ldr	r2, [pc, #28]	; (dc180 <_tzset_unlocked_r+0x2e0>)
   dc162:	bf18      	it	ne
   dc164:	2301      	movne	r3, #1
   dc166:	6013      	str	r3, [r2, #0]
   dc168:	b00d      	add	sp, #52	; 0x34
   dc16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc16e:	bf00      	nop
   dc170:	000de3dc 	.word	0x000de3dc
   dc174:	2003e7e0 	.word	0x2003e7e0
   dc178:	2003e7e8 	.word	0x2003e7e8
   dc17c:	000de3df 	.word	0x000de3df
   dc180:	2003e7e4 	.word	0x2003e7e4
   dc184:	2003d784 	.word	0x2003d784
   dc188:	2003e7d3 	.word	0x2003e7d3
   dc18c:	000de3e3 	.word	0x000de3e3
   dc190:	000de406 	.word	0x000de406
   dc194:	000de3f2 	.word	0x000de3f2
   dc198:	000de405 	.word	0x000de405
   dc19c:	2003e7c8 	.word	0x2003e7c8

000dc1a0 <abs>:
   dc1a0:	2800      	cmp	r0, #0
   dc1a2:	bfb8      	it	lt
   dc1a4:	4240      	neglt	r0, r0
   dc1a6:	4770      	bx	lr

000dc1a8 <rshift>:
   dc1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc1aa:	6906      	ldr	r6, [r0, #16]
   dc1ac:	114b      	asrs	r3, r1, #5
   dc1ae:	42b3      	cmp	r3, r6
   dc1b0:	f100 0514 	add.w	r5, r0, #20
   dc1b4:	da27      	bge.n	dc206 <rshift+0x5e>
   dc1b6:	f011 011f 	ands.w	r1, r1, #31
   dc1ba:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dc1be:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc1c2:	d101      	bne.n	dc1c8 <rshift+0x20>
   dc1c4:	4629      	mov	r1, r5
   dc1c6:	e016      	b.n	dc1f6 <rshift+0x4e>
   dc1c8:	1d14      	adds	r4, r2, #4
   dc1ca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc1ce:	f1c1 0e20 	rsb	lr, r1, #32
   dc1d2:	40ca      	lsrs	r2, r1
   dc1d4:	462b      	mov	r3, r5
   dc1d6:	42b4      	cmp	r4, r6
   dc1d8:	d209      	bcs.n	dc1ee <rshift+0x46>
   dc1da:	6827      	ldr	r7, [r4, #0]
   dc1dc:	fa07 f70e 	lsl.w	r7, r7, lr
   dc1e0:	433a      	orrs	r2, r7
   dc1e2:	f843 2b04 	str.w	r2, [r3], #4
   dc1e6:	f854 2b04 	ldr.w	r2, [r4], #4
   dc1ea:	40ca      	lsrs	r2, r1
   dc1ec:	e7f3      	b.n	dc1d6 <rshift+0x2e>
   dc1ee:	601a      	str	r2, [r3, #0]
   dc1f0:	b152      	cbz	r2, dc208 <rshift+0x60>
   dc1f2:	3304      	adds	r3, #4
   dc1f4:	e008      	b.n	dc208 <rshift+0x60>
   dc1f6:	42b2      	cmp	r2, r6
   dc1f8:	460b      	mov	r3, r1
   dc1fa:	d205      	bcs.n	dc208 <rshift+0x60>
   dc1fc:	f852 3b04 	ldr.w	r3, [r2], #4
   dc200:	f841 3b04 	str.w	r3, [r1], #4
   dc204:	e7f7      	b.n	dc1f6 <rshift+0x4e>
   dc206:	462b      	mov	r3, r5
   dc208:	1b5b      	subs	r3, r3, r5
   dc20a:	109b      	asrs	r3, r3, #2
   dc20c:	6103      	str	r3, [r0, #16]
   dc20e:	b903      	cbnz	r3, dc212 <rshift+0x6a>
   dc210:	6143      	str	r3, [r0, #20]
   dc212:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc214 <__hexdig_fun>:
   dc214:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc218:	2b09      	cmp	r3, #9
   dc21a:	d801      	bhi.n	dc220 <__hexdig_fun+0xc>
   dc21c:	3820      	subs	r0, #32
   dc21e:	e00a      	b.n	dc236 <__hexdig_fun+0x22>
   dc220:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc224:	2b05      	cmp	r3, #5
   dc226:	d801      	bhi.n	dc22c <__hexdig_fun+0x18>
   dc228:	3847      	subs	r0, #71	; 0x47
   dc22a:	e004      	b.n	dc236 <__hexdig_fun+0x22>
   dc22c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc230:	2b05      	cmp	r3, #5
   dc232:	d802      	bhi.n	dc23a <__hexdig_fun+0x26>
   dc234:	3827      	subs	r0, #39	; 0x27
   dc236:	b2c0      	uxtb	r0, r0
   dc238:	4770      	bx	lr
   dc23a:	2000      	movs	r0, #0
   dc23c:	4770      	bx	lr

000dc23e <__gethex>:
   dc23e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc242:	b08b      	sub	sp, #44	; 0x2c
   dc244:	468a      	mov	sl, r1
   dc246:	4690      	mov	r8, r2
   dc248:	9306      	str	r3, [sp, #24]
   dc24a:	9002      	str	r0, [sp, #8]
   dc24c:	f7fe f856 	bl	da2fc <_localeconv_r>
   dc250:	6803      	ldr	r3, [r0, #0]
   dc252:	9303      	str	r3, [sp, #12]
   dc254:	4618      	mov	r0, r3
   dc256:	f7fe fdfd 	bl	dae54 <strlen>
   dc25a:	9b03      	ldr	r3, [sp, #12]
   dc25c:	9001      	str	r0, [sp, #4]
   dc25e:	4403      	add	r3, r0
   dc260:	f04f 0b00 	mov.w	fp, #0
   dc264:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc268:	9307      	str	r3, [sp, #28]
   dc26a:	f8da 3000 	ldr.w	r3, [sl]
   dc26e:	3302      	adds	r3, #2
   dc270:	461f      	mov	r7, r3
   dc272:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc276:	2830      	cmp	r0, #48	; 0x30
   dc278:	d102      	bne.n	dc280 <__gethex+0x42>
   dc27a:	f10b 0b01 	add.w	fp, fp, #1
   dc27e:	e7f7      	b.n	dc270 <__gethex+0x32>
   dc280:	f7ff ffc8 	bl	dc214 <__hexdig_fun>
   dc284:	4604      	mov	r4, r0
   dc286:	b9e0      	cbnz	r0, dc2c2 <__gethex+0x84>
   dc288:	9a01      	ldr	r2, [sp, #4]
   dc28a:	9903      	ldr	r1, [sp, #12]
   dc28c:	4638      	mov	r0, r7
   dc28e:	f7fe fde9 	bl	dae64 <strncmp>
   dc292:	2800      	cmp	r0, #0
   dc294:	d134      	bne.n	dc300 <__gethex+0xc2>
   dc296:	9b01      	ldr	r3, [sp, #4]
   dc298:	5cf8      	ldrb	r0, [r7, r3]
   dc29a:	18fe      	adds	r6, r7, r3
   dc29c:	f7ff ffba 	bl	dc214 <__hexdig_fun>
   dc2a0:	b380      	cbz	r0, dc304 <__gethex+0xc6>
   dc2a2:	4633      	mov	r3, r6
   dc2a4:	7818      	ldrb	r0, [r3, #0]
   dc2a6:	2830      	cmp	r0, #48	; 0x30
   dc2a8:	461f      	mov	r7, r3
   dc2aa:	f103 0301 	add.w	r3, r3, #1
   dc2ae:	d0f9      	beq.n	dc2a4 <__gethex+0x66>
   dc2b0:	f7ff ffb0 	bl	dc214 <__hexdig_fun>
   dc2b4:	fab0 f580 	clz	r5, r0
   dc2b8:	096d      	lsrs	r5, r5, #5
   dc2ba:	4634      	mov	r4, r6
   dc2bc:	f04f 0b01 	mov.w	fp, #1
   dc2c0:	e001      	b.n	dc2c6 <__gethex+0x88>
   dc2c2:	2500      	movs	r5, #0
   dc2c4:	462c      	mov	r4, r5
   dc2c6:	463a      	mov	r2, r7
   dc2c8:	4616      	mov	r6, r2
   dc2ca:	3201      	adds	r2, #1
   dc2cc:	7830      	ldrb	r0, [r6, #0]
   dc2ce:	f7ff ffa1 	bl	dc214 <__hexdig_fun>
   dc2d2:	2800      	cmp	r0, #0
   dc2d4:	d1f8      	bne.n	dc2c8 <__gethex+0x8a>
   dc2d6:	9a01      	ldr	r2, [sp, #4]
   dc2d8:	9903      	ldr	r1, [sp, #12]
   dc2da:	4630      	mov	r0, r6
   dc2dc:	f7fe fdc2 	bl	dae64 <strncmp>
   dc2e0:	b950      	cbnz	r0, dc2f8 <__gethex+0xba>
   dc2e2:	b954      	cbnz	r4, dc2fa <__gethex+0xbc>
   dc2e4:	9b01      	ldr	r3, [sp, #4]
   dc2e6:	18f4      	adds	r4, r6, r3
   dc2e8:	4622      	mov	r2, r4
   dc2ea:	4616      	mov	r6, r2
   dc2ec:	3201      	adds	r2, #1
   dc2ee:	7830      	ldrb	r0, [r6, #0]
   dc2f0:	f7ff ff90 	bl	dc214 <__hexdig_fun>
   dc2f4:	2800      	cmp	r0, #0
   dc2f6:	d1f8      	bne.n	dc2ea <__gethex+0xac>
   dc2f8:	b134      	cbz	r4, dc308 <__gethex+0xca>
   dc2fa:	1ba4      	subs	r4, r4, r6
   dc2fc:	00a4      	lsls	r4, r4, #2
   dc2fe:	e003      	b.n	dc308 <__gethex+0xca>
   dc300:	463e      	mov	r6, r7
   dc302:	e000      	b.n	dc306 <__gethex+0xc8>
   dc304:	4604      	mov	r4, r0
   dc306:	2501      	movs	r5, #1
   dc308:	7833      	ldrb	r3, [r6, #0]
   dc30a:	2b50      	cmp	r3, #80	; 0x50
   dc30c:	d001      	beq.n	dc312 <__gethex+0xd4>
   dc30e:	2b70      	cmp	r3, #112	; 0x70
   dc310:	d12a      	bne.n	dc368 <__gethex+0x12a>
   dc312:	7873      	ldrb	r3, [r6, #1]
   dc314:	2b2b      	cmp	r3, #43	; 0x2b
   dc316:	d008      	beq.n	dc32a <__gethex+0xec>
   dc318:	2b2d      	cmp	r3, #45	; 0x2d
   dc31a:	d003      	beq.n	dc324 <__gethex+0xe6>
   dc31c:	1c71      	adds	r1, r6, #1
   dc31e:	f04f 0900 	mov.w	r9, #0
   dc322:	e005      	b.n	dc330 <__gethex+0xf2>
   dc324:	f04f 0901 	mov.w	r9, #1
   dc328:	e001      	b.n	dc32e <__gethex+0xf0>
   dc32a:	f04f 0900 	mov.w	r9, #0
   dc32e:	1cb1      	adds	r1, r6, #2
   dc330:	7808      	ldrb	r0, [r1, #0]
   dc332:	f7ff ff6f 	bl	dc214 <__hexdig_fun>
   dc336:	1e43      	subs	r3, r0, #1
   dc338:	b2db      	uxtb	r3, r3
   dc33a:	2b18      	cmp	r3, #24
   dc33c:	d814      	bhi.n	dc368 <__gethex+0x12a>
   dc33e:	f1a0 0210 	sub.w	r2, r0, #16
   dc342:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc346:	f7ff ff65 	bl	dc214 <__hexdig_fun>
   dc34a:	1e43      	subs	r3, r0, #1
   dc34c:	b2db      	uxtb	r3, r3
   dc34e:	2b18      	cmp	r3, #24
   dc350:	d804      	bhi.n	dc35c <__gethex+0x11e>
   dc352:	230a      	movs	r3, #10
   dc354:	fb03 0202 	mla	r2, r3, r2, r0
   dc358:	3a10      	subs	r2, #16
   dc35a:	e7f2      	b.n	dc342 <__gethex+0x104>
   dc35c:	f1b9 0f00 	cmp.w	r9, #0
   dc360:	d000      	beq.n	dc364 <__gethex+0x126>
   dc362:	4252      	negs	r2, r2
   dc364:	4414      	add	r4, r2
   dc366:	e000      	b.n	dc36a <__gethex+0x12c>
   dc368:	4631      	mov	r1, r6
   dc36a:	f8ca 1000 	str.w	r1, [sl]
   dc36e:	b12d      	cbz	r5, dc37c <__gethex+0x13e>
   dc370:	f1bb 0f00 	cmp.w	fp, #0
   dc374:	bf14      	ite	ne
   dc376:	2000      	movne	r0, #0
   dc378:	2006      	moveq	r0, #6
   dc37a:	e17c      	b.n	dc676 <__gethex+0x438>
   dc37c:	1bf3      	subs	r3, r6, r7
   dc37e:	3b01      	subs	r3, #1
   dc380:	4629      	mov	r1, r5
   dc382:	2b07      	cmp	r3, #7
   dc384:	dd02      	ble.n	dc38c <__gethex+0x14e>
   dc386:	3101      	adds	r1, #1
   dc388:	105b      	asrs	r3, r3, #1
   dc38a:	e7fa      	b.n	dc382 <__gethex+0x144>
   dc38c:	9802      	ldr	r0, [sp, #8]
   dc38e:	f000 fb0d 	bl	dc9ac <_Balloc>
   dc392:	9b01      	ldr	r3, [sp, #4]
   dc394:	f100 0a14 	add.w	sl, r0, #20
   dc398:	f04f 0900 	mov.w	r9, #0
   dc39c:	f1c3 0301 	rsb	r3, r3, #1
   dc3a0:	4605      	mov	r5, r0
   dc3a2:	f8cd a010 	str.w	sl, [sp, #16]
   dc3a6:	46cb      	mov	fp, r9
   dc3a8:	9308      	str	r3, [sp, #32]
   dc3aa:	42b7      	cmp	r7, r6
   dc3ac:	d22f      	bcs.n	dc40e <__gethex+0x1d0>
   dc3ae:	1e73      	subs	r3, r6, #1
   dc3b0:	9305      	str	r3, [sp, #20]
   dc3b2:	9a07      	ldr	r2, [sp, #28]
   dc3b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc3b8:	4293      	cmp	r3, r2
   dc3ba:	d00b      	beq.n	dc3d4 <__gethex+0x196>
   dc3bc:	f1bb 0f20 	cmp.w	fp, #32
   dc3c0:	d116      	bne.n	dc3f0 <__gethex+0x1b2>
   dc3c2:	9b04      	ldr	r3, [sp, #16]
   dc3c4:	f8c3 9000 	str.w	r9, [r3]
   dc3c8:	3304      	adds	r3, #4
   dc3ca:	f04f 0900 	mov.w	r9, #0
   dc3ce:	9304      	str	r3, [sp, #16]
   dc3d0:	46cb      	mov	fp, r9
   dc3d2:	e00d      	b.n	dc3f0 <__gethex+0x1b2>
   dc3d4:	9b05      	ldr	r3, [sp, #20]
   dc3d6:	9a08      	ldr	r2, [sp, #32]
   dc3d8:	4413      	add	r3, r2
   dc3da:	429f      	cmp	r7, r3
   dc3dc:	d8ee      	bhi.n	dc3bc <__gethex+0x17e>
   dc3de:	4618      	mov	r0, r3
   dc3e0:	9a01      	ldr	r2, [sp, #4]
   dc3e2:	9903      	ldr	r1, [sp, #12]
   dc3e4:	9309      	str	r3, [sp, #36]	; 0x24
   dc3e6:	f7fe fd3d 	bl	dae64 <strncmp>
   dc3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3ec:	b168      	cbz	r0, dc40a <__gethex+0x1cc>
   dc3ee:	e7e5      	b.n	dc3bc <__gethex+0x17e>
   dc3f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc3f4:	f7ff ff0e 	bl	dc214 <__hexdig_fun>
   dc3f8:	f000 000f 	and.w	r0, r0, #15
   dc3fc:	fa00 f00b 	lsl.w	r0, r0, fp
   dc400:	9b05      	ldr	r3, [sp, #20]
   dc402:	ea49 0900 	orr.w	r9, r9, r0
   dc406:	f10b 0b04 	add.w	fp, fp, #4
   dc40a:	461e      	mov	r6, r3
   dc40c:	e7cd      	b.n	dc3aa <__gethex+0x16c>
   dc40e:	9804      	ldr	r0, [sp, #16]
   dc410:	f840 9b04 	str.w	r9, [r0], #4
   dc414:	ebca 0000 	rsb	r0, sl, r0
   dc418:	1080      	asrs	r0, r0, #2
   dc41a:	6128      	str	r0, [r5, #16]
   dc41c:	0147      	lsls	r7, r0, #5
   dc41e:	4648      	mov	r0, r9
   dc420:	f000 fb89 	bl	dcb36 <__hi0bits>
   dc424:	f8d8 6000 	ldr.w	r6, [r8]
   dc428:	1a38      	subs	r0, r7, r0
   dc42a:	42b0      	cmp	r0, r6
   dc42c:	dd26      	ble.n	dc47c <__gethex+0x23e>
   dc42e:	1b87      	subs	r7, r0, r6
   dc430:	4639      	mov	r1, r7
   dc432:	4628      	mov	r0, r5
   dc434:	f000 fe87 	bl	dd146 <__any_on>
   dc438:	b1c8      	cbz	r0, dc46e <__gethex+0x230>
   dc43a:	1e7b      	subs	r3, r7, #1
   dc43c:	1159      	asrs	r1, r3, #5
   dc43e:	f003 021f 	and.w	r2, r3, #31
   dc442:	f04f 0901 	mov.w	r9, #1
   dc446:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc44a:	fa09 f202 	lsl.w	r2, r9, r2
   dc44e:	420a      	tst	r2, r1
   dc450:	d00e      	beq.n	dc470 <__gethex+0x232>
   dc452:	454b      	cmp	r3, r9
   dc454:	dc02      	bgt.n	dc45c <__gethex+0x21e>
   dc456:	f04f 0902 	mov.w	r9, #2
   dc45a:	e009      	b.n	dc470 <__gethex+0x232>
   dc45c:	1eb9      	subs	r1, r7, #2
   dc45e:	4628      	mov	r0, r5
   dc460:	f000 fe71 	bl	dd146 <__any_on>
   dc464:	2800      	cmp	r0, #0
   dc466:	d0f6      	beq.n	dc456 <__gethex+0x218>
   dc468:	f04f 0903 	mov.w	r9, #3
   dc46c:	e000      	b.n	dc470 <__gethex+0x232>
   dc46e:	4681      	mov	r9, r0
   dc470:	4639      	mov	r1, r7
   dc472:	4628      	mov	r0, r5
   dc474:	f7ff fe98 	bl	dc1a8 <rshift>
   dc478:	443c      	add	r4, r7
   dc47a:	e00c      	b.n	dc496 <__gethex+0x258>
   dc47c:	da09      	bge.n	dc492 <__gethex+0x254>
   dc47e:	1a37      	subs	r7, r6, r0
   dc480:	4629      	mov	r1, r5
   dc482:	463a      	mov	r2, r7
   dc484:	9802      	ldr	r0, [sp, #8]
   dc486:	f000 fc8b 	bl	dcda0 <__lshift>
   dc48a:	1be4      	subs	r4, r4, r7
   dc48c:	4605      	mov	r5, r0
   dc48e:	f100 0a14 	add.w	sl, r0, #20
   dc492:	f04f 0900 	mov.w	r9, #0
   dc496:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc49a:	429c      	cmp	r4, r3
   dc49c:	dd08      	ble.n	dc4b0 <__gethex+0x272>
   dc49e:	9802      	ldr	r0, [sp, #8]
   dc4a0:	4629      	mov	r1, r5
   dc4a2:	f000 fab8 	bl	dca16 <_Bfree>
   dc4a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc4a8:	2300      	movs	r3, #0
   dc4aa:	6013      	str	r3, [r2, #0]
   dc4ac:	20a3      	movs	r0, #163	; 0xa3
   dc4ae:	e0e2      	b.n	dc676 <__gethex+0x438>
   dc4b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc4b4:	4284      	cmp	r4, r0
   dc4b6:	da53      	bge.n	dc560 <__gethex+0x322>
   dc4b8:	1b04      	subs	r4, r0, r4
   dc4ba:	42a6      	cmp	r6, r4
   dc4bc:	dc2e      	bgt.n	dc51c <__gethex+0x2de>
   dc4be:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc4c2:	2b02      	cmp	r3, #2
   dc4c4:	d01a      	beq.n	dc4fc <__gethex+0x2be>
   dc4c6:	2b03      	cmp	r3, #3
   dc4c8:	d01c      	beq.n	dc504 <__gethex+0x2c6>
   dc4ca:	2b01      	cmp	r3, #1
   dc4cc:	d11d      	bne.n	dc50a <__gethex+0x2cc>
   dc4ce:	42a6      	cmp	r6, r4
   dc4d0:	d11b      	bne.n	dc50a <__gethex+0x2cc>
   dc4d2:	2e01      	cmp	r6, #1
   dc4d4:	dc0b      	bgt.n	dc4ee <__gethex+0x2b0>
   dc4d6:	9a06      	ldr	r2, [sp, #24]
   dc4d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc4dc:	6013      	str	r3, [r2, #0]
   dc4de:	2301      	movs	r3, #1
   dc4e0:	612b      	str	r3, [r5, #16]
   dc4e2:	f8ca 3000 	str.w	r3, [sl]
   dc4e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc4e8:	2062      	movs	r0, #98	; 0x62
   dc4ea:	601d      	str	r5, [r3, #0]
   dc4ec:	e0c3      	b.n	dc676 <__gethex+0x438>
   dc4ee:	1e71      	subs	r1, r6, #1
   dc4f0:	4628      	mov	r0, r5
   dc4f2:	f000 fe28 	bl	dd146 <__any_on>
   dc4f6:	2800      	cmp	r0, #0
   dc4f8:	d1ed      	bne.n	dc4d6 <__gethex+0x298>
   dc4fa:	e006      	b.n	dc50a <__gethex+0x2cc>
   dc4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc4fe:	2b00      	cmp	r3, #0
   dc500:	d0e9      	beq.n	dc4d6 <__gethex+0x298>
   dc502:	e002      	b.n	dc50a <__gethex+0x2cc>
   dc504:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc506:	2b00      	cmp	r3, #0
   dc508:	d1e5      	bne.n	dc4d6 <__gethex+0x298>
   dc50a:	9802      	ldr	r0, [sp, #8]
   dc50c:	4629      	mov	r1, r5
   dc50e:	f000 fa82 	bl	dca16 <_Bfree>
   dc512:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc514:	2300      	movs	r3, #0
   dc516:	6013      	str	r3, [r2, #0]
   dc518:	2050      	movs	r0, #80	; 0x50
   dc51a:	e0ac      	b.n	dc676 <__gethex+0x438>
   dc51c:	1e67      	subs	r7, r4, #1
   dc51e:	f1b9 0f00 	cmp.w	r9, #0
   dc522:	d106      	bne.n	dc532 <__gethex+0x2f4>
   dc524:	b13f      	cbz	r7, dc536 <__gethex+0x2f8>
   dc526:	4639      	mov	r1, r7
   dc528:	4628      	mov	r0, r5
   dc52a:	f000 fe0c 	bl	dd146 <__any_on>
   dc52e:	4681      	mov	r9, r0
   dc530:	e001      	b.n	dc536 <__gethex+0x2f8>
   dc532:	f04f 0901 	mov.w	r9, #1
   dc536:	117a      	asrs	r2, r7, #5
   dc538:	2301      	movs	r3, #1
   dc53a:	f007 071f 	and.w	r7, r7, #31
   dc53e:	fa03 f707 	lsl.w	r7, r3, r7
   dc542:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc546:	4621      	mov	r1, r4
   dc548:	421f      	tst	r7, r3
   dc54a:	4628      	mov	r0, r5
   dc54c:	bf18      	it	ne
   dc54e:	f049 0902 	orrne.w	r9, r9, #2
   dc552:	1b36      	subs	r6, r6, r4
   dc554:	f7ff fe28 	bl	dc1a8 <rshift>
   dc558:	2702      	movs	r7, #2
   dc55a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc55e:	e000      	b.n	dc562 <__gethex+0x324>
   dc560:	2701      	movs	r7, #1
   dc562:	f1b9 0f00 	cmp.w	r9, #0
   dc566:	f000 8081 	beq.w	dc66c <__gethex+0x42e>
   dc56a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc56e:	2b02      	cmp	r3, #2
   dc570:	d00e      	beq.n	dc590 <__gethex+0x352>
   dc572:	2b03      	cmp	r3, #3
   dc574:	d010      	beq.n	dc598 <__gethex+0x35a>
   dc576:	2b01      	cmp	r3, #1
   dc578:	d176      	bne.n	dc668 <__gethex+0x42a>
   dc57a:	f019 0f02 	tst.w	r9, #2
   dc57e:	d073      	beq.n	dc668 <__gethex+0x42a>
   dc580:	f8da 0000 	ldr.w	r0, [sl]
   dc584:	ea49 0900 	orr.w	r9, r9, r0
   dc588:	f019 0f01 	tst.w	r9, #1
   dc58c:	d107      	bne.n	dc59e <__gethex+0x360>
   dc58e:	e06b      	b.n	dc668 <__gethex+0x42a>
   dc590:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc592:	f1c3 0301 	rsb	r3, r3, #1
   dc596:	9315      	str	r3, [sp, #84]	; 0x54
   dc598:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc59a:	2b00      	cmp	r3, #0
   dc59c:	d064      	beq.n	dc668 <__gethex+0x42a>
   dc59e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc5a2:	f105 0314 	add.w	r3, r5, #20
   dc5a6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc5aa:	eb03 0109 	add.w	r1, r3, r9
   dc5ae:	2000      	movs	r0, #0
   dc5b0:	681a      	ldr	r2, [r3, #0]
   dc5b2:	f1b2 3fff 	cmp.w	r2, #4294967295
   dc5b6:	d002      	beq.n	dc5be <__gethex+0x380>
   dc5b8:	3201      	adds	r2, #1
   dc5ba:	601a      	str	r2, [r3, #0]
   dc5bc:	e020      	b.n	dc600 <__gethex+0x3c2>
   dc5be:	f843 0b04 	str.w	r0, [r3], #4
   dc5c2:	4299      	cmp	r1, r3
   dc5c4:	d8f4      	bhi.n	dc5b0 <__gethex+0x372>
   dc5c6:	68ab      	ldr	r3, [r5, #8]
   dc5c8:	459a      	cmp	sl, r3
   dc5ca:	db12      	blt.n	dc5f2 <__gethex+0x3b4>
   dc5cc:	6869      	ldr	r1, [r5, #4]
   dc5ce:	9802      	ldr	r0, [sp, #8]
   dc5d0:	3101      	adds	r1, #1
   dc5d2:	f000 f9eb 	bl	dc9ac <_Balloc>
   dc5d6:	692a      	ldr	r2, [r5, #16]
   dc5d8:	3202      	adds	r2, #2
   dc5da:	f105 010c 	add.w	r1, r5, #12
   dc5de:	4683      	mov	fp, r0
   dc5e0:	0092      	lsls	r2, r2, #2
   dc5e2:	300c      	adds	r0, #12
   dc5e4:	f7fd fe9d 	bl	da322 <memcpy>
   dc5e8:	4629      	mov	r1, r5
   dc5ea:	9802      	ldr	r0, [sp, #8]
   dc5ec:	f000 fa13 	bl	dca16 <_Bfree>
   dc5f0:	465d      	mov	r5, fp
   dc5f2:	692b      	ldr	r3, [r5, #16]
   dc5f4:	1c5a      	adds	r2, r3, #1
   dc5f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc5fa:	612a      	str	r2, [r5, #16]
   dc5fc:	2201      	movs	r2, #1
   dc5fe:	615a      	str	r2, [r3, #20]
   dc600:	2f02      	cmp	r7, #2
   dc602:	f105 0214 	add.w	r2, r5, #20
   dc606:	d111      	bne.n	dc62c <__gethex+0x3ee>
   dc608:	f8d8 3000 	ldr.w	r3, [r8]
   dc60c:	3b01      	subs	r3, #1
   dc60e:	429e      	cmp	r6, r3
   dc610:	d127      	bne.n	dc662 <__gethex+0x424>
   dc612:	1171      	asrs	r1, r6, #5
   dc614:	2301      	movs	r3, #1
   dc616:	f006 061f 	and.w	r6, r6, #31
   dc61a:	fa03 f606 	lsl.w	r6, r3, r6
   dc61e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc622:	421e      	tst	r6, r3
   dc624:	bf0c      	ite	eq
   dc626:	2702      	moveq	r7, #2
   dc628:	2701      	movne	r7, #1
   dc62a:	e01a      	b.n	dc662 <__gethex+0x424>
   dc62c:	692b      	ldr	r3, [r5, #16]
   dc62e:	459a      	cmp	sl, r3
   dc630:	da0a      	bge.n	dc648 <__gethex+0x40a>
   dc632:	2101      	movs	r1, #1
   dc634:	4628      	mov	r0, r5
   dc636:	f7ff fdb7 	bl	dc1a8 <rshift>
   dc63a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc63e:	3401      	adds	r4, #1
   dc640:	429c      	cmp	r4, r3
   dc642:	f73f af2c 	bgt.w	dc49e <__gethex+0x260>
   dc646:	e00b      	b.n	dc660 <__gethex+0x422>
   dc648:	f016 061f 	ands.w	r6, r6, #31
   dc64c:	d008      	beq.n	dc660 <__gethex+0x422>
   dc64e:	4491      	add	r9, r2
   dc650:	f1c6 0620 	rsb	r6, r6, #32
   dc654:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc658:	f000 fa6d 	bl	dcb36 <__hi0bits>
   dc65c:	42b0      	cmp	r0, r6
   dc65e:	dbe8      	blt.n	dc632 <__gethex+0x3f4>
   dc660:	2701      	movs	r7, #1
   dc662:	f047 0720 	orr.w	r7, r7, #32
   dc666:	e001      	b.n	dc66c <__gethex+0x42e>
   dc668:	f047 0710 	orr.w	r7, r7, #16
   dc66c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc66e:	601d      	str	r5, [r3, #0]
   dc670:	9b06      	ldr	r3, [sp, #24]
   dc672:	4638      	mov	r0, r7
   dc674:	601c      	str	r4, [r3, #0]
   dc676:	b00b      	add	sp, #44	; 0x2c
   dc678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc67c <L_shift>:
   dc67c:	f1c2 0208 	rsb	r2, r2, #8
   dc680:	0092      	lsls	r2, r2, #2
   dc682:	b570      	push	{r4, r5, r6, lr}
   dc684:	f1c2 0620 	rsb	r6, r2, #32
   dc688:	6843      	ldr	r3, [r0, #4]
   dc68a:	6805      	ldr	r5, [r0, #0]
   dc68c:	fa03 f406 	lsl.w	r4, r3, r6
   dc690:	432c      	orrs	r4, r5
   dc692:	40d3      	lsrs	r3, r2
   dc694:	6004      	str	r4, [r0, #0]
   dc696:	f840 3f04 	str.w	r3, [r0, #4]!
   dc69a:	4288      	cmp	r0, r1
   dc69c:	d3f4      	bcc.n	dc688 <L_shift+0xc>
   dc69e:	bd70      	pop	{r4, r5, r6, pc}

000dc6a0 <__match>:
   dc6a0:	b530      	push	{r4, r5, lr}
   dc6a2:	6803      	ldr	r3, [r0, #0]
   dc6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc6a8:	3301      	adds	r3, #1
   dc6aa:	b14c      	cbz	r4, dc6c0 <__match+0x20>
   dc6ac:	781a      	ldrb	r2, [r3, #0]
   dc6ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc6b2:	2d19      	cmp	r5, #25
   dc6b4:	bf98      	it	ls
   dc6b6:	3220      	addls	r2, #32
   dc6b8:	42a2      	cmp	r2, r4
   dc6ba:	d0f3      	beq.n	dc6a4 <__match+0x4>
   dc6bc:	2000      	movs	r0, #0
   dc6be:	bd30      	pop	{r4, r5, pc}
   dc6c0:	6003      	str	r3, [r0, #0]
   dc6c2:	2001      	movs	r0, #1
   dc6c4:	bd30      	pop	{r4, r5, pc}

000dc6c6 <__hexnan>:
   dc6c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6ca:	680b      	ldr	r3, [r1, #0]
   dc6cc:	f8d0 b000 	ldr.w	fp, [r0]
   dc6d0:	115e      	asrs	r6, r3, #5
   dc6d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc6d6:	f013 031f 	ands.w	r3, r3, #31
   dc6da:	b085      	sub	sp, #20
   dc6dc:	bf18      	it	ne
   dc6de:	3604      	addne	r6, #4
   dc6e0:	1f35      	subs	r5, r6, #4
   dc6e2:	4617      	mov	r7, r2
   dc6e4:	2200      	movs	r2, #0
   dc6e6:	4682      	mov	sl, r0
   dc6e8:	9301      	str	r3, [sp, #4]
   dc6ea:	f846 2c04 	str.w	r2, [r6, #-4]
   dc6ee:	46a8      	mov	r8, r5
   dc6f0:	462c      	mov	r4, r5
   dc6f2:	9200      	str	r2, [sp, #0]
   dc6f4:	4691      	mov	r9, r2
   dc6f6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc6fa:	2900      	cmp	r1, #0
   dc6fc:	d03c      	beq.n	dc778 <__hexnan+0xb2>
   dc6fe:	4608      	mov	r0, r1
   dc700:	9203      	str	r2, [sp, #12]
   dc702:	9102      	str	r1, [sp, #8]
   dc704:	f7ff fd86 	bl	dc214 <__hexdig_fun>
   dc708:	9a03      	ldr	r2, [sp, #12]
   dc70a:	bb00      	cbnz	r0, dc74e <__hexnan+0x88>
   dc70c:	9902      	ldr	r1, [sp, #8]
   dc70e:	2920      	cmp	r1, #32
   dc710:	d816      	bhi.n	dc740 <__hexnan+0x7a>
   dc712:	9b00      	ldr	r3, [sp, #0]
   dc714:	4599      	cmp	r9, r3
   dc716:	ddee      	ble.n	dc6f6 <__hexnan+0x30>
   dc718:	4544      	cmp	r4, r8
   dc71a:	d205      	bcs.n	dc728 <__hexnan+0x62>
   dc71c:	2a07      	cmp	r2, #7
   dc71e:	dc03      	bgt.n	dc728 <__hexnan+0x62>
   dc720:	4641      	mov	r1, r8
   dc722:	4620      	mov	r0, r4
   dc724:	f7ff ffaa 	bl	dc67c <L_shift>
   dc728:	42bc      	cmp	r4, r7
   dc72a:	d923      	bls.n	dc774 <__hexnan+0xae>
   dc72c:	2300      	movs	r3, #0
   dc72e:	f1a4 0804 	sub.w	r8, r4, #4
   dc732:	f844 3c04 	str.w	r3, [r4, #-4]
   dc736:	f8cd 9000 	str.w	r9, [sp]
   dc73a:	4644      	mov	r4, r8
   dc73c:	461a      	mov	r2, r3
   dc73e:	e7da      	b.n	dc6f6 <__hexnan+0x30>
   dc740:	2929      	cmp	r1, #41	; 0x29
   dc742:	d148      	bne.n	dc7d6 <__hexnan+0x110>
   dc744:	f10b 0301 	add.w	r3, fp, #1
   dc748:	f8ca 3000 	str.w	r3, [sl]
   dc74c:	e014      	b.n	dc778 <__hexnan+0xb2>
   dc74e:	3201      	adds	r2, #1
   dc750:	2a08      	cmp	r2, #8
   dc752:	f109 0901 	add.w	r9, r9, #1
   dc756:	dd06      	ble.n	dc766 <__hexnan+0xa0>
   dc758:	42bc      	cmp	r4, r7
   dc75a:	d9cc      	bls.n	dc6f6 <__hexnan+0x30>
   dc75c:	2300      	movs	r3, #0
   dc75e:	f844 3c04 	str.w	r3, [r4, #-4]
   dc762:	2201      	movs	r2, #1
   dc764:	3c04      	subs	r4, #4
   dc766:	6821      	ldr	r1, [r4, #0]
   dc768:	f000 000f 	and.w	r0, r0, #15
   dc76c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc770:	6020      	str	r0, [r4, #0]
   dc772:	e7c0      	b.n	dc6f6 <__hexnan+0x30>
   dc774:	2208      	movs	r2, #8
   dc776:	e7be      	b.n	dc6f6 <__hexnan+0x30>
   dc778:	f1b9 0f00 	cmp.w	r9, #0
   dc77c:	d02b      	beq.n	dc7d6 <__hexnan+0x110>
   dc77e:	4544      	cmp	r4, r8
   dc780:	d205      	bcs.n	dc78e <__hexnan+0xc8>
   dc782:	2a07      	cmp	r2, #7
   dc784:	dc03      	bgt.n	dc78e <__hexnan+0xc8>
   dc786:	4641      	mov	r1, r8
   dc788:	4620      	mov	r0, r4
   dc78a:	f7ff ff77 	bl	dc67c <L_shift>
   dc78e:	42bc      	cmp	r4, r7
   dc790:	d90c      	bls.n	dc7ac <__hexnan+0xe6>
   dc792:	463b      	mov	r3, r7
   dc794:	f854 2b04 	ldr.w	r2, [r4], #4
   dc798:	f843 2b04 	str.w	r2, [r3], #4
   dc79c:	42a5      	cmp	r5, r4
   dc79e:	d2f9      	bcs.n	dc794 <__hexnan+0xce>
   dc7a0:	2200      	movs	r2, #0
   dc7a2:	f843 2b04 	str.w	r2, [r3], #4
   dc7a6:	429d      	cmp	r5, r3
   dc7a8:	d2fb      	bcs.n	dc7a2 <__hexnan+0xdc>
   dc7aa:	e00b      	b.n	dc7c4 <__hexnan+0xfe>
   dc7ac:	9b01      	ldr	r3, [sp, #4]
   dc7ae:	b14b      	cbz	r3, dc7c4 <__hexnan+0xfe>
   dc7b0:	f1c3 0220 	rsb	r2, r3, #32
   dc7b4:	f04f 33ff 	mov.w	r3, #4294967295
   dc7b8:	40d3      	lsrs	r3, r2
   dc7ba:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc7be:	4013      	ands	r3, r2
   dc7c0:	f846 3c04 	str.w	r3, [r6, #-4]
   dc7c4:	682b      	ldr	r3, [r5, #0]
   dc7c6:	b943      	cbnz	r3, dc7da <__hexnan+0x114>
   dc7c8:	42bd      	cmp	r5, r7
   dc7ca:	d102      	bne.n	dc7d2 <__hexnan+0x10c>
   dc7cc:	2301      	movs	r3, #1
   dc7ce:	602b      	str	r3, [r5, #0]
   dc7d0:	e003      	b.n	dc7da <__hexnan+0x114>
   dc7d2:	3d04      	subs	r5, #4
   dc7d4:	e7f6      	b.n	dc7c4 <__hexnan+0xfe>
   dc7d6:	2004      	movs	r0, #4
   dc7d8:	e000      	b.n	dc7dc <__hexnan+0x116>
   dc7da:	2005      	movs	r0, #5
   dc7dc:	b005      	add	sp, #20
   dc7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc7e4 <_findenv_r>:
   dc7e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7e8:	4607      	mov	r7, r0
   dc7ea:	468b      	mov	fp, r1
   dc7ec:	4690      	mov	r8, r2
   dc7ee:	f000 fccc 	bl	dd18a <__env_lock>
   dc7f2:	4b19      	ldr	r3, [pc, #100]	; (dc858 <_findenv_r+0x74>)
   dc7f4:	681d      	ldr	r5, [r3, #0]
   dc7f6:	469a      	mov	sl, r3
   dc7f8:	b13d      	cbz	r5, dc80a <_findenv_r+0x26>
   dc7fa:	465c      	mov	r4, fp
   dc7fc:	4623      	mov	r3, r4
   dc7fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc802:	b142      	cbz	r2, dc816 <_findenv_r+0x32>
   dc804:	2a3d      	cmp	r2, #61	; 0x3d
   dc806:	461c      	mov	r4, r3
   dc808:	d1f8      	bne.n	dc7fc <_findenv_r+0x18>
   dc80a:	4638      	mov	r0, r7
   dc80c:	f000 fcbe 	bl	dd18c <__env_unlock>
   dc810:	2000      	movs	r0, #0
   dc812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc816:	ebcb 0404 	rsb	r4, fp, r4
   dc81a:	46a9      	mov	r9, r5
   dc81c:	f859 0b04 	ldr.w	r0, [r9], #4
   dc820:	2800      	cmp	r0, #0
   dc822:	d0f2      	beq.n	dc80a <_findenv_r+0x26>
   dc824:	4622      	mov	r2, r4
   dc826:	4659      	mov	r1, fp
   dc828:	f7fe fb1c 	bl	dae64 <strncmp>
   dc82c:	b988      	cbnz	r0, dc852 <_findenv_r+0x6e>
   dc82e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc832:	191e      	adds	r6, r3, r4
   dc834:	5d1b      	ldrb	r3, [r3, r4]
   dc836:	2b3d      	cmp	r3, #61	; 0x3d
   dc838:	d10b      	bne.n	dc852 <_findenv_r+0x6e>
   dc83a:	f8da 3000 	ldr.w	r3, [sl]
   dc83e:	1aed      	subs	r5, r5, r3
   dc840:	10ad      	asrs	r5, r5, #2
   dc842:	4638      	mov	r0, r7
   dc844:	f8c8 5000 	str.w	r5, [r8]
   dc848:	f000 fca0 	bl	dd18c <__env_unlock>
   dc84c:	1c70      	adds	r0, r6, #1
   dc84e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc852:	464d      	mov	r5, r9
   dc854:	e7e1      	b.n	dc81a <_findenv_r+0x36>
   dc856:	bf00      	nop
   dc858:	2003d7cc 	.word	0x2003d7cc

000dc85c <_getenv_r>:
   dc85c:	b507      	push	{r0, r1, r2, lr}
   dc85e:	aa01      	add	r2, sp, #4
   dc860:	f7ff ffc0 	bl	dc7e4 <_findenv_r>
   dc864:	b003      	add	sp, #12
   dc866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc86c <__gettzinfo>:
   dc86c:	4800      	ldr	r0, [pc, #0]	; (dc870 <__gettzinfo+0x4>)
   dc86e:	4770      	bx	lr
   dc870:	2003d78c 	.word	0x2003d78c

000dc874 <gmtime_r>:
   dc874:	6802      	ldr	r2, [r0, #0]
   dc876:	4b47      	ldr	r3, [pc, #284]	; (dc994 <gmtime_r+0x120>)
   dc878:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc87a:	fb92 f4f3 	sdiv	r4, r2, r3
   dc87e:	fb03 2214 	mls	r2, r3, r4, r2
   dc882:	2a00      	cmp	r2, #0
   dc884:	bfbc      	itt	lt
   dc886:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dc88a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc88e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc892:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc896:	fb92 f3f0 	sdiv	r3, r2, r0
   dc89a:	fb00 2213 	mls	r2, r0, r3, r2
   dc89e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc8a2:	bfac      	ite	ge
   dc8a4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc8a8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc8ac:	608b      	str	r3, [r1, #8]
   dc8ae:	fb92 f3f0 	sdiv	r3, r2, r0
   dc8b2:	fb00 2213 	mls	r2, r0, r3, r2
   dc8b6:	604b      	str	r3, [r1, #4]
   dc8b8:	600a      	str	r2, [r1, #0]
   dc8ba:	2307      	movs	r3, #7
   dc8bc:	1ce2      	adds	r2, r4, #3
   dc8be:	fb92 f3f3 	sdiv	r3, r2, r3
   dc8c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc8c6:	1ad3      	subs	r3, r2, r3
   dc8c8:	618b      	str	r3, [r1, #24]
   dc8ca:	4b33      	ldr	r3, [pc, #204]	; (dc998 <gmtime_r+0x124>)
   dc8cc:	4d33      	ldr	r5, [pc, #204]	; (dc99c <gmtime_r+0x128>)
   dc8ce:	fb94 f5f5 	sdiv	r5, r4, r5
   dc8d2:	fb03 4405 	mla	r4, r3, r5, r4
   dc8d6:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc8da:	fbb4 f2f2 	udiv	r2, r4, r2
   dc8de:	4422      	add	r2, r4
   dc8e0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc8e4:	fbb4 f3f7 	udiv	r3, r4, r7
   dc8e8:	1ad2      	subs	r2, r2, r3
   dc8ea:	482d      	ldr	r0, [pc, #180]	; (dc9a0 <gmtime_r+0x12c>)
   dc8ec:	fbb4 f0f0 	udiv	r0, r4, r0
   dc8f0:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc8f4:	1a13      	subs	r3, r2, r0
   dc8f6:	fbb3 f6f6 	udiv	r6, r3, r6
   dc8fa:	4434      	add	r4, r6
   dc8fc:	f240 126d 	movw	r2, #365	; 0x16d
   dc900:	fbb3 f0f2 	udiv	r0, r3, r2
   dc904:	fbb3 f3f7 	udiv	r3, r3, r7
   dc908:	1ae3      	subs	r3, r4, r3
   dc90a:	fb02 3310 	mls	r3, r2, r0, r3
   dc90e:	2499      	movs	r4, #153	; 0x99
   dc910:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc914:	3202      	adds	r2, #2
   dc916:	fbb2 f2f4 	udiv	r2, r2, r4
   dc91a:	2a0a      	cmp	r2, #10
   dc91c:	fb04 f402 	mul.w	r4, r4, r2
   dc920:	f104 0602 	add.w	r6, r4, #2
   dc924:	f04f 0405 	mov.w	r4, #5
   dc928:	fbb6 f4f4 	udiv	r4, r6, r4
   dc92c:	bf34      	ite	cc
   dc92e:	2602      	movcc	r6, #2
   dc930:	f06f 0609 	mvncs.w	r6, #9
   dc934:	4416      	add	r6, r2
   dc936:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc93a:	fb02 0505 	mla	r5, r2, r5, r0
   dc93e:	1c5f      	adds	r7, r3, #1
   dc940:	2e01      	cmp	r6, #1
   dc942:	bf98      	it	ls
   dc944:	3501      	addls	r5, #1
   dc946:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc94a:	eba7 0704 	sub.w	r7, r7, r4
   dc94e:	d302      	bcc.n	dc956 <gmtime_r+0xe2>
   dc950:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc954:	e014      	b.n	dc980 <gmtime_r+0x10c>
   dc956:	0782      	lsls	r2, r0, #30
   dc958:	d105      	bne.n	dc966 <gmtime_r+0xf2>
   dc95a:	2464      	movs	r4, #100	; 0x64
   dc95c:	fbb0 f2f4 	udiv	r2, r0, r4
   dc960:	fb04 0212 	mls	r2, r4, r2, r0
   dc964:	b94a      	cbnz	r2, dc97a <gmtime_r+0x106>
   dc966:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc96a:	fbb0 f4f2 	udiv	r4, r0, r2
   dc96e:	fb02 0014 	mls	r0, r2, r4, r0
   dc972:	fab0 f280 	clz	r2, r0
   dc976:	0952      	lsrs	r2, r2, #5
   dc978:	e000      	b.n	dc97c <gmtime_r+0x108>
   dc97a:	2201      	movs	r2, #1
   dc97c:	333b      	adds	r3, #59	; 0x3b
   dc97e:	441a      	add	r2, r3
   dc980:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc984:	2300      	movs	r3, #0
   dc986:	61ca      	str	r2, [r1, #28]
   dc988:	614d      	str	r5, [r1, #20]
   dc98a:	610e      	str	r6, [r1, #16]
   dc98c:	60cf      	str	r7, [r1, #12]
   dc98e:	620b      	str	r3, [r1, #32]
   dc990:	4608      	mov	r0, r1
   dc992:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc994:	00015180 	.word	0x00015180
   dc998:	fffdc54f 	.word	0xfffdc54f
   dc99c:	00023ab1 	.word	0x00023ab1
   dc9a0:	00023ab0 	.word	0x00023ab0

000dc9a4 <labs>:
   dc9a4:	2800      	cmp	r0, #0
   dc9a6:	bfb8      	it	lt
   dc9a8:	4240      	neglt	r0, r0
   dc9aa:	4770      	bx	lr

000dc9ac <_Balloc>:
   dc9ac:	b570      	push	{r4, r5, r6, lr}
   dc9ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc9b0:	4604      	mov	r4, r0
   dc9b2:	460e      	mov	r6, r1
   dc9b4:	b93d      	cbnz	r5, dc9c6 <_Balloc+0x1a>
   dc9b6:	2010      	movs	r0, #16
   dc9b8:	f7f9 ffa2 	bl	d6900 <malloc>
   dc9bc:	6260      	str	r0, [r4, #36]	; 0x24
   dc9be:	6045      	str	r5, [r0, #4]
   dc9c0:	6085      	str	r5, [r0, #8]
   dc9c2:	6005      	str	r5, [r0, #0]
   dc9c4:	60c5      	str	r5, [r0, #12]
   dc9c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc9c8:	68eb      	ldr	r3, [r5, #12]
   dc9ca:	b143      	cbz	r3, dc9de <_Balloc+0x32>
   dc9cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc9ce:	68db      	ldr	r3, [r3, #12]
   dc9d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc9d4:	b178      	cbz	r0, dc9f6 <_Balloc+0x4a>
   dc9d6:	6802      	ldr	r2, [r0, #0]
   dc9d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc9dc:	e017      	b.n	dca0e <_Balloc+0x62>
   dc9de:	2221      	movs	r2, #33	; 0x21
   dc9e0:	2104      	movs	r1, #4
   dc9e2:	4620      	mov	r0, r4
   dc9e4:	f7fd fcb0 	bl	da348 <_calloc_r>
   dc9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc9ea:	60e8      	str	r0, [r5, #12]
   dc9ec:	68db      	ldr	r3, [r3, #12]
   dc9ee:	2b00      	cmp	r3, #0
   dc9f0:	d1ec      	bne.n	dc9cc <_Balloc+0x20>
   dc9f2:	2000      	movs	r0, #0
   dc9f4:	bd70      	pop	{r4, r5, r6, pc}
   dc9f6:	2101      	movs	r1, #1
   dc9f8:	fa01 f506 	lsl.w	r5, r1, r6
   dc9fc:	1d6a      	adds	r2, r5, #5
   dc9fe:	0092      	lsls	r2, r2, #2
   dca00:	4620      	mov	r0, r4
   dca02:	f7fd fca1 	bl	da348 <_calloc_r>
   dca06:	2800      	cmp	r0, #0
   dca08:	d0f3      	beq.n	dc9f2 <_Balloc+0x46>
   dca0a:	6046      	str	r6, [r0, #4]
   dca0c:	6085      	str	r5, [r0, #8]
   dca0e:	2300      	movs	r3, #0
   dca10:	6103      	str	r3, [r0, #16]
   dca12:	60c3      	str	r3, [r0, #12]
   dca14:	bd70      	pop	{r4, r5, r6, pc}

000dca16 <_Bfree>:
   dca16:	b570      	push	{r4, r5, r6, lr}
   dca18:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dca1a:	4606      	mov	r6, r0
   dca1c:	460d      	mov	r5, r1
   dca1e:	b93c      	cbnz	r4, dca30 <_Bfree+0x1a>
   dca20:	2010      	movs	r0, #16
   dca22:	f7f9 ff6d 	bl	d6900 <malloc>
   dca26:	6270      	str	r0, [r6, #36]	; 0x24
   dca28:	6044      	str	r4, [r0, #4]
   dca2a:	6084      	str	r4, [r0, #8]
   dca2c:	6004      	str	r4, [r0, #0]
   dca2e:	60c4      	str	r4, [r0, #12]
   dca30:	b13d      	cbz	r5, dca42 <_Bfree+0x2c>
   dca32:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dca34:	686a      	ldr	r2, [r5, #4]
   dca36:	68db      	ldr	r3, [r3, #12]
   dca38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dca3c:	6029      	str	r1, [r5, #0]
   dca3e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dca42:	bd70      	pop	{r4, r5, r6, pc}

000dca44 <__multadd>:
   dca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dca48:	690d      	ldr	r5, [r1, #16]
   dca4a:	461f      	mov	r7, r3
   dca4c:	4606      	mov	r6, r0
   dca4e:	460c      	mov	r4, r1
   dca50:	f101 0e14 	add.w	lr, r1, #20
   dca54:	2300      	movs	r3, #0
   dca56:	f8de 0000 	ldr.w	r0, [lr]
   dca5a:	b281      	uxth	r1, r0
   dca5c:	fb02 7101 	mla	r1, r2, r1, r7
   dca60:	0c0f      	lsrs	r7, r1, #16
   dca62:	0c00      	lsrs	r0, r0, #16
   dca64:	fb02 7000 	mla	r0, r2, r0, r7
   dca68:	b289      	uxth	r1, r1
   dca6a:	3301      	adds	r3, #1
   dca6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dca70:	429d      	cmp	r5, r3
   dca72:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dca76:	f84e 1b04 	str.w	r1, [lr], #4
   dca7a:	dcec      	bgt.n	dca56 <__multadd+0x12>
   dca7c:	b1d7      	cbz	r7, dcab4 <__multadd+0x70>
   dca7e:	68a3      	ldr	r3, [r4, #8]
   dca80:	429d      	cmp	r5, r3
   dca82:	db12      	blt.n	dcaaa <__multadd+0x66>
   dca84:	6861      	ldr	r1, [r4, #4]
   dca86:	4630      	mov	r0, r6
   dca88:	3101      	adds	r1, #1
   dca8a:	f7ff ff8f 	bl	dc9ac <_Balloc>
   dca8e:	6922      	ldr	r2, [r4, #16]
   dca90:	3202      	adds	r2, #2
   dca92:	f104 010c 	add.w	r1, r4, #12
   dca96:	4680      	mov	r8, r0
   dca98:	0092      	lsls	r2, r2, #2
   dca9a:	300c      	adds	r0, #12
   dca9c:	f7fd fc41 	bl	da322 <memcpy>
   dcaa0:	4621      	mov	r1, r4
   dcaa2:	4630      	mov	r0, r6
   dcaa4:	f7ff ffb7 	bl	dca16 <_Bfree>
   dcaa8:	4644      	mov	r4, r8
   dcaaa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dcaae:	3501      	adds	r5, #1
   dcab0:	615f      	str	r7, [r3, #20]
   dcab2:	6125      	str	r5, [r4, #16]
   dcab4:	4620      	mov	r0, r4
   dcab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcaba <__s2b>:
   dcaba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcabe:	460c      	mov	r4, r1
   dcac0:	4615      	mov	r5, r2
   dcac2:	461f      	mov	r7, r3
   dcac4:	2209      	movs	r2, #9
   dcac6:	3308      	adds	r3, #8
   dcac8:	4606      	mov	r6, r0
   dcaca:	fb93 f3f2 	sdiv	r3, r3, r2
   dcace:	2100      	movs	r1, #0
   dcad0:	2201      	movs	r2, #1
   dcad2:	429a      	cmp	r2, r3
   dcad4:	da02      	bge.n	dcadc <__s2b+0x22>
   dcad6:	0052      	lsls	r2, r2, #1
   dcad8:	3101      	adds	r1, #1
   dcada:	e7fa      	b.n	dcad2 <__s2b+0x18>
   dcadc:	4630      	mov	r0, r6
   dcade:	f7ff ff65 	bl	dc9ac <_Balloc>
   dcae2:	9b08      	ldr	r3, [sp, #32]
   dcae4:	6143      	str	r3, [r0, #20]
   dcae6:	2d09      	cmp	r5, #9
   dcae8:	f04f 0301 	mov.w	r3, #1
   dcaec:	6103      	str	r3, [r0, #16]
   dcaee:	dd11      	ble.n	dcb14 <__s2b+0x5a>
   dcaf0:	f104 0809 	add.w	r8, r4, #9
   dcaf4:	46c1      	mov	r9, r8
   dcaf6:	442c      	add	r4, r5
   dcaf8:	f819 3b01 	ldrb.w	r3, [r9], #1
   dcafc:	4601      	mov	r1, r0
   dcafe:	3b30      	subs	r3, #48	; 0x30
   dcb00:	220a      	movs	r2, #10
   dcb02:	4630      	mov	r0, r6
   dcb04:	f7ff ff9e 	bl	dca44 <__multadd>
   dcb08:	45a1      	cmp	r9, r4
   dcb0a:	d1f5      	bne.n	dcaf8 <__s2b+0x3e>
   dcb0c:	eb08 0405 	add.w	r4, r8, r5
   dcb10:	3c08      	subs	r4, #8
   dcb12:	e001      	b.n	dcb18 <__s2b+0x5e>
   dcb14:	340a      	adds	r4, #10
   dcb16:	2509      	movs	r5, #9
   dcb18:	1b2d      	subs	r5, r5, r4
   dcb1a:	1963      	adds	r3, r4, r5
   dcb1c:	429f      	cmp	r7, r3
   dcb1e:	dd08      	ble.n	dcb32 <__s2b+0x78>
   dcb20:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcb24:	4601      	mov	r1, r0
   dcb26:	3b30      	subs	r3, #48	; 0x30
   dcb28:	220a      	movs	r2, #10
   dcb2a:	4630      	mov	r0, r6
   dcb2c:	f7ff ff8a 	bl	dca44 <__multadd>
   dcb30:	e7f3      	b.n	dcb1a <__s2b+0x60>
   dcb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcb36 <__hi0bits>:
   dcb36:	0c03      	lsrs	r3, r0, #16
   dcb38:	041b      	lsls	r3, r3, #16
   dcb3a:	b913      	cbnz	r3, dcb42 <__hi0bits+0xc>
   dcb3c:	0400      	lsls	r0, r0, #16
   dcb3e:	2310      	movs	r3, #16
   dcb40:	e000      	b.n	dcb44 <__hi0bits+0xe>
   dcb42:	2300      	movs	r3, #0
   dcb44:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcb48:	bf04      	itt	eq
   dcb4a:	0200      	lsleq	r0, r0, #8
   dcb4c:	3308      	addeq	r3, #8
   dcb4e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcb52:	bf04      	itt	eq
   dcb54:	0100      	lsleq	r0, r0, #4
   dcb56:	3304      	addeq	r3, #4
   dcb58:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcb5c:	bf04      	itt	eq
   dcb5e:	0080      	lsleq	r0, r0, #2
   dcb60:	3302      	addeq	r3, #2
   dcb62:	2800      	cmp	r0, #0
   dcb64:	db03      	blt.n	dcb6e <__hi0bits+0x38>
   dcb66:	0042      	lsls	r2, r0, #1
   dcb68:	d503      	bpl.n	dcb72 <__hi0bits+0x3c>
   dcb6a:	1c58      	adds	r0, r3, #1
   dcb6c:	4770      	bx	lr
   dcb6e:	4618      	mov	r0, r3
   dcb70:	4770      	bx	lr
   dcb72:	2020      	movs	r0, #32
   dcb74:	4770      	bx	lr

000dcb76 <__lo0bits>:
   dcb76:	6803      	ldr	r3, [r0, #0]
   dcb78:	f013 0207 	ands.w	r2, r3, #7
   dcb7c:	d00b      	beq.n	dcb96 <__lo0bits+0x20>
   dcb7e:	07d9      	lsls	r1, r3, #31
   dcb80:	d422      	bmi.n	dcbc8 <__lo0bits+0x52>
   dcb82:	079a      	lsls	r2, r3, #30
   dcb84:	bf4b      	itete	mi
   dcb86:	085b      	lsrmi	r3, r3, #1
   dcb88:	089b      	lsrpl	r3, r3, #2
   dcb8a:	6003      	strmi	r3, [r0, #0]
   dcb8c:	6003      	strpl	r3, [r0, #0]
   dcb8e:	bf4c      	ite	mi
   dcb90:	2001      	movmi	r0, #1
   dcb92:	2002      	movpl	r0, #2
   dcb94:	4770      	bx	lr
   dcb96:	b299      	uxth	r1, r3
   dcb98:	b909      	cbnz	r1, dcb9e <__lo0bits+0x28>
   dcb9a:	0c1b      	lsrs	r3, r3, #16
   dcb9c:	2210      	movs	r2, #16
   dcb9e:	f013 0fff 	tst.w	r3, #255	; 0xff
   dcba2:	bf04      	itt	eq
   dcba4:	0a1b      	lsreq	r3, r3, #8
   dcba6:	3208      	addeq	r2, #8
   dcba8:	0719      	lsls	r1, r3, #28
   dcbaa:	bf04      	itt	eq
   dcbac:	091b      	lsreq	r3, r3, #4
   dcbae:	3204      	addeq	r2, #4
   dcbb0:	0799      	lsls	r1, r3, #30
   dcbb2:	bf04      	itt	eq
   dcbb4:	089b      	lsreq	r3, r3, #2
   dcbb6:	3202      	addeq	r2, #2
   dcbb8:	07d9      	lsls	r1, r3, #31
   dcbba:	d402      	bmi.n	dcbc2 <__lo0bits+0x4c>
   dcbbc:	085b      	lsrs	r3, r3, #1
   dcbbe:	d005      	beq.n	dcbcc <__lo0bits+0x56>
   dcbc0:	3201      	adds	r2, #1
   dcbc2:	6003      	str	r3, [r0, #0]
   dcbc4:	4610      	mov	r0, r2
   dcbc6:	4770      	bx	lr
   dcbc8:	2000      	movs	r0, #0
   dcbca:	4770      	bx	lr
   dcbcc:	2020      	movs	r0, #32
   dcbce:	4770      	bx	lr

000dcbd0 <__i2b>:
   dcbd0:	b510      	push	{r4, lr}
   dcbd2:	460c      	mov	r4, r1
   dcbd4:	2101      	movs	r1, #1
   dcbd6:	f7ff fee9 	bl	dc9ac <_Balloc>
   dcbda:	2201      	movs	r2, #1
   dcbdc:	6144      	str	r4, [r0, #20]
   dcbde:	6102      	str	r2, [r0, #16]
   dcbe0:	bd10      	pop	{r4, pc}

000dcbe2 <__multiply>:
   dcbe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcbe6:	4614      	mov	r4, r2
   dcbe8:	690a      	ldr	r2, [r1, #16]
   dcbea:	6923      	ldr	r3, [r4, #16]
   dcbec:	429a      	cmp	r2, r3
   dcbee:	bfb8      	it	lt
   dcbf0:	460b      	movlt	r3, r1
   dcbf2:	4688      	mov	r8, r1
   dcbf4:	bfbc      	itt	lt
   dcbf6:	46a0      	movlt	r8, r4
   dcbf8:	461c      	movlt	r4, r3
   dcbfa:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dcbfe:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dcc02:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcc06:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dcc0a:	eb07 0609 	add.w	r6, r7, r9
   dcc0e:	429e      	cmp	r6, r3
   dcc10:	bfc8      	it	gt
   dcc12:	3101      	addgt	r1, #1
   dcc14:	f7ff feca 	bl	dc9ac <_Balloc>
   dcc18:	f100 0514 	add.w	r5, r0, #20
   dcc1c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dcc20:	462b      	mov	r3, r5
   dcc22:	2200      	movs	r2, #0
   dcc24:	4563      	cmp	r3, ip
   dcc26:	d202      	bcs.n	dcc2e <__multiply+0x4c>
   dcc28:	f843 2b04 	str.w	r2, [r3], #4
   dcc2c:	e7fa      	b.n	dcc24 <__multiply+0x42>
   dcc2e:	f104 0214 	add.w	r2, r4, #20
   dcc32:	f108 0114 	add.w	r1, r8, #20
   dcc36:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dcc3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dcc3e:	9300      	str	r3, [sp, #0]
   dcc40:	9b00      	ldr	r3, [sp, #0]
   dcc42:	9201      	str	r2, [sp, #4]
   dcc44:	4293      	cmp	r3, r2
   dcc46:	d957      	bls.n	dccf8 <__multiply+0x116>
   dcc48:	f8b2 b000 	ldrh.w	fp, [r2]
   dcc4c:	f1bb 0f00 	cmp.w	fp, #0
   dcc50:	d023      	beq.n	dcc9a <__multiply+0xb8>
   dcc52:	4689      	mov	r9, r1
   dcc54:	46ae      	mov	lr, r5
   dcc56:	f04f 0800 	mov.w	r8, #0
   dcc5a:	f859 4b04 	ldr.w	r4, [r9], #4
   dcc5e:	f8be a000 	ldrh.w	sl, [lr]
   dcc62:	b2a3      	uxth	r3, r4
   dcc64:	fb0b a303 	mla	r3, fp, r3, sl
   dcc68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dcc6c:	f8de 4000 	ldr.w	r4, [lr]
   dcc70:	4443      	add	r3, r8
   dcc72:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcc76:	fb0b 840a 	mla	r4, fp, sl, r8
   dcc7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dcc7e:	46f2      	mov	sl, lr
   dcc80:	b29b      	uxth	r3, r3
   dcc82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dcc86:	454f      	cmp	r7, r9
   dcc88:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcc8c:	f84a 3b04 	str.w	r3, [sl], #4
   dcc90:	d901      	bls.n	dcc96 <__multiply+0xb4>
   dcc92:	46d6      	mov	lr, sl
   dcc94:	e7e1      	b.n	dcc5a <__multiply+0x78>
   dcc96:	f8ce 8004 	str.w	r8, [lr, #4]
   dcc9a:	9b01      	ldr	r3, [sp, #4]
   dcc9c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dcca0:	3204      	adds	r2, #4
   dcca2:	f1ba 0f00 	cmp.w	sl, #0
   dcca6:	d021      	beq.n	dccec <__multiply+0x10a>
   dcca8:	682b      	ldr	r3, [r5, #0]
   dccaa:	462c      	mov	r4, r5
   dccac:	4689      	mov	r9, r1
   dccae:	f04f 0800 	mov.w	r8, #0
   dccb2:	f8b9 e000 	ldrh.w	lr, [r9]
   dccb6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dccba:	fb0a be0e 	mla	lr, sl, lr, fp
   dccbe:	44f0      	add	r8, lr
   dccc0:	46a3      	mov	fp, r4
   dccc2:	b29b      	uxth	r3, r3
   dccc4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dccc8:	f84b 3b04 	str.w	r3, [fp], #4
   dcccc:	f859 3b04 	ldr.w	r3, [r9], #4
   dccd0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dccd4:	0c1b      	lsrs	r3, r3, #16
   dccd6:	fb0a e303 	mla	r3, sl, r3, lr
   dccda:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dccde:	454f      	cmp	r7, r9
   dcce0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dcce4:	d901      	bls.n	dccea <__multiply+0x108>
   dcce6:	465c      	mov	r4, fp
   dcce8:	e7e3      	b.n	dccb2 <__multiply+0xd0>
   dccea:	6063      	str	r3, [r4, #4]
   dccec:	3504      	adds	r5, #4
   dccee:	e7a7      	b.n	dcc40 <__multiply+0x5e>
   dccf0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dccf4:	b913      	cbnz	r3, dccfc <__multiply+0x11a>
   dccf6:	3e01      	subs	r6, #1
   dccf8:	2e00      	cmp	r6, #0
   dccfa:	dcf9      	bgt.n	dccf0 <__multiply+0x10e>
   dccfc:	6106      	str	r6, [r0, #16]
   dccfe:	b003      	add	sp, #12
   dcd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcd04 <__pow5mult>:
   dcd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcd08:	4615      	mov	r5, r2
   dcd0a:	f012 0203 	ands.w	r2, r2, #3
   dcd0e:	4606      	mov	r6, r0
   dcd10:	460f      	mov	r7, r1
   dcd12:	d007      	beq.n	dcd24 <__pow5mult+0x20>
   dcd14:	3a01      	subs	r2, #1
   dcd16:	4c21      	ldr	r4, [pc, #132]	; (dcd9c <__pow5mult+0x98>)
   dcd18:	2300      	movs	r3, #0
   dcd1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcd1e:	f7ff fe91 	bl	dca44 <__multadd>
   dcd22:	4607      	mov	r7, r0
   dcd24:	10ad      	asrs	r5, r5, #2
   dcd26:	d036      	beq.n	dcd96 <__pow5mult+0x92>
   dcd28:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dcd2a:	b93c      	cbnz	r4, dcd3c <__pow5mult+0x38>
   dcd2c:	2010      	movs	r0, #16
   dcd2e:	f7f9 fde7 	bl	d6900 <malloc>
   dcd32:	6270      	str	r0, [r6, #36]	; 0x24
   dcd34:	6044      	str	r4, [r0, #4]
   dcd36:	6084      	str	r4, [r0, #8]
   dcd38:	6004      	str	r4, [r0, #0]
   dcd3a:	60c4      	str	r4, [r0, #12]
   dcd3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dcd40:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcd44:	b94c      	cbnz	r4, dcd5a <__pow5mult+0x56>
   dcd46:	f240 2171 	movw	r1, #625	; 0x271
   dcd4a:	4630      	mov	r0, r6
   dcd4c:	f7ff ff40 	bl	dcbd0 <__i2b>
   dcd50:	2300      	movs	r3, #0
   dcd52:	f8c8 0008 	str.w	r0, [r8, #8]
   dcd56:	4604      	mov	r4, r0
   dcd58:	6003      	str	r3, [r0, #0]
   dcd5a:	f04f 0800 	mov.w	r8, #0
   dcd5e:	07eb      	lsls	r3, r5, #31
   dcd60:	d50a      	bpl.n	dcd78 <__pow5mult+0x74>
   dcd62:	4639      	mov	r1, r7
   dcd64:	4622      	mov	r2, r4
   dcd66:	4630      	mov	r0, r6
   dcd68:	f7ff ff3b 	bl	dcbe2 <__multiply>
   dcd6c:	4639      	mov	r1, r7
   dcd6e:	4681      	mov	r9, r0
   dcd70:	4630      	mov	r0, r6
   dcd72:	f7ff fe50 	bl	dca16 <_Bfree>
   dcd76:	464f      	mov	r7, r9
   dcd78:	106d      	asrs	r5, r5, #1
   dcd7a:	d00c      	beq.n	dcd96 <__pow5mult+0x92>
   dcd7c:	6820      	ldr	r0, [r4, #0]
   dcd7e:	b108      	cbz	r0, dcd84 <__pow5mult+0x80>
   dcd80:	4604      	mov	r4, r0
   dcd82:	e7ec      	b.n	dcd5e <__pow5mult+0x5a>
   dcd84:	4622      	mov	r2, r4
   dcd86:	4621      	mov	r1, r4
   dcd88:	4630      	mov	r0, r6
   dcd8a:	f7ff ff2a 	bl	dcbe2 <__multiply>
   dcd8e:	6020      	str	r0, [r4, #0]
   dcd90:	f8c0 8000 	str.w	r8, [r0]
   dcd94:	e7f4      	b.n	dcd80 <__pow5mult+0x7c>
   dcd96:	4638      	mov	r0, r7
   dcd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcd9c:	000de508 	.word	0x000de508

000dcda0 <__lshift>:
   dcda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcda4:	460c      	mov	r4, r1
   dcda6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcdaa:	6926      	ldr	r6, [r4, #16]
   dcdac:	6849      	ldr	r1, [r1, #4]
   dcdae:	68a3      	ldr	r3, [r4, #8]
   dcdb0:	4456      	add	r6, sl
   dcdb2:	4607      	mov	r7, r0
   dcdb4:	4691      	mov	r9, r2
   dcdb6:	1c75      	adds	r5, r6, #1
   dcdb8:	42ab      	cmp	r3, r5
   dcdba:	da02      	bge.n	dcdc2 <__lshift+0x22>
   dcdbc:	3101      	adds	r1, #1
   dcdbe:	005b      	lsls	r3, r3, #1
   dcdc0:	e7fa      	b.n	dcdb8 <__lshift+0x18>
   dcdc2:	4638      	mov	r0, r7
   dcdc4:	f7ff fdf2 	bl	dc9ac <_Balloc>
   dcdc8:	2300      	movs	r3, #0
   dcdca:	4680      	mov	r8, r0
   dcdcc:	f100 0114 	add.w	r1, r0, #20
   dcdd0:	461a      	mov	r2, r3
   dcdd2:	4553      	cmp	r3, sl
   dcdd4:	da03      	bge.n	dcdde <__lshift+0x3e>
   dcdd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dcdda:	3301      	adds	r3, #1
   dcddc:	e7f9      	b.n	dcdd2 <__lshift+0x32>
   dcdde:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dcde2:	6920      	ldr	r0, [r4, #16]
   dcde4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dcde8:	f019 091f 	ands.w	r9, r9, #31
   dcdec:	f104 0114 	add.w	r1, r4, #20
   dcdf0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dcdf4:	d014      	beq.n	dce20 <__lshift+0x80>
   dcdf6:	f1c9 0c20 	rsb	ip, r9, #32
   dcdfa:	2200      	movs	r2, #0
   dcdfc:	6808      	ldr	r0, [r1, #0]
   dcdfe:	fa00 f009 	lsl.w	r0, r0, r9
   dce02:	4302      	orrs	r2, r0
   dce04:	469a      	mov	sl, r3
   dce06:	f843 2b04 	str.w	r2, [r3], #4
   dce0a:	f851 2b04 	ldr.w	r2, [r1], #4
   dce0e:	458e      	cmp	lr, r1
   dce10:	fa22 f20c 	lsr.w	r2, r2, ip
   dce14:	d8f2      	bhi.n	dcdfc <__lshift+0x5c>
   dce16:	f8ca 2004 	str.w	r2, [sl, #4]
   dce1a:	b142      	cbz	r2, dce2e <__lshift+0x8e>
   dce1c:	1cb5      	adds	r5, r6, #2
   dce1e:	e006      	b.n	dce2e <__lshift+0x8e>
   dce20:	3b04      	subs	r3, #4
   dce22:	f851 2b04 	ldr.w	r2, [r1], #4
   dce26:	f843 2f04 	str.w	r2, [r3, #4]!
   dce2a:	458e      	cmp	lr, r1
   dce2c:	d8f9      	bhi.n	dce22 <__lshift+0x82>
   dce2e:	3d01      	subs	r5, #1
   dce30:	4638      	mov	r0, r7
   dce32:	f8c8 5010 	str.w	r5, [r8, #16]
   dce36:	4621      	mov	r1, r4
   dce38:	f7ff fded 	bl	dca16 <_Bfree>
   dce3c:	4640      	mov	r0, r8
   dce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dce42 <__mcmp>:
   dce42:	6903      	ldr	r3, [r0, #16]
   dce44:	690a      	ldr	r2, [r1, #16]
   dce46:	1a9b      	subs	r3, r3, r2
   dce48:	b510      	push	{r4, lr}
   dce4a:	d111      	bne.n	dce70 <__mcmp+0x2e>
   dce4c:	0092      	lsls	r2, r2, #2
   dce4e:	3014      	adds	r0, #20
   dce50:	3114      	adds	r1, #20
   dce52:	1883      	adds	r3, r0, r2
   dce54:	440a      	add	r2, r1
   dce56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dce5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dce5e:	428c      	cmp	r4, r1
   dce60:	d002      	beq.n	dce68 <__mcmp+0x26>
   dce62:	d307      	bcc.n	dce74 <__mcmp+0x32>
   dce64:	2001      	movs	r0, #1
   dce66:	bd10      	pop	{r4, pc}
   dce68:	4298      	cmp	r0, r3
   dce6a:	d3f4      	bcc.n	dce56 <__mcmp+0x14>
   dce6c:	2000      	movs	r0, #0
   dce6e:	bd10      	pop	{r4, pc}
   dce70:	4618      	mov	r0, r3
   dce72:	bd10      	pop	{r4, pc}
   dce74:	f04f 30ff 	mov.w	r0, #4294967295
   dce78:	bd10      	pop	{r4, pc}

000dce7a <__mdiff>:
   dce7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dce7e:	460c      	mov	r4, r1
   dce80:	4607      	mov	r7, r0
   dce82:	4611      	mov	r1, r2
   dce84:	4620      	mov	r0, r4
   dce86:	4615      	mov	r5, r2
   dce88:	f7ff ffdb 	bl	dce42 <__mcmp>
   dce8c:	1e06      	subs	r6, r0, #0
   dce8e:	d108      	bne.n	dcea2 <__mdiff+0x28>
   dce90:	4631      	mov	r1, r6
   dce92:	4638      	mov	r0, r7
   dce94:	f7ff fd8a 	bl	dc9ac <_Balloc>
   dce98:	2301      	movs	r3, #1
   dce9a:	6103      	str	r3, [r0, #16]
   dce9c:	6146      	str	r6, [r0, #20]
   dce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcea2:	bfbc      	itt	lt
   dcea4:	4623      	movlt	r3, r4
   dcea6:	462c      	movlt	r4, r5
   dcea8:	4638      	mov	r0, r7
   dceaa:	6861      	ldr	r1, [r4, #4]
   dceac:	bfba      	itte	lt
   dceae:	461d      	movlt	r5, r3
   dceb0:	2601      	movlt	r6, #1
   dceb2:	2600      	movge	r6, #0
   dceb4:	f7ff fd7a 	bl	dc9ac <_Balloc>
   dceb8:	692b      	ldr	r3, [r5, #16]
   dceba:	60c6      	str	r6, [r0, #12]
   dcebc:	6926      	ldr	r6, [r4, #16]
   dcebe:	f105 0914 	add.w	r9, r5, #20
   dcec2:	3414      	adds	r4, #20
   dcec4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dcec8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dcecc:	f100 0514 	add.w	r5, r0, #20
   dced0:	f04f 0c00 	mov.w	ip, #0
   dced4:	f854 3b04 	ldr.w	r3, [r4], #4
   dced8:	f859 2b04 	ldr.w	r2, [r9], #4
   dcedc:	fa1c f183 	uxtah	r1, ip, r3
   dcee0:	fa1f fe82 	uxth.w	lr, r2
   dcee4:	0c12      	lsrs	r2, r2, #16
   dcee6:	ebce 0101 	rsb	r1, lr, r1
   dceea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dceee:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dcef2:	b289      	uxth	r1, r1
   dcef4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcef8:	45c8      	cmp	r8, r9
   dcefa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dcefe:	46a6      	mov	lr, r4
   dcf00:	f845 3b04 	str.w	r3, [r5], #4
   dcf04:	d8e6      	bhi.n	dced4 <__mdiff+0x5a>
   dcf06:	45be      	cmp	lr, r7
   dcf08:	d20e      	bcs.n	dcf28 <__mdiff+0xae>
   dcf0a:	f85e 1b04 	ldr.w	r1, [lr], #4
   dcf0e:	fa1c f281 	uxtah	r2, ip, r1
   dcf12:	1413      	asrs	r3, r2, #16
   dcf14:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dcf18:	b292      	uxth	r2, r2
   dcf1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dcf1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcf22:	f845 2b04 	str.w	r2, [r5], #4
   dcf26:	e7ee      	b.n	dcf06 <__mdiff+0x8c>
   dcf28:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dcf2c:	b90b      	cbnz	r3, dcf32 <__mdiff+0xb8>
   dcf2e:	3e01      	subs	r6, #1
   dcf30:	e7fa      	b.n	dcf28 <__mdiff+0xae>
   dcf32:	6106      	str	r6, [r0, #16]
   dcf34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcf38 <__ulp>:
   dcf38:	4b12      	ldr	r3, [pc, #72]	; (dcf84 <__ulp+0x4c>)
   dcf3a:	ee10 2a90 	vmov	r2, s1
   dcf3e:	401a      	ands	r2, r3
   dcf40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dcf44:	2b00      	cmp	r3, #0
   dcf46:	dd02      	ble.n	dcf4e <__ulp+0x16>
   dcf48:	2000      	movs	r0, #0
   dcf4a:	4619      	mov	r1, r3
   dcf4c:	e017      	b.n	dcf7e <__ulp+0x46>
   dcf4e:	425b      	negs	r3, r3
   dcf50:	151b      	asrs	r3, r3, #20
   dcf52:	2b13      	cmp	r3, #19
   dcf54:	f04f 0000 	mov.w	r0, #0
   dcf58:	f04f 0100 	mov.w	r1, #0
   dcf5c:	dc04      	bgt.n	dcf68 <__ulp+0x30>
   dcf5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dcf62:	fa42 f103 	asr.w	r1, r2, r3
   dcf66:	e00a      	b.n	dcf7e <__ulp+0x46>
   dcf68:	3b14      	subs	r3, #20
   dcf6a:	2b1e      	cmp	r3, #30
   dcf6c:	f04f 0201 	mov.w	r2, #1
   dcf70:	bfda      	itte	le
   dcf72:	f1c3 031f 	rsble	r3, r3, #31
   dcf76:	fa02 f303 	lslle.w	r3, r2, r3
   dcf7a:	4613      	movgt	r3, r2
   dcf7c:	4618      	mov	r0, r3
   dcf7e:	ec41 0b10 	vmov	d0, r0, r1
   dcf82:	4770      	bx	lr
   dcf84:	7ff00000 	.word	0x7ff00000

000dcf88 <__b2d>:
   dcf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcf8a:	6905      	ldr	r5, [r0, #16]
   dcf8c:	f100 0614 	add.w	r6, r0, #20
   dcf90:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dcf94:	1f2f      	subs	r7, r5, #4
   dcf96:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcf9a:	4620      	mov	r0, r4
   dcf9c:	f7ff fdcb 	bl	dcb36 <__hi0bits>
   dcfa0:	f1c0 0320 	rsb	r3, r0, #32
   dcfa4:	280a      	cmp	r0, #10
   dcfa6:	600b      	str	r3, [r1, #0]
   dcfa8:	dc14      	bgt.n	dcfd4 <__b2d+0x4c>
   dcfaa:	f1c0 0e0b 	rsb	lr, r0, #11
   dcfae:	fa24 f10e 	lsr.w	r1, r4, lr
   dcfb2:	42be      	cmp	r6, r7
   dcfb4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dcfb8:	bf34      	ite	cc
   dcfba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcfbe:	2100      	movcs	r1, #0
   dcfc0:	3015      	adds	r0, #21
   dcfc2:	fa04 f000 	lsl.w	r0, r4, r0
   dcfc6:	fa21 f10e 	lsr.w	r1, r1, lr
   dcfca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcfce:	ea40 0201 	orr.w	r2, r0, r1
   dcfd2:	e023      	b.n	dd01c <__b2d+0x94>
   dcfd4:	42be      	cmp	r6, r7
   dcfd6:	bf3a      	itte	cc
   dcfd8:	f1a5 0708 	subcc.w	r7, r5, #8
   dcfdc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcfe0:	2100      	movcs	r1, #0
   dcfe2:	380b      	subs	r0, #11
   dcfe4:	d015      	beq.n	dd012 <__b2d+0x8a>
   dcfe6:	4084      	lsls	r4, r0
   dcfe8:	f1c0 0520 	rsb	r5, r0, #32
   dcfec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dcff0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dcff4:	42b7      	cmp	r7, r6
   dcff6:	fa21 fe05 	lsr.w	lr, r1, r5
   dcffa:	ea44 030e 	orr.w	r3, r4, lr
   dcffe:	bf8c      	ite	hi
   dd000:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dd004:	2400      	movls	r4, #0
   dd006:	fa01 f000 	lsl.w	r0, r1, r0
   dd00a:	40ec      	lsrs	r4, r5
   dd00c:	ea40 0204 	orr.w	r2, r0, r4
   dd010:	e004      	b.n	dd01c <__b2d+0x94>
   dd012:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dd016:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd01a:	460a      	mov	r2, r1
   dd01c:	ec43 2b10 	vmov	d0, r2, r3
   dd020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd022 <__d2b>:
   dd022:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd026:	460e      	mov	r6, r1
   dd028:	2101      	movs	r1, #1
   dd02a:	ec59 8b10 	vmov	r8, r9, d0
   dd02e:	4615      	mov	r5, r2
   dd030:	f7ff fcbc 	bl	dc9ac <_Balloc>
   dd034:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dd038:	4607      	mov	r7, r0
   dd03a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dd03e:	b10c      	cbz	r4, dd044 <__d2b+0x22>
   dd040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd044:	9301      	str	r3, [sp, #4]
   dd046:	f1b8 0f00 	cmp.w	r8, #0
   dd04a:	d019      	beq.n	dd080 <__d2b+0x5e>
   dd04c:	a802      	add	r0, sp, #8
   dd04e:	f840 8d08 	str.w	r8, [r0, #-8]!
   dd052:	f7ff fd90 	bl	dcb76 <__lo0bits>
   dd056:	9b00      	ldr	r3, [sp, #0]
   dd058:	b148      	cbz	r0, dd06e <__d2b+0x4c>
   dd05a:	9a01      	ldr	r2, [sp, #4]
   dd05c:	f1c0 0120 	rsb	r1, r0, #32
   dd060:	fa02 f101 	lsl.w	r1, r2, r1
   dd064:	430b      	orrs	r3, r1
   dd066:	40c2      	lsrs	r2, r0
   dd068:	617b      	str	r3, [r7, #20]
   dd06a:	9201      	str	r2, [sp, #4]
   dd06c:	e000      	b.n	dd070 <__d2b+0x4e>
   dd06e:	617b      	str	r3, [r7, #20]
   dd070:	9b01      	ldr	r3, [sp, #4]
   dd072:	61bb      	str	r3, [r7, #24]
   dd074:	2b00      	cmp	r3, #0
   dd076:	bf14      	ite	ne
   dd078:	2102      	movne	r1, #2
   dd07a:	2101      	moveq	r1, #1
   dd07c:	6139      	str	r1, [r7, #16]
   dd07e:	e007      	b.n	dd090 <__d2b+0x6e>
   dd080:	a801      	add	r0, sp, #4
   dd082:	f7ff fd78 	bl	dcb76 <__lo0bits>
   dd086:	9b01      	ldr	r3, [sp, #4]
   dd088:	617b      	str	r3, [r7, #20]
   dd08a:	2101      	movs	r1, #1
   dd08c:	6139      	str	r1, [r7, #16]
   dd08e:	3020      	adds	r0, #32
   dd090:	b134      	cbz	r4, dd0a0 <__d2b+0x7e>
   dd092:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dd096:	4404      	add	r4, r0
   dd098:	6034      	str	r4, [r6, #0]
   dd09a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd09e:	e009      	b.n	dd0b4 <__d2b+0x92>
   dd0a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dd0a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd0a8:	6030      	str	r0, [r6, #0]
   dd0aa:	6918      	ldr	r0, [r3, #16]
   dd0ac:	f7ff fd43 	bl	dcb36 <__hi0bits>
   dd0b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dd0b4:	6028      	str	r0, [r5, #0]
   dd0b6:	4638      	mov	r0, r7
   dd0b8:	b003      	add	sp, #12
   dd0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd0be <__ratio>:
   dd0be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd0c2:	4688      	mov	r8, r1
   dd0c4:	4669      	mov	r1, sp
   dd0c6:	4681      	mov	r9, r0
   dd0c8:	f7ff ff5e 	bl	dcf88 <__b2d>
   dd0cc:	a901      	add	r1, sp, #4
   dd0ce:	4640      	mov	r0, r8
   dd0d0:	ec55 4b10 	vmov	r4, r5, d0
   dd0d4:	f7ff ff58 	bl	dcf88 <__b2d>
   dd0d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd0dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd0e0:	1a9a      	subs	r2, r3, r2
   dd0e2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dd0e6:	1ac9      	subs	r1, r1, r3
   dd0e8:	ec57 6b10 	vmov	r6, r7, d0
   dd0ec:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dd0f0:	2b00      	cmp	r3, #0
   dd0f2:	bfcc      	ite	gt
   dd0f4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dd0f8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dd0fc:	4632      	mov	r2, r6
   dd0fe:	463b      	mov	r3, r7
   dd100:	4620      	mov	r0, r4
   dd102:	4629      	mov	r1, r5
   dd104:	f7fc fda6 	bl	d9c54 <__aeabi_ddiv>
   dd108:	ec41 0b10 	vmov	d0, r0, r1
   dd10c:	b003      	add	sp, #12
   dd10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd112 <__copybits>:
   dd112:	3901      	subs	r1, #1
   dd114:	b510      	push	{r4, lr}
   dd116:	1149      	asrs	r1, r1, #5
   dd118:	6914      	ldr	r4, [r2, #16]
   dd11a:	3101      	adds	r1, #1
   dd11c:	f102 0314 	add.w	r3, r2, #20
   dd120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd124:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd128:	42a3      	cmp	r3, r4
   dd12a:	4602      	mov	r2, r0
   dd12c:	d204      	bcs.n	dd138 <__copybits+0x26>
   dd12e:	f853 2b04 	ldr.w	r2, [r3], #4
   dd132:	f840 2b04 	str.w	r2, [r0], #4
   dd136:	e7f7      	b.n	dd128 <__copybits+0x16>
   dd138:	2300      	movs	r3, #0
   dd13a:	428a      	cmp	r2, r1
   dd13c:	d202      	bcs.n	dd144 <__copybits+0x32>
   dd13e:	f842 3b04 	str.w	r3, [r2], #4
   dd142:	e7fa      	b.n	dd13a <__copybits+0x28>
   dd144:	bd10      	pop	{r4, pc}

000dd146 <__any_on>:
   dd146:	f100 0214 	add.w	r2, r0, #20
   dd14a:	6900      	ldr	r0, [r0, #16]
   dd14c:	114b      	asrs	r3, r1, #5
   dd14e:	4298      	cmp	r0, r3
   dd150:	b510      	push	{r4, lr}
   dd152:	db0c      	blt.n	dd16e <__any_on+0x28>
   dd154:	dd0c      	ble.n	dd170 <__any_on+0x2a>
   dd156:	f011 011f 	ands.w	r1, r1, #31
   dd15a:	d009      	beq.n	dd170 <__any_on+0x2a>
   dd15c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd160:	fa24 f001 	lsr.w	r0, r4, r1
   dd164:	fa00 f101 	lsl.w	r1, r0, r1
   dd168:	428c      	cmp	r4, r1
   dd16a:	d10c      	bne.n	dd186 <__any_on+0x40>
   dd16c:	e000      	b.n	dd170 <__any_on+0x2a>
   dd16e:	4603      	mov	r3, r0
   dd170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd174:	4293      	cmp	r3, r2
   dd176:	d904      	bls.n	dd182 <__any_on+0x3c>
   dd178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd17c:	2900      	cmp	r1, #0
   dd17e:	d0f9      	beq.n	dd174 <__any_on+0x2e>
   dd180:	e001      	b.n	dd186 <__any_on+0x40>
   dd182:	2000      	movs	r0, #0
   dd184:	bd10      	pop	{r4, pc}
   dd186:	2001      	movs	r0, #1
   dd188:	bd10      	pop	{r4, pc}

000dd18a <__env_lock>:
   dd18a:	4770      	bx	lr

000dd18c <__env_unlock>:
   dd18c:	4770      	bx	lr

000dd18e <link_code_end>:
	...

000dd190 <dynalib_user>:
   dd190:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   dd1a0:	0000 0000                                   ....

000dd1a4 <_ZTVN11ArduinoJson16StaticJsonBufferILj1000EEE>:
	...
   dd1ac:	4113 000d 6558 6f6e 446e 7461 0061 4c4f     .A..XenonData.OL
   dd1bc:	4445 4620 6165 6874 7265 6957 676e 4f00     ED FeatherWing.O
   dd1cc:	454c 2044 6562 7567 006e 6d70 2500 2f6d     LED begun.pm.%m/
   dd1dc:	6425 252f 2079 4925 253a 3a4d 5325 2500     %d/%y %I:%M:%S.%
   dd1ec:	2573 0073 534a 4e4f 7020 7261 6573 6620     s%s.JSON parse f
   dd1fc:	6961 656c 0064 6f56 746c 6761 2065 2e25     ailed.Voltage %.
   dd20c:	6632 7400 0066 7064 0066 6554 706d 2046     2f.tf.dpf.TempF 
   dd21c:	2e25 6632 202c 7548 206d 6425 2525 4400     %.2f, Hum %d%%.D
   dd22c:	7665 6369 3a65 6e20 746f 6620 756f 646e     evice: not found
   dd23c:	2500 3a73 6320 6c61 696c 676e 5320 7379     .%s: calling Sys
   dd24c:	6574 2e6d 6c73 6565 2870 4c53 4545 5f50     tem.sleep(SLEEP_
   dd25c:	4f4d 4544 445f 4545 2c50 2520 646c 3b29     MODE_DEEP, %ld);
   dd26c:	2500 3a73 7320 656c 7065 6e69 2e67 2e2e     .%s: sleeping...
   dd27c:	5000 6f6c 4274 746f 4320 6e6f 7274 6c6f     .PlotBot Control
   dd28c:	6f4e 6564 2820 7241 6f67 296e 5620 7325     Node (Argon) V%s
   dd29c:	0a00 7325 6309 6f6c 6475 6552 6461 3a79     ..%s.cloudReady:
   dd2ac:	2520 2c64 0020 6977 6966 6552 6461 3a79      %d, .wifiReady:
   dd2bc:	2520 2c64 0020 656d 6873 6552 6461 3a79      %d, .meshReady:
   dd2cc:	2520 2c64 0020 7562 7474 6e6f 203a 6425      %d, .button: %d
   dd2dc:	0a00 2a2a 202a 6f43 666e 6769 4420 7461     ..*** Config Dat
   dd2ec:	3a61 0900 6544 6976 6563 6449 203a 7325     a:..DeviceId: %s
   dd2fc:	202c 4e00 6d61 3a65 2520 2c73 0020 695a     , .Name: %s, .Zi
   dd30c:	4370 646f 3a65 2520 646c 0900 614c 6974     pCode: %ld..Lati
   dd31c:	7574 6564 203a 6c25 2c66 0020 6f4c 676e     tude: %lf, .Long
   dd32c:	7469 6475 2065 6c25 2c66 0020 6c45 7665     itude %lf, .Elev
   dd33c:	7461 6f69 3a6e 2520 646c 0900 6552 6f70     ation: %ld..Repo
   dd34c:	7472 6f54 6854 6e69 5367 6570 6b61 203a     rtToThingSpeak: 
   dd35c:	6c25 2c64 0020 6854 6e69 5367 6570 6b61     %ld, .ThingSpeak
   dd36c:	6843 6e61 656e 4e6c 6d75 6562 3a72 2520     ChannelNumber: %
   dd37c:	756c 202c 5400 6968 676e 7053 6165 576b     lu, .ThingSpeakW
   dd38c:	6972 6574 7041 4b69 7965 203a 7325 202c     riteApiKey: %s, 
   dd39c:	0900 6552 6f70 7472 6f54 7557 646e 7265     ..ReportToWunder
   dd3ac:	7247 756f 646e 203a 6c25 2c64 0020 7557     Ground: %ld, .Wu
   dd3bc:	646e 7265 7247 756f 646e 7750 6973 3a44     nderGroundPwsiD:
   dd3cc:	2520 2c73 0020 7557 646e 7265 7247 756f      %s, .WunderGrou
   dd3dc:	646e 6150 7373 6f77 6472 203a 7325 0900     ndPassword: %s..
   dd3ec:	6552 6f70 7472 6f54 6c43 756f 3a64 2520     ReportToCloud: %
   dd3fc:	646c 0900 6c53 6565 4970 746e 7265 6176     ld..SleepInterva
   dd40c:	3a6c 2520 646c 0900 7542 7474 6e6f 203a     l: %ld..Button: 
   dd41c:	6c25 0064                                   %ld.

000dd420 <_ZStL19piecewise_construct>:
   dd420:	6500 3030 6366 3665 3938 3033 3962 3165     .e00fce68930b9e1
   dd430:	6335 6237 3138 3933 0066 6152 6e69 412d     5c7b8139f.Rain-A
   dd440:	6772 6e6f 4100 5646 4a43 3834 5333 4c36     rgon.AFVCJ483S6L
   dd450:	5331 4d56 0034 574b 4d41 4e4f 4f52 3137     1SVM4.KWAMONRO71
   dd460:	6b00 6d33 6a6a 7170 0036 3065 6630 6563     .k3mjjpq6.e00fce
   dd470:	3836 3863 3565 6333 3733 3636 3165 3730     68c8e53c3766e107
   dd480:	3963 5200 6961 2d6e 6558 6f6e 2d6e 0031     c9.Rain-Xenon-1.
   dd490:	4930 4242 5938 5330 5547 5659 4136 5445     0IBB8Y0SGUYV6AET
   dd4a0:	4b00 4157 4f4d 524e 384f 0034 7a72 7466     .KWAMONRO84.rzft
   dd4b0:	626d 6d64 6500 3030 6366 3665 3338 3163     mbdm.e00fce683c1
   dd4c0:	3837 3361 3165 6339 6132 3234 0034 6152     78a3e19c2a424.Ra
   dd4d0:	6e69 582d 6e65 6e6f 322d 4b00 4233 515a     in-Xenon-2.K3BZQ
   dd4e0:	5946 4834 5738 4749 4f35 0053               FY4H8WIG5OS.

000dd4ec <_ZStL19piecewise_construct>:
   dd4ec:	0a00 2a2a 202a 6150 6c79 616f 3a64 7b00     ..*** Payload:.{
   dd4fc:	6e22 226d 223a 7325 2c22 6422 2274 253a     "nm":"%s","dt":%
   dd50c:	646c 002c 7325 7622 3a22 2e25 6632 007d     ld,.%s"v":%.2f}.
   dd51c:	7241 6f67 446e 7461 0061 4109 6772 6e6f     ArgonData..Argon
   dd52c:	6144 6174 203a 7325 4e00 4c55 004c 2a0a     Data: %s.NULL..*
   dd53c:	2a2a 2520 2c73 2520 0073 2a0a 2a2a 4220     ** %s, %s..*** B
   dd54c:	7461 6574 7972 4420 7461 3a61 0900 6162     attery Data:..ba
   dd55c:	7474 6f76 746c 203a 2e25 6632 0056 7355     ttvolt: %.2fV.Us
   dd56c:	7265 612d 6567 746e 5000 7261 6974 6c63     er-agent.Particl
   dd57c:	2065 7448 7074 6c43 6569 746e 4100 6363     e HttpClient.Acc
   dd58c:	7065 0074 2f2a 002a                         ept.*/*.

000dd594 <_ZTV14SSD1306_128x32>:
	...
   dd59c:	4111 000d 4a1d 000d 5d49 000d 73cf 000d     .A...J..I]...s..
   dd5ac:	5669 000d 5a49 000d 54cd 000d 5359 000d     iV..IZ...T..YS..
   dd5bc:	5b09 000d 5b9f 000d 5bd7 000d 5bf3 000d     .[...[...[...[..

000dd5cc <_ZTV12Adafruit_GFX>:
	...
   dd5dc:	5d49 000d 73cf 000d 40a9 000d 5a49 000d     I]...s...@..IZ..
   dd5ec:	5b69 000d 5b85 000d 5b09 000d 5b9f 000d     i[...[...[...[..
   dd5fc:	5bd7 000d 5bf3 000d                         .[...[..

000dd604 <_ZL4font>:
   dd604:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd614:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd624:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd634:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd644:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd654:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd664:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd674:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd684:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd694:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd6a4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd6b4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd6c4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd6d4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd6e4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd6f4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd704:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd714:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd724:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd734:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd744:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd754:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd764:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd774:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd784:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd794:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd7a4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd7b4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd7c4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd7d4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd7e4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd7f4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd804:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd814:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd824:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd834:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd844:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd854:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd864:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd874:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd884:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd894:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dd8a4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd8b4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd8c4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dd8d4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd8e4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dd8f4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dd904:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dd914:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd924:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd934:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd944:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd954:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd964:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd974:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dd984:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dd994:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dd9a4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dd9b4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dd9c4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dd9d4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dd9e4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dd9f4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dda04:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dda14:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dda24:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dda34:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dda44:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dda54:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dda64:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dda74:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dda84:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dda94:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   ddaa4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   ddab4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   ddac4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   ddad4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   ddae4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   ddaf4:	0012 3c3c 3c3c 0000 0000 7400 7572 0065     ..<<<<.....true.
   ddb04:	6166 736c 0065 756e 6c6c 6200 6608 6e0c     false.null.b.f.n
   ddb14:	720a 740d 0009 0000                         .r.t....

000ddb1c <_ZTVN5spark13EthernetClassE>:
	...
   ddb24:	6a1f 000d 6a15 000d 6a0b 000d 6a01 000d     .j...j...j...j..
   ddb34:	69f5 000d 69e9 000d 69dd 000d 69d5 000d     .i...i...i...i..
   ddb44:	69cb 000d 69c1 000d 8fa9 000d               .i...i......

000ddb50 <_ZTV8SPIClass>:
	...
   ddb58:	6a3d 000d 6a3f 000d                         =j..?j..

000ddb60 <_ZL14clock_divisors>:
   ddb60:	0800 1810 2820 3830                         .... (08

000ddb68 <_ZTV3UDP>:
	...
   ddb70:	71e1 000d 7205 000d 6bbd 000d 6ce7 000d     .q...r...k...l..
   ddb80:	6bb5 000d 6bd3 000d 6bf1 000d 6c0b 000d     .k...k...k...l..
   ddb90:	6c2f 000d 6ccb 000d 6fcd 000d 6d6d 000d     /l...l...o..mm..
   ddba0:	6eed 000d 6b9d 000d 7175 000d 6e71 000d     .n...k..uq..qn..
   ddbb0:	6da5 000d 71a3 000d 6d11 000d 6bab 000d     .m...q...m...k..
   ddbc0:	6d4d 000d 6bb1 000d 6c0d 000d fff0 ffff     Mm...k...l......
   ddbd0:	0000 0000 6c27 000d 6e6c 6600 006e 6f63     ....'l..ln.fn.co
   ddbe0:	6564 6400 7465 6961 006c 0a0d 2500 3130     de.detail....%01
   ddbf0:	7530 0020 205d 2800 3a29 0020 5b20 6300     0u .] .(): . [.c
   ddc00:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   ddc10:	2073 203d 6200 7561 0064 6553 6972 6c61     s = .baud.Serial
   ddc20:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   ddc30:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
   ddc40:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
   ddc50:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
   ddc60:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
   ddc70:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
   ddc80:	6148 646e 656c 0072 7061 0070 6f6e 656e     Handler.app.none
   ddc90:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   ddca0:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   ddcb0:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   ddcc0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   ddcd0:	7361 7463 6d69 0065                         asctime.

000ddcd8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ddce0:	796d 000d 7973 000d 798b 000d 7981 000d     my..sy...y...y..
   ddcf0:	796f 000d                                   oy..

000ddcf4 <_ZTV9IPAddress>:
	...
   ddcfc:	7e91 000d 7e81 000d 7e83 000d               .~...~...~..

000ddd08 <_ZTV9USBSerial>:
	...
   ddd10:	7f95 000d 7fe5 000d 7ff3 000d 73cf 000d     .............s..
   ddd20:	7fd1 000d 7f97 000d 7fad 000d 7fdf 000d     ................
   ddd30:	7fc3 000d 7f91 000d                         ........

000ddd38 <_ZTV11USARTSerial>:
	...
   ddd40:	80a1 000d 80f1 000d 80ff 000d 73cf 000d     .............s..
   ddd50:	80b5 000d 80d7 000d 80c3 000d 80eb 000d     ................
   ddd60:	80a3 000d 80a7 000d                         ........

000ddd68 <_ZTV7TwoWire>:
	...
   ddd70:	81cd 000d 8217 000d 81ef 000d 81cf 000d     ................
   ddd80:	81f7 000d 81ff 000d 8207 000d 820f 000d     ................

000ddd90 <_ZTVN5spark9MeshClassE>:
	...
   ddd98:	8305 000d 82fb 000d 82f1 000d 82e7 000d     ................
   ddda8:	82db 000d 82cf 000d 82c3 000d 82bb 000d     ................
   dddb8:	82b1 000d 82a7 000d 8fa9 000d 6666 3330     ............ff03
   dddc8:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   dddd8:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   ddde8:	2065 6170 6b63 7465 2520 0064               e packet %d.

000dddf4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dddfc:	89bd 000d 89c3 000d 8eab 000d 89d1 000d     ................
   dde0c:	89bf 000d                                   ....

000dde10 <_ZTV9TCPClient>:
	...
   dde18:	520d 000d 524d 000d 8935 000d 894f 000d     .R..MR..5...O...
   dde28:	8d51 000d 8b93 000d 8b65 000d 8979 000d     Q.......e...y...
   dde38:	8c29 000d 89d5 000d 8bc7 000d 8d23 000d     )...........#...
   dde48:	897b 000d 89b3 000d 8961 000d 8ac5 000d     {.......a.......
   dde58:	8b45 000d 6572 7663 6520 7272 726f 3d20     E...recv error =
   dde68:	2520 0064                                    %d.

000dde6c <_ZTVN5spark9WiFiClassE>:
	...
   dde74:	8f21 000d 8f17 000d 8f0d 000d 8ec3 000d     !...............
   dde84:	8f01 000d 8ef5 000d 8ee9 000d 8ee1 000d     ................
   dde94:	8ed7 000d 8ecd 000d 8fa9 000d               ............

000ddea0 <_ZTVN5spark12NetworkClassE>:
	...
   ddea8:	8f41 000d 8f4b 000d 8f55 000d 8f5f 000d     A...K...U..._...
   ddeb8:	8f69 000d 8f75 000d 8f81 000d 8f8d 000d     i...u...........
   ddec8:	8f95 000d 8f9f 000d 8fa9 000d               ............

000dded4 <_ZSt7nothrow>:
	...

000dded5 <day_name.4725>:
   dded5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddee5:	6972 6153 4a74                                   riSat

000ddeea <mon_name.4726>:
   ddeea:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddefa:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddf0a:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   ddf1a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   ddf2a:	6425 000a                                   %d..

000ddf2e <_ctype_>:
   ddf2e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddf3e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddf4e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ddf5e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ddf6e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ddf7e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddf8e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddf9e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddfae:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de030 <__sf_fake_stdin>:
	...

000de050 <__sf_fake_stdout>:
	...

000de070 <__sf_fake_stderr>:
	...
   de090:	0043 4f50 4953 0058                         C.POSIX.

000de098 <__month_lengths>:
   de098:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   de0a8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   de0b8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   de0c8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   de0d8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   de0e8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   de0f8:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   de108:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   de118:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   de128:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   de138:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   de148:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000de154 <fpi.5344>:
   de154:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de164:	0000 0000                                   ....

000de168 <fpinan.5380>:
   de168:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   de178:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

000de188 <tinytens>:
   de188:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de198:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de1a8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   de1b8:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   de1c8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   de1d8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   de1e8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   de1f8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   de208:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   de218:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   de228:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   de238:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   de248:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   de258:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   de268:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   de278:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   de288:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   de298:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   de2a8:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
   de2b8:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   de2c8:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   de2d8:	3a4d 5325 2520 0070                         M:%S %p.

000de2e0 <_C_time_locale>:
   de2e0:	e1b8 000d e1bc 000d e1c0 000d e1c4 000d     ................
   de2f0:	e1c8 000d e1cc 000d e1d0 000d e1d4 000d     ................
   de300:	e1d8 000d e1dc 000d e1e0 000d e1e4 000d     ................
   de310:	e1e8 000d e1f0 000d e1f9 000d e1ff 000d     ................
   de320:	e1c8 000d e205 000d e20a 000d e20f 000d     ................
   de330:	e216 000d e220 000d e228 000d e231 000d     .... ...(...1...
   de340:	e23a 000d e23e 000d e242 000d e246 000d     :...>...B...F...
   de350:	e24a 000d e24e 000d e252 000d e256 000d     J...N...R...V...
   de360:	e25d 000d e264 000d e26c 000d e276 000d     ]...d...l...v...
   de370:	e27f 000d e286 000d e28f 000d e298 000d     ................
   de380:	e2a1 000d e2b6 000d e2b9 000d e2bc 000d     ................
   de390:	e1e8 000d e1f0 000d e1f9 000d e1ff 000d     ................
   de3a0:	e1c8 000d e205 000d e20a 000d e20f 000d     ................
   de3b0:	e216 000d e220 000d e228 000d e231 000d     .... ...(...1...
   de3c0:	dc35 000d e2d4 000d db19 000d db19 000d     5...............
   de3d0:	db19 000d db19 000d db19 000d 5a54 4700     ............TZ.G
   de3e0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   de3f0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   de400:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   de410:	3a6e 6825 2575 006e                         n:%hu%n.

000de418 <__mprec_tens>:
   de418:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de428:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de438:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de448:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de458:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de468:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de478:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de488:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de498:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de4a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de4b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de4c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de4d8:	9db4 79d9 7843 44ea                         ...yCx.D

000de4e0 <__mprec_bigtens>:
   de4e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de4f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de500:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de508 <p05.5387>:
   de508:	0005 0000 0019 0000 007d 0000               ........}...

000de514 <link_const_variable_data_end>:
   de514:	000d410d 	.word	0x000d410d
   de518:	000d4a2d 	.word	0x000d4a2d
   de51c:	000d4b09 	.word	0x000d4b09
   de520:	000d4b0d 	.word	0x000d4b0d
   de524:	000d5009 	.word	0x000d5009
   de528:	000d51d1 	.word	0x000d51d1
   de52c:	000d5299 	.word	0x000d5299
   de530:	000d5345 	.word	0x000d5345
   de534:	000d5349 	.word	0x000d5349
   de538:	000d5a45 	.word	0x000d5a45
   de53c:	000d5dd9 	.word	0x000d5dd9
   de540:	000d5e15 	.word	0x000d5e15
   de544:	000d606d 	.word	0x000d606d
   de548:	000d6071 	.word	0x000d6071
   de54c:	000d60c5 	.word	0x000d60c5
   de550:	000d60c9 	.word	0x000d60c9
   de554:	000d60cd 	.word	0x000d60cd
   de558:	000d60d1 	.word	0x000d60d1
   de55c:	000d6135 	.word	0x000d6135
   de560:	000d619f 	.word	0x000d619f
   de564:	000d61a3 	.word	0x000d61a3
   de568:	000d6221 	.word	0x000d6221
   de56c:	000d6a29 	.word	0x000d6a29
   de570:	000d6b85 	.word	0x000d6b85
   de574:	000d7569 	.word	0x000d7569
   de578:	000d7825 	.word	0x000d7825
   de57c:	000d787d 	.word	0x000d787d
   de580:	000d88e9 	.word	0x000d88e9
   de584:	000d8f2d 	.word	0x000d8f2d
   de588:	000d9075 	.word	0x000d9075
   de58c:	000d91c1 	.word	0x000d91c1
   de590:	000d9401 	.word	0x000d9401
   de594:	000d9485 	.word	0x000d9485
   de598:	000d9549 	.word	0x000d9549
   de59c:	000d960d 	.word	0x000d960d
